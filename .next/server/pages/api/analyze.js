"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/analyze";
exports.ids = ["pages/api/analyze"];
exports.modules = {

/***/ "(api-node)/./lib/analysis/baseline.loader.ts":
/*!*****************************************!*\
  !*** ./lib/analysis/baseline.loader.ts ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearRulesCache: () => (/* binding */ clearRulesCache),\n/* harmony export */   getCachedBaselineRules: () => (/* binding */ getCachedBaselineRules),\n/* harmony export */   getDefaultBaselineRules: () => (/* binding */ getDefaultBaselineRules),\n/* harmony export */   getDependencyUpgradeTemplate: () => (/* binding */ getDependencyUpgradeTemplate),\n/* harmony export */   getLanguageRules: () => (/* binding */ getLanguageRules),\n/* harmony export */   getPatternQuickFix: () => (/* binding */ getPatternQuickFix),\n/* harmony export */   isRulesCacheValid: () => (/* binding */ isRulesCacheValid),\n/* harmony export */   loadBaselineRules: () => (/* binding */ loadBaselineRules),\n/* harmony export */   loadBaselineRulesWithFallback: () => (/* binding */ loadBaselineRulesWithFallback),\n/* harmony export */   shouldIgnorePath: () => (/* binding */ shouldIgnorePath),\n/* harmony export */   shouldScanFile: () => (/* binding */ shouldScanFile),\n/* harmony export */   validateRulesStructure: () => (/* binding */ validateRulesStructure)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! url */ \"url\");\n/* harmony import */ var url__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(url__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var yaml__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! yaml */ \"yaml\");\n/* harmony import */ var yaml__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(yaml__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _baseline_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./baseline.types */ \"(api-node)/./lib/analysis/baseline.types.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_baseline_types__WEBPACK_IMPORTED_MODULE_4__]);\n_baseline_types__WEBPACK_IMPORTED_MODULE_4__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\nconst __filename = (0,url__WEBPACK_IMPORTED_MODULE_2__.fileURLToPath)(\"file:///C:/Users/Ckhadar/Downloads/AI_Baseline_Map/lib/analysis/baseline.loader.ts\");\nconst __dirname = (0,path__WEBPACK_IMPORTED_MODULE_1__.dirname)(__filename);\n// Cache for loaded rules\nlet rulesCache = null;\nlet rulesCacheTimestamp = 0;\n/**\r\n * Load baseline rules from YAML configuration file\r\n * @param configPath Optional path to config file, defaults to config/baseline.rules.yaml\r\n * @returns Parsed and validated baseline rules\r\n */ function loadBaselineRules(configPath) {\n    const defaultPath = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(__dirname, '../../config/baseline.rules.yaml');\n    const path = configPath || defaultPath;\n    try {\n        // Check if we have cached rules and they're still valid\n        const stats = (__webpack_require__(/*! fs */ \"fs\").statSync)(path);\n        const mtime = stats.mtime.getTime();\n        if (rulesCache && mtime <= rulesCacheTimestamp) {\n            return rulesCache;\n        }\n        // Read and parse YAML file\n        const yamlContent = (0,fs__WEBPACK_IMPORTED_MODULE_0__.readFileSync)(path, 'utf8');\n        const rawRules = yaml__WEBPACK_IMPORTED_MODULE_3___default().parse(yamlContent);\n        // Validate and parse rules\n        const rules = (0,_baseline_types__WEBPACK_IMPORTED_MODULE_4__.validateBaselineRules)(rawRules);\n        // Update cache\n        rulesCache = rules;\n        rulesCacheTimestamp = mtime;\n        return rules;\n    } catch (error) {\n        throw new Error(`Failed to load baseline rules from ${path}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n}\n/**\r\n * Get cached baseline rules without file system access\r\n * @returns Cached rules or throws if not loaded\r\n */ function getCachedBaselineRules() {\n    if (!rulesCache) {\n        throw new Error('Baseline rules not loaded. Call loadBaselineRules() first.');\n    }\n    return rulesCache;\n}\n/**\r\n * Clear the rules cache (useful for testing)\r\n */ function clearRulesCache() {\n    rulesCache = null;\n    rulesCacheTimestamp = 0;\n}\n/**\r\n * Check if rules are cached and up to date\r\n * @param configPath Optional path to config file\r\n * @returns True if cached rules are valid\r\n */ function isRulesCacheValid(configPath) {\n    if (!rulesCache) return false;\n    try {\n        const defaultPath = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(__dirname, '../../config/baseline.rules.yaml');\n        const path = configPath || defaultPath;\n        const stats = (__webpack_require__(/*! fs */ \"fs\").statSync)(path);\n        const mtime = stats.mtime.getTime();\n        return mtime <= rulesCacheTimestamp;\n    } catch  {\n        return false;\n    }\n}\n/**\r\n * Get default baseline rules (fallback if file loading fails)\r\n * @returns Minimal default rules\r\n */ function getDefaultBaselineRules() {\n    return {\n        language_runtimes: {\n            node: '>=18.0.0',\n            python: '>=3.10.0',\n            java: '>=17.0.0',\n            go: '>=1.21.0',\n            dotnet: '>=6.0.0'\n        },\n        package_mins: {\n            node: {\n                react: '>=18.0.0',\n                next: '>=13.0.0',\n                express: '>=4.18.0'\n            },\n            python: {\n                numpy: '>=1.22.0',\n                pandas: '>=1.4.0',\n                torch: '>=2.0.0'\n            },\n            java: {},\n            go: {},\n            dotnet: {}\n        },\n        deprecated_patterns: {\n            node: [\n                {\n                    pattern: 'fs\\\\.exists\\\\(',\n                    message: 'fs.exists() is deprecated, use fs.access() or fs.stat()',\n                    alternative: 'Use fs.access() or fs.promises.access()'\n                }\n            ],\n            python: [\n                {\n                    pattern: 'numpy\\\\.asscalar',\n                    message: 'numpy.asscalar is deprecated, use item() instead',\n                    alternative: 'Use numpy.item() or direct array indexing'\n                }\n            ],\n            java: [],\n            go: [],\n            dotnet: []\n        },\n        scan_file_exts: [\n            '.py',\n            '.js',\n            '.ts',\n            '.tsx',\n            '.jsx',\n            '.java',\n            '.go',\n            '.cs'\n        ],\n        ignore_paths: [\n            '/node_modules/',\n            '/.venv/',\n            '/venv/',\n            '/dist/',\n            '/build/',\n            '/.git/'\n        ],\n        max_file_size: 2097152,\n        max_files: 50000,\n        quick_fixes: {\n            dependency_upgrade: {\n                node: 'npm install {package}@{version}',\n                python: 'pip install \\'{package}>={version}\\'',\n                java: 'Update {package} to version {version} in pom.xml or build.gradle',\n                go: 'go get {package}@{version}',\n                dotnet: 'dotnet add package {package} --version {version}'\n            },\n            pattern_replacement: {\n                node: {\n                    'fs.exists(': 'Use fs.access() or fs.promises.access()'\n                },\n                python: {\n                    'numpy.asscalar': 'Use .item() method instead'\n                },\n                java: {},\n                go: {},\n                dotnet: {}\n            }\n        }\n    };\n}\n/**\r\n * Load baseline rules with fallback to defaults\r\n * @param configPath Optional path to config file\r\n * @returns Baseline rules (loaded or default)\r\n */ function loadBaselineRulesWithFallback(configPath) {\n    try {\n        return loadBaselineRules(configPath);\n    } catch (error) {\n        console.warn(`Failed to load baseline rules: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        console.warn('Using default baseline rules');\n        return getDefaultBaselineRules();\n    }\n}\n/**\r\n * Validate that a rules object has all required fields\r\n * @param rules Rules object to validate\r\n * @returns True if valid\r\n */ function validateRulesStructure(rules) {\n    try {\n        (0,_baseline_types__WEBPACK_IMPORTED_MODULE_4__.validateBaselineRules)(rules);\n        return true;\n    } catch  {\n        return false;\n    }\n}\n/**\r\n * Get rules for a specific language\r\n * @param rules Baseline rules\r\n * @param language Language to get rules for\r\n * @returns Rules specific to the language\r\n */ function getLanguageRules(rules, language) {\n    return {\n        packageMins: rules.package_mins[language] || {},\n        deprecatedPatterns: rules.deprecated_patterns[language] || [],\n        runtime: rules.language_runtimes[language]\n    };\n}\n/**\r\n * Check if a file extension should be scanned\r\n * @param rules Baseline rules\r\n * @param extension File extension (with or without dot)\r\n * @returns True if should be scanned\r\n */ function shouldScanFile(rules, extension) {\n    const ext = extension.startsWith('.') ? extension : `.${extension}`;\n    return rules.scan_file_exts.includes(ext);\n}\n/**\r\n * Check if a path should be ignored\r\n * @param rules Baseline rules\r\n * @param filePath File path to check\r\n * @returns True if should be ignored\r\n */ function shouldIgnorePath(rules, filePath) {\n    if (!filePath || !rules.ignore_paths) {\n        return false;\n    }\n    return rules.ignore_paths.some((ignorePath)=>filePath.includes(ignorePath) || filePath.startsWith(ignorePath));\n}\n/**\r\n * Get quick fix template for dependency upgrade\r\n * @param rules Baseline rules\r\n * @param language Language\r\n * @returns Template string\r\n */ function getDependencyUpgradeTemplate(rules, language) {\n    return rules.quick_fixes.dependency_upgrade[language] || 'Update {package} to {version}';\n}\n/**\r\n * Get quick fix for pattern replacement\r\n * @param rules Baseline rules\r\n * @param language Language\r\n * @param pattern Pattern to replace\r\n * @returns Quick fix suggestion or undefined\r\n */ function getPatternQuickFix(rules, language, pattern) {\n    return rules.quick_fixes.pattern_replacement[language]?.[pattern];\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/analysis/baseline.loader.ts\n");

/***/ }),

/***/ "(api-node)/./lib/analysis/baseline.types.ts":
/*!****************************************!*\
  !*** ./lib/analysis/baseline.types.ts ***!
  \****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnalysisContextSchema: () => (/* binding */ AnalysisContextSchema),\n/* harmony export */   AnalysisErrorSchema: () => (/* binding */ AnalysisErrorSchema),\n/* harmony export */   AnalyzeResponseSchema: () => (/* binding */ AnalyzeResponseSchema),\n/* harmony export */   BaselineRulesSchema: () => (/* binding */ BaselineRulesSchema),\n/* harmony export */   DependencyFindingSchema: () => (/* binding */ DependencyFindingSchema),\n/* harmony export */   DeprecatedPatternSchema: () => (/* binding */ DeprecatedPatternSchema),\n/* harmony export */   ExtractedFileSchema: () => (/* binding */ ExtractedFileSchema),\n/* harmony export */   FindingSchema: () => (/* binding */ FindingSchema),\n/* harmony export */   LanguageRuntimesSchema: () => (/* binding */ LanguageRuntimesSchema),\n/* harmony export */   LanguageSchema: () => (/* binding */ LanguageSchema),\n/* harmony export */   LanguageSummarySchema: () => (/* binding */ LanguageSummarySchema),\n/* harmony export */   PackageMinsSchema: () => (/* binding */ PackageMinsSchema),\n/* harmony export */   PatternFindingSchema: () => (/* binding */ PatternFindingSchema),\n/* harmony export */   ProjectManifestSchema: () => (/* binding */ ProjectManifestSchema),\n/* harmony export */   QuickFixesSchema: () => (/* binding */ QuickFixesSchema),\n/* harmony export */   ReportSchema: () => (/* binding */ ReportSchema),\n/* harmony export */   ReportSummarySchema: () => (/* binding */ ReportSummarySchema),\n/* harmony export */   StatusSchema: () => (/* binding */ StatusSchema),\n/* harmony export */   getStatusBadgeClass: () => (/* binding */ getStatusBadgeClass),\n/* harmony export */   getStatusColor: () => (/* binding */ getStatusColor),\n/* harmony export */   getStatusIcon: () => (/* binding */ getStatusIcon),\n/* harmony export */   isDependencyFinding: () => (/* binding */ isDependencyFinding),\n/* harmony export */   isPatternFinding: () => (/* binding */ isPatternFinding),\n/* harmony export */   validateAnalyzeResponse: () => (/* binding */ validateAnalyzeResponse),\n/* harmony export */   validateBaselineRules: () => (/* binding */ validateBaselineRules),\n/* harmony export */   validateFinding: () => (/* binding */ validateFinding),\n/* harmony export */   validateReport: () => (/* binding */ validateReport)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"zod\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([zod__WEBPACK_IMPORTED_MODULE_0__]);\nzod__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n// Language types\nconst LanguageSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n    'python',\n    'node',\n    'java',\n    'go',\n    'dotnet'\n]);\n// Status types\nconst StatusSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n    'ok',\n    'affected',\n    'unknown'\n]);\n// Finding types\nconst DependencyFindingSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    kind: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('dependency'),\n    lang: LanguageSchema,\n    component: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    foundVersion: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().nullable(),\n    baselineRequired: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().nullable(),\n    status: StatusSchema,\n    reason: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    file: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    quickFix: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n});\nconst PatternFindingSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    kind: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('pattern'),\n    lang: LanguageSchema,\n    file: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    line: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    status: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('affected'),\n    reason: zod__WEBPACK_IMPORTED_MODULE_0__.z.literal('deprecated-api'),\n    issue: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    pattern: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    quickFix: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n});\nconst FindingSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.discriminatedUnion('kind', [\n    DependencyFindingSchema,\n    PatternFindingSchema\n]);\n// Summary types\nconst LanguageSummarySchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    ok: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    affected: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    unknown: zod__WEBPACK_IMPORTED_MODULE_0__.z.number()\n});\nconst ReportSummarySchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    ok: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    affected: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    unknown: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    byLanguage: zod__WEBPACK_IMPORTED_MODULE_0__.z.record(LanguageSchema, LanguageSummarySchema)\n});\n// Report type\nconst ReportSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    findings: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(FindingSchema),\n    summary: ReportSummarySchema,\n    metadata: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        analysisId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        projectName: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n        detectedLanguages: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(LanguageSchema),\n        totalFiles: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n        scannedFiles: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n        skippedFiles: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n        groqAnalysis: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n            analysis: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n            filename: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n            timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()\n        })).optional()\n    })\n});\n// Rules configuration types\nconst DeprecatedPatternSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    pattern: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    message: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    alternative: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()\n});\nconst PackageMinsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.record(LanguageSchema, zod__WEBPACK_IMPORTED_MODULE_0__.z.record(zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.string()));\nconst LanguageRuntimesSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.record(LanguageSchema, zod__WEBPACK_IMPORTED_MODULE_0__.z.string());\nconst QuickFixesSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    dependency_upgrade: zod__WEBPACK_IMPORTED_MODULE_0__.z.record(LanguageSchema, zod__WEBPACK_IMPORTED_MODULE_0__.z.string()),\n    pattern_replacement: zod__WEBPACK_IMPORTED_MODULE_0__.z.record(LanguageSchema, zod__WEBPACK_IMPORTED_MODULE_0__.z.record(zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.string()))\n});\nconst BaselineRulesSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    language_runtimes: LanguageRuntimesSchema,\n    package_mins: PackageMinsSchema,\n    deprecated_patterns: zod__WEBPACK_IMPORTED_MODULE_0__.z.record(LanguageSchema, zod__WEBPACK_IMPORTED_MODULE_0__.z.array(DeprecatedPatternSchema)),\n    scan_file_exts: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()),\n    ignore_paths: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()),\n    max_file_size: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    max_files: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    quick_fixes: QuickFixesSchema\n});\n// API types\nconst AnalyzeResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    analysisId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    summary: ReportSummarySchema,\n    artifacts: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        jsonUrl: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n        csvUrl: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()\n    }),\n    report: ReportSchema.optional()\n});\n// Project detection types\nconst ProjectManifestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    language: LanguageSchema,\n    file: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    dependencies: zod__WEBPACK_IMPORTED_MODULE_0__.z.record(zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional(),\n    devDependencies: zod__WEBPACK_IMPORTED_MODULE_0__.z.record(zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional(),\n    peerDependencies: zod__WEBPACK_IMPORTED_MODULE_0__.z.record(zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional(),\n    optionalDependencies: zod__WEBPACK_IMPORTED_MODULE_0__.z.record(zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.string()).optional()\n});\n// File processing types\nconst ExtractedFileSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    path: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    content: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    size: zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n    language: LanguageSchema.optional()\n});\n// Analysis context types\nconst AnalysisContextSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    rules: BaselineRulesSchema,\n    extractedFiles: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(ExtractedFileSchema),\n    manifests: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(ProjectManifestSchema),\n    detectedLanguages: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(LanguageSchema)\n});\n// Error types\nconst AnalysisErrorSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    code: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    message: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    details: zod__WEBPACK_IMPORTED_MODULE_0__.z.any().optional()\n});\n// Validation helpers\nfunction validateFinding(finding) {\n    return FindingSchema.parse(finding);\n}\nfunction validateReport(report) {\n    return ReportSchema.parse(report);\n}\nfunction validateBaselineRules(rules) {\n    return BaselineRulesSchema.parse(rules);\n}\nfunction validateAnalyzeResponse(response) {\n    return AnalyzeResponseSchema.parse(response);\n}\n// Type guards\nfunction isDependencyFinding(finding) {\n    return finding.kind === 'dependency';\n}\nfunction isPatternFinding(finding) {\n    return finding.kind === 'pattern';\n}\n// Status helpers\nfunction getStatusIcon(status) {\n    switch(status){\n        case 'ok':\n            return '✅';\n        case 'affected':\n            return '⚠️';\n        case 'unknown':\n            return '❓';\n        default:\n            return '❓';\n    }\n}\nfunction getStatusColor(status) {\n    switch(status){\n        case 'ok':\n            return 'text-green-600';\n        case 'affected':\n            return 'text-yellow-600';\n        case 'unknown':\n            return 'text-gray-600';\n        default:\n            return 'text-gray-600';\n    }\n}\nfunction getStatusBadgeClass(status) {\n    switch(status){\n        case 'ok':\n            return 'bg-green-100 text-green-800';\n        case 'affected':\n            return 'bg-yellow-100 text-yellow-800';\n        case 'unknown':\n            return 'bg-gray-100 text-gray-800';\n        default:\n            return 'bg-gray-100 text-gray-800';\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/analysis/baseline.types.ts\n");

/***/ }),

/***/ "(api-node)/./lib/analysis/compare.ts":
/*!*********************************!*\
  !*** ./lib/analysis/compare.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compareVersions: () => (/* binding */ compareVersions),\n/* harmony export */   getLatestStableVersion: () => (/* binding */ getLatestStableVersion),\n/* harmony export */   getVersionDifference: () => (/* binding */ getVersionDifference),\n/* harmony export */   isPreRelease: () => (/* binding */ isPreRelease),\n/* harmony export */   parseVersion: () => (/* binding */ parseVersion),\n/* harmony export */   satisfiesRequirement: () => (/* binding */ satisfiesRequirement)\n/* harmony export */ });\n/* harmony import */ var semver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! semver */ \"semver\");\n/* harmony import */ var semver__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(semver__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\r\n * Compare two version strings\r\n * @param version1 First version\r\n * @param version2 Second version (baseline)\r\n * @param language Language context for parsing\r\n * @returns Comparison result\r\n */ function compareVersions(version1, version2, language) {\n    try {\n        const v1 = parseVersion(version1, language);\n        const v2 = parseVersion(version2, language);\n        if (!v1 || !v2) {\n            return 'unknown';\n        }\n        // Use semver for Node.js packages\n        if (language === 'node') {\n            return compareWithSemver(v1, v2);\n        }\n        // Use custom comparison for other languages\n        return compareVersionsCustom(v1, v2, language);\n    } catch (error) {\n        console.warn(`Version comparison failed: ${error}`);\n        return 'unknown';\n    }\n}\n/**\r\n * Compare versions using semver (for Node.js)\r\n * @param version1 First version\r\n * @param version2 Second version\r\n * @returns Comparison result\r\n */ function compareWithSemver(version1, version2) {\n    try {\n        // Clean versions for semver\n        const v1 = cleanVersionForSemver(version1);\n        const v2 = cleanVersionForSemver(version2);\n        if (!semver__WEBPACK_IMPORTED_MODULE_0___default().valid(v1) || !semver__WEBPACK_IMPORTED_MODULE_0___default().valid(v2)) {\n            return 'unknown';\n        }\n        const result = semver__WEBPACK_IMPORTED_MODULE_0___default().compare(v1, v2);\n        if (result > 0) return 'greater';\n        if (result < 0) return 'less';\n        return 'equal';\n    } catch (error) {\n        return 'unknown';\n    }\n}\n/**\r\n * Clean version string for semver parsing\r\n * @param version Version string\r\n * @returns Cleaned version\r\n */ function cleanVersionForSemver(version) {\n    // Remove common prefixes and suffixes\n    let cleaned = version.replace(/^v/, '') // Remove v prefix\n    .replace(/^[~^>=<!=]+/, '') // Remove operators\n    .trim();\n    // Handle pre-release versions\n    if (cleaned.includes('-')) {\n        const parts = cleaned.split('-');\n        cleaned = parts[0];\n    }\n    // Handle build metadata\n    if (cleaned.includes('+')) {\n        const parts = cleaned.split('+');\n        cleaned = parts[0];\n    }\n    return cleaned;\n}\n/**\r\n * Custom version comparison for non-Node.js languages\r\n * @param version1 First version\r\n * @param version2 Second version\r\n * @param language Language context\r\n * @returns Comparison result\r\n */ function compareVersionsCustom(version1, version2, language) {\n    try {\n        const v1Parts = parseVersionParts(version1, language);\n        const v2Parts = parseVersionParts(version2, language);\n        if (!v1Parts || !v2Parts) {\n            return 'unknown';\n        }\n        // Compare major, minor, patch\n        for(let i = 0; i < Math.max(v1Parts.length, v2Parts.length); i++){\n            const v1Part = v1Parts[i] || 0;\n            const v2Part = v2Parts[i] || 0;\n            if (v1Part > v2Part) return 'greater';\n            if (v1Part < v2Part) return 'less';\n        }\n        return 'equal';\n    } catch (error) {\n        return 'unknown';\n    }\n}\n/**\r\n * Parse version into numeric parts\r\n * @param version Version string\r\n * @param language Language context\r\n * @returns Array of numeric parts\r\n */ function parseVersionParts(version, language) {\n    try {\n        // Clean version\n        let cleaned = version.replace(/^v/, '').replace(/^[~^>=<!=]+/, '').trim();\n        // Handle different version formats\n        if (language === 'python') {\n            // Python: 1.2.3, 1.2, 1.2.3a1, 1.2.3b1, 1.2.3rc1\n            cleaned = cleaned.replace(/[a-zA-Z].*$/, ''); // Remove pre-release info\n        } else if (language === 'java') {\n            // Java: 1.8.0, 11, 17.0.1\n            cleaned = cleaned.replace(/[a-zA-Z].*$/, ''); // Remove pre-release info\n        } else if (language === 'go') {\n            // Go: v1.21.0, 1.21.0\n            cleaned = cleaned.replace(/[a-zA-Z].*$/, ''); // Remove pre-release info\n        } else if (language === 'dotnet') {\n            // .NET: 6.0.0, 7.0.0-preview.1\n            cleaned = cleaned.replace(/[a-zA-Z].*$/, ''); // Remove pre-release info\n        }\n        // Split by dots and convert to numbers\n        const parts = cleaned.split('.').map((part)=>{\n            const num = parseInt(part, 10);\n            return isNaN(num) ? 0 : num;\n        });\n        return parts.length > 0 ? parts : null;\n    } catch (error) {\n        return null;\n    }\n}\n/**\r\n * Parse version string and extract version number\r\n * @param versionString Version string (may contain operators)\r\n * @param language Language context\r\n * @returns Clean version string\r\n */ function parseVersion(versionString, language) {\n    if (!versionString || versionString === '*') {\n        return '0.0.0';\n    }\n    // Remove common operators and prefixes\n    let clean = versionString.replace(/^[~^>=<!=]+/, '') // Remove operators\n    .replace(/^v/, '') // Remove v prefix\n    .trim();\n    // Handle special cases\n    if (clean === 'latest' || clean === '') {\n        return '0.0.0';\n    }\n    // Handle Python version specifiers\n    if (language === 'python') {\n        // Remove Python-specific operators\n        clean = clean.replace(/^[~=!<>]+/, '');\n    }\n    // Handle Go version suffixes\n    if (language === 'go') {\n        // Remove +incompatible, +incompatible.20210101, etc.\n        clean = clean.replace(/\\+.*$/, '');\n    }\n    // Handle Java version ranges\n    if (language === 'java') {\n        // Extract version from ranges like [1.0,2.0) or (1.0,2.0]\n        const rangeMatch = clean.match(/[\\[\\(]([^,]+),/);\n        if (rangeMatch) {\n            clean = rangeMatch[1];\n        }\n    }\n    return clean;\n}\n/**\r\n * Check if a version satisfies a requirement\r\n * @param version Version to check\r\n * @param requirement Requirement (e.g., \">=1.0.0\", \"~1.2.3\")\r\n * @param language Language context\r\n * @returns True if version satisfies requirement\r\n */ function satisfiesRequirement(version, requirement, language) {\n    try {\n        if (language === 'node') {\n            // Use semver for Node.js\n            const cleanVersion = cleanVersionForSemver(version);\n            if (!semver__WEBPACK_IMPORTED_MODULE_0___default().valid(cleanVersion)) return false;\n            return semver__WEBPACK_IMPORTED_MODULE_0___default().satisfies(cleanVersion, requirement);\n        }\n        // Custom logic for other languages\n        return satisfiesRequirementCustom(version, requirement, language);\n    } catch (error) {\n        return false;\n    }\n}\n/**\r\n * Custom requirement satisfaction check\r\n * @param version Version to check\r\n * @param requirement Requirement\r\n * @param language Language context\r\n * @returns True if version satisfies requirement\r\n */ function satisfiesRequirementCustom(version, requirement, language) {\n    try {\n        const cleanVersion = parseVersion(version, language);\n        const cleanRequirement = parseVersion(requirement, language);\n        if (!cleanVersion || !cleanRequirement) return false;\n        // Extract operator from requirement\n        const operatorMatch = requirement.match(/^([~^>=<!=]+)/);\n        const operator = operatorMatch ? operatorMatch[1] : '>=';\n        const comparison = compareVersions(cleanVersion, cleanRequirement, language);\n        switch(operator){\n            case '>=':\n                return comparison === 'greater' || comparison === 'equal';\n            case '>':\n                return comparison === 'greater';\n            case '<=':\n                return comparison === 'less' || comparison === 'equal';\n            case '<':\n                return comparison === 'less';\n            case '=':\n            case '==':\n                return comparison === 'equal';\n            case '~':\n                // Tilde: allow patch-level changes\n                return satisfiesTilde(cleanVersion, cleanRequirement, language);\n            case '^':\n                // Caret: allow minor-level changes\n                return satisfiesCaret(cleanVersion, cleanRequirement, language);\n            default:\n                return comparison === 'equal';\n        }\n    } catch (error) {\n        return false;\n    }\n}\n/**\r\n * Check if version satisfies tilde requirement\r\n * @param version Version to check\r\n * @param requirement Requirement\r\n * @param language Language context\r\n * @returns True if satisfies\r\n */ function satisfiesTilde(version, requirement, language) {\n    const vParts = parseVersionParts(version, language);\n    const rParts = parseVersionParts(requirement, language);\n    if (!vParts || !rParts) return false;\n    // Major and minor must match, patch can be higher\n    if (vParts[0] !== rParts[0]) return false;\n    if (vParts[1] !== rParts[1]) return false;\n    return vParts[2] >= (rParts[2] || 0);\n}\n/**\r\n * Check if version satisfies caret requirement\r\n * @param version Version to check\r\n * @param requirement Requirement\r\n * @param language Language context\r\n * @returns True if satisfies\r\n */ function satisfiesCaret(version, requirement, language) {\n    const vParts = parseVersionParts(version, language);\n    const rParts = parseVersionParts(requirement, language);\n    if (!vParts || !rParts) return false;\n    // Major must match, minor and patch can be higher\n    if (vParts[0] !== rParts[0]) return false;\n    return vParts[1] > (rParts[1] || 0) || vParts[1] === (rParts[1] || 0) && vParts[2] >= (rParts[2] || 0);\n}\n/**\r\n * Get version difference description\r\n * @param version1 First version\r\n * @param version2 Second version\r\n * @param language Language context\r\n * @returns Description of difference\r\n */ function getVersionDifference(version1, version2, language) {\n    const comparison = compareVersions(version1, version2, language);\n    switch(comparison){\n        case 'greater':\n            return `${version1} is newer than ${version2}`;\n        case 'less':\n            return `${version1} is older than ${version2}`;\n        case 'equal':\n            return `${version1} matches ${version2}`;\n        case 'unknown':\n            return `Cannot compare ${version1} with ${version2}`;\n        default:\n            return 'Unknown comparison';\n    }\n}\n/**\r\n * Check if a version is a pre-release\r\n * @param version Version string\r\n * @param language Language context\r\n * @returns True if pre-release\r\n */ function isPreRelease(version, language) {\n    const clean = parseVersion(version, language);\n    // Check for common pre-release indicators\n    return /[a-zA-Z]/.test(clean) || clean.includes('-') || clean.includes('alpha') || clean.includes('beta') || clean.includes('rc') || clean.includes('preview');\n}\n/**\r\n * Get the latest stable version from a list\r\n * @param versions Array of version strings\r\n * @param language Language context\r\n * @returns Latest stable version or null\r\n */ function getLatestStableVersion(versions, language) {\n    const stableVersions = versions.filter((v)=>!isPreRelease(v, language));\n    if (stableVersions.length === 0) return null;\n    let latest = stableVersions[0];\n    for (const version of stableVersions){\n        if (compareVersions(version, latest, language) === 'greater') {\n            latest = version;\n        }\n    }\n    return latest;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/analysis/compare.ts\n");

/***/ }),

/***/ "(api-node)/./lib/analysis/deps.ts":
/*!******************************!*\
  !*** ./lib/analysis/deps.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeDependencies: () => (/* binding */ analyzeDependencies),\n/* harmony export */   filterDependenciesByLanguage: () => (/* binding */ filterDependenciesByLanguage),\n/* harmony export */   getBaselineVersion: () => (/* binding */ getBaselineVersion),\n/* harmony export */   getDependencySummary: () => (/* binding */ getDependencySummary),\n/* harmony export */   groupDependenciesByStatus: () => (/* binding */ groupDependenciesByStatus),\n/* harmony export */   hasBaselineRule: () => (/* binding */ hasBaselineRule),\n/* harmony export */   isValidVersion: () => (/* binding */ isValidVersion),\n/* harmony export */   normalizePackageName: () => (/* binding */ normalizePackageName),\n/* harmony export */   parseVersion: () => (/* binding */ parseVersion),\n/* harmony export */   sortDependencies: () => (/* binding */ sortDependencies)\n/* harmony export */ });\n/* harmony import */ var _compare__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./compare */ \"(api-node)/./lib/analysis/compare.ts\");\n\n/**\r\n * Analyze dependencies from project manifests\r\n * @param manifests Array of project manifests\r\n * @param rules Baseline rules\r\n * @returns Array of dependency findings\r\n */ function analyzeDependencies(manifests, rules) {\n    const findings = [];\n    for (const manifest of manifests){\n        if (!manifest.dependencies) continue;\n        const languageRules = rules.package_mins[manifest.language] || {};\n        for (const [packageName, foundVersion] of Object.entries(manifest.dependencies)){\n            const baselineVersion = languageRules[packageName];\n            if (!baselineVersion) {\n                // No baseline rule for this package\n                findings.push({\n                    kind: 'dependency',\n                    lang: manifest.language,\n                    component: packageName,\n                    foundVersion,\n                    baselineRequired: null,\n                    status: 'unknown',\n                    reason: 'no-baseline-rule',\n                    file: manifest.file\n                });\n                continue;\n            }\n            // Compare versions\n            const comparison = (0,_compare__WEBPACK_IMPORTED_MODULE_0__.compareVersions)(foundVersion, baselineVersion, manifest.language);\n            let status;\n            let reason;\n            switch(comparison){\n                case 'greater':\n                case 'equal':\n                    status = 'ok';\n                    reason = 'meets-baseline';\n                    break;\n                case 'less':\n                    status = 'affected';\n                    reason = 'below-baseline';\n                    break;\n                case 'unknown':\n                    status = 'unknown';\n                    reason = 'version-parse-error';\n                    break;\n                default:\n                    status = 'unknown';\n                    reason = 'unknown-comparison';\n            }\n            findings.push({\n                kind: 'dependency',\n                lang: manifest.language,\n                component: packageName,\n                foundVersion,\n                baselineRequired: baselineVersion,\n                status,\n                reason,\n                file: manifest.file,\n                quickFix: getDependencyQuickFix(rules, manifest.language, packageName, baselineVersion)\n            });\n        }\n    }\n    return findings;\n}\n/**\r\n * Get quick fix for dependency upgrade\r\n * @param rules Baseline rules\r\n * @param language Language\r\n * @param packageName Package name\r\n * @param version Required version\r\n * @returns Quick fix string\r\n */ function getDependencyQuickFix(rules, language, packageName, version) {\n    const template = rules.quick_fixes.dependency_upgrade[language] || 'Update {package} to {version}';\n    return template.replace('{package}', packageName).replace('{version}', version);\n}\n/**\r\n * Parse version string and extract version number\r\n * @param versionString Version string (may contain operators)\r\n * @param language Language context\r\n * @returns Clean version string\r\n */ function parseVersion(versionString, language) {\n    if (!versionString || versionString === '*') {\n        return '0.0.0';\n    }\n    // Remove common operators and prefixes\n    let clean = versionString.replace(/^[~^>=<!=]+/, '') // Remove operators\n    .replace(/^v/, '') // Remove v prefix\n    .trim();\n    // Handle special cases\n    if (clean === 'latest' || clean === '') {\n        return '0.0.0';\n    }\n    // Handle Python version specifiers\n    if (language === 'python') {\n        // Remove Python-specific operators\n        clean = clean.replace(/^[~=!<>]+/, '');\n    }\n    // Handle Go version suffixes\n    if (language === 'go') {\n        // Remove +incompatible, +incompatible.20210101, etc.\n        clean = clean.replace(/\\+.*$/, '');\n    }\n    // Handle Java version ranges\n    if (language === 'java') {\n        // Extract version from ranges like [1.0,2.0) or (1.0,2.0]\n        const rangeMatch = clean.match(/[\\[\\(]([^,]+),/);\n        if (rangeMatch) {\n            clean = rangeMatch[1];\n        }\n    }\n    return clean;\n}\n/**\r\n * Check if a version string is valid\r\n * @param versionString Version string\r\n * @param language Language context\r\n * @returns True if valid\r\n */ function isValidVersion(versionString, language) {\n    if (!versionString || versionString === '*') return false;\n    const clean = parseVersion(versionString, language);\n    // Basic version pattern validation\n    const versionPatterns = {\n        node: /^\\d+\\.\\d+\\.\\d+(-[a-zA-Z0-9.-]+)?(\\+[a-zA-Z0-9.-]+)?$/,\n        python: /^\\d+\\.\\d+(\\.\\d+)?([a-zA-Z0-9.-]+)?$/,\n        java: /^\\d+(\\.\\d+)*(-[a-zA-Z0-9.-]+)?$/,\n        go: /^v?\\d+\\.\\d+\\.\\d+(-[a-zA-Z0-9.-]+)?(\\+[a-zA-Z0-9.-]+)?$/,\n        dotnet: /^\\d+\\.\\d+(\\.\\d+)?(-[a-zA-Z0-9.-]+)?$/\n    };\n    const pattern = versionPatterns[language];\n    return pattern ? pattern.test(clean) : false;\n}\n/**\r\n * Normalize package name for comparison\r\n * @param packageName Package name\r\n * @param language Language context\r\n * @returns Normalized package name\r\n */ function normalizePackageName(packageName, language) {\n    let normalized = packageName.toLowerCase().trim();\n    // Handle scoped packages (Node.js)\n    if (language === 'node' && normalized.startsWith('@')) {\n        // Keep @scope/package format\n        return normalized;\n    }\n    // Handle Java group:artifact format\n    if (language === 'java' && normalized.includes(':')) {\n        return normalized;\n    }\n    // Handle Go modules\n    if (language === 'go') {\n        // Remove common prefixes\n        normalized = normalized.replace(/^github\\.com\\//, '');\n        normalized = normalized.replace(/^golang\\.org\\/x\\//, '');\n    }\n    // Handle .NET packages\n    if (language === 'dotnet') {\n        // Remove common prefixes\n        normalized = normalized.replace(/^microsoft\\./, '');\n        normalized = normalized.replace(/^system\\./, '');\n    }\n    return normalized;\n}\n/**\r\n * Check if a package is in the baseline rules\r\n * @param packageName Package name\r\n * @param language Language\r\n * @param rules Baseline rules\r\n * @returns True if package has baseline rules\r\n */ function hasBaselineRule(packageName, language, rules) {\n    const languageRules = rules.package_mins[language] || {};\n    const normalized = normalizePackageName(packageName, language);\n    // Check exact match first\n    if (languageRules[packageName]) return true;\n    if (languageRules[normalized]) return true;\n    // Check for partial matches (for scoped packages, etc.)\n    for (const [rulePackage, _] of Object.entries(languageRules)){\n        if (normalizePackageName(rulePackage, language) === normalized) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\r\n * Get baseline version for a package\r\n * @param packageName Package name\r\n * @param language Language\r\n * @param rules Baseline rules\r\n * @returns Baseline version or null\r\n */ function getBaselineVersion(packageName, language, rules) {\n    const languageRules = rules.package_mins[language] || {};\n    const normalized = normalizePackageName(packageName, language);\n    // Check exact match first\n    if (languageRules[packageName]) return languageRules[packageName];\n    if (languageRules[normalized]) return languageRules[normalized];\n    // Check for partial matches\n    for (const [rulePackage, version] of Object.entries(languageRules)){\n        if (normalizePackageName(rulePackage, language) === normalized) {\n            return version;\n        }\n    }\n    return null;\n}\n/**\r\n * Group dependencies by status\r\n * @param findings Dependency findings\r\n * @returns Grouped findings\r\n */ function groupDependenciesByStatus(findings) {\n    return {\n        ok: findings.filter((f)=>f.status === 'ok'),\n        affected: findings.filter((f)=>f.status === 'affected'),\n        unknown: findings.filter((f)=>f.status === 'unknown')\n    };\n}\n/**\r\n * Get dependency summary statistics\r\n * @param findings Dependency findings\r\n * @returns Summary statistics\r\n */ function getDependencySummary(findings) {\n    const total = findings.length;\n    const ok = findings.filter((f)=>f.status === 'ok').length;\n    const affected = findings.filter((f)=>f.status === 'affected').length;\n    const unknown = findings.filter((f)=>f.status === 'unknown').length;\n    return {\n        total,\n        ok,\n        affected,\n        unknown,\n        okPercentage: total > 0 ? ok / total * 100 : 0,\n        affectedPercentage: total > 0 ? affected / total * 100 : 0,\n        unknownPercentage: total > 0 ? unknown / total * 100 : 0\n    };\n}\n/**\r\n * Filter dependencies by language\r\n * @param findings Dependency findings\r\n * @param language Language to filter by\r\n * @returns Filtered findings\r\n */ function filterDependenciesByLanguage(findings, language) {\n    return findings.filter((f)=>f.lang === language);\n}\n/**\r\n * Sort dependencies by status and name\r\n * @param findings Dependency findings\r\n * @returns Sorted findings\r\n */ function sortDependencies(findings) {\n    const statusOrder = {\n        affected: 0,\n        unknown: 1,\n        ok: 2\n    };\n    return [\n        ...findings\n    ].sort((a, b)=>{\n        // First by status\n        const statusDiff = statusOrder[a.status] - statusOrder[b.status];\n        if (statusDiff !== 0) return statusDiff;\n        // Then by language\n        const langDiff = a.lang.localeCompare(b.lang);\n        if (langDiff !== 0) return langDiff;\n        // Finally by component name\n        return a.component.localeCompare(b.component);\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/analysis/deps.ts\n");

/***/ }),

/***/ "(api-node)/./lib/analysis/detect.ts":
/*!********************************!*\
  !*** ./lib/analysis/detect.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   detectLanguagesFromFiles: () => (/* binding */ detectLanguagesFromFiles),\n/* harmony export */   detectProjectManifests: () => (/* binding */ detectProjectManifests),\n/* harmony export */   getManifestType: () => (/* binding */ getManifestType),\n/* harmony export */   getPrimaryLanguage: () => (/* binding */ getPrimaryLanguage),\n/* harmony export */   isManifestFile: () => (/* binding */ isManifestFile)\n/* harmony export */ });\n/**\r\n * Detect project languages and manifests from extracted files\r\n * @param files Array of extracted files\r\n * @returns Array of detected project manifests\r\n */ function detectProjectManifests(files) {\n    const manifests = [];\n    // Look for package.json (Node.js)\n    const packageJson = files.find((f)=>(f.path || f.name)?.endsWith('package.json'));\n    if (packageJson) {\n        try {\n            const pkg = JSON.parse(packageJson.content);\n            manifests.push({\n                language: 'node',\n                file: packageJson.path || packageJson.name,\n                dependencies: pkg.dependencies,\n                devDependencies: pkg.devDependencies,\n                peerDependencies: pkg.peerDependencies,\n                optionalDependencies: pkg.optionalDependencies\n            });\n        } catch (error) {\n            console.warn(`Failed to parse package.json: ${error}`);\n        }\n    }\n    // Look for requirements.txt (Python)\n    const requirementsTxt = files.find((f)=>(f.path || f.name)?.endsWith('requirements.txt'));\n    if (requirementsTxt) {\n        manifests.push({\n            language: 'python',\n            file: requirementsTxt.path || requirementsTxt.name,\n            dependencies: parseRequirementsTxt(requirementsTxt.content)\n        });\n    }\n    // Look for pyproject.toml (Python)\n    const pyprojectToml = files.find((f)=>(f.path || f.name)?.endsWith('pyproject.toml'));\n    if (pyprojectToml) {\n        try {\n            const deps = parsePyprojectToml(pyprojectToml.content);\n            if (deps) {\n                manifests.push({\n                    language: 'python',\n                    file: pyprojectToml.path || pyprojectToml.name,\n                    dependencies: deps\n                });\n            }\n        } catch (error) {\n            console.warn(`Failed to parse pyproject.toml: ${error}`);\n        }\n    }\n    // Look for pom.xml (Java Maven)\n    const pomXml = files.find((f)=>(f.path || f.name)?.endsWith('pom.xml'));\n    if (pomXml) {\n        try {\n            const deps = parsePomXml(pomXml.content);\n            if (deps) {\n                manifests.push({\n                    language: 'java',\n                    file: pomXml.path || pomXml.name,\n                    dependencies: deps\n                });\n            }\n        } catch (error) {\n            console.warn(`Failed to parse pom.xml: ${error}`);\n        }\n    }\n    // Look for build.gradle (Java Gradle)\n    const buildGradle = files.find((f)=>{\n        const path = f.path || f.name;\n        return path?.endsWith('build.gradle') || path?.endsWith('build.gradle.kts');\n    });\n    if (buildGradle) {\n        try {\n            const deps = parseBuildGradle(buildGradle.content);\n            if (deps) {\n                manifests.push({\n                    language: 'java',\n                    file: buildGradle.path || buildGradle.name,\n                    dependencies: deps\n                });\n            }\n        } catch (error) {\n            console.warn(`Failed to parse build.gradle: ${error}`);\n        }\n    }\n    // Look for go.mod (Go)\n    const goMod = files.find((f)=>(f.path || f.name)?.endsWith('go.mod'));\n    if (goMod) {\n        try {\n            const deps = parseGoMod(goMod.content);\n            if (deps) {\n                manifests.push({\n                    language: 'go',\n                    file: goMod.path || goMod.name,\n                    dependencies: deps\n                });\n            }\n        } catch (error) {\n            console.warn(`Failed to parse go.mod: ${error}`);\n        }\n    }\n    // Look for .csproj files (.NET)\n    const csprojFiles = files.filter((f)=>(f.path || f.name)?.endsWith('.csproj'));\n    for (const csproj of csprojFiles){\n        try {\n            const deps = parseCsproj(csproj.content);\n            if (deps) {\n                manifests.push({\n                    language: 'dotnet',\n                    file: csproj.path || csproj.name,\n                    dependencies: deps\n                });\n            }\n        } catch (error) {\n            console.warn(`Failed to parse ${csproj.path || csproj.name}: ${error}`);\n        }\n    }\n    return manifests;\n}\n/**\r\n * Parse requirements.txt content\r\n * @param content requirements.txt content\r\n * @returns Dependencies object\r\n */ function parseRequirementsTxt(content) {\n    const deps = {};\n    const lines = content.split('\\n');\n    for (const line of lines){\n        const trimmed = line.trim();\n        if (!trimmed || trimmed.startsWith('#')) continue;\n        // Handle various requirement formats\n        // package==1.0.0\n        // package>=1.0.0\n        // package~=1.0.0\n        // package\n        const match = trimmed.match(/^([a-zA-Z0-9_-]+)(.*)$/);\n        if (match) {\n            const [, name, version] = match;\n            deps[name] = version || '*';\n        }\n    }\n    return deps;\n}\n/**\r\n * Parse pyproject.toml content (basic parsing)\r\n * @param content pyproject.toml content\r\n * @returns Dependencies object or null\r\n */ function parsePyprojectToml(content) {\n    const deps = {};\n    // Simple TOML parsing for dependencies\n    const lines = content.split('\\n');\n    let inDependencies = false;\n    for (const line of lines){\n        const trimmed = line.trim();\n        if (trimmed.startsWith('[tool.poetry.dependencies]') || trimmed.startsWith('[project.dependencies]') || trimmed.startsWith('[dependencies]')) {\n            inDependencies = true;\n            continue;\n        }\n        if (trimmed.startsWith('[') && inDependencies) {\n            break;\n        }\n        if (inDependencies && trimmed && !trimmed.startsWith('#')) {\n            const match = trimmed.match(/^([a-zA-Z0-9_-]+)\\s*=\\s*[\"']?([^\"']+)[\"']?/);\n            if (match) {\n                const [, name, version] = match;\n                deps[name] = version;\n            }\n        }\n    }\n    return Object.keys(deps).length > 0 ? deps : null;\n}\n/**\r\n * Parse pom.xml content (basic XML parsing)\r\n * @param content pom.xml content\r\n * @returns Dependencies object or null\r\n */ function parsePomXml(content) {\n    const deps = {};\n    // Simple XML parsing for dependencies\n    const dependencyRegex = /<dependency>\\s*<groupId>([^<]+)<\\/groupId>\\s*<artifactId>([^<]+)<\\/artifactId>\\s*<version>([^<]+)<\\/version>/g;\n    let match;\n    while((match = dependencyRegex.exec(content)) !== null){\n        const [, groupId, artifactId, version] = match;\n        const fullName = `${groupId}:${artifactId}`;\n        deps[fullName] = version;\n    }\n    return Object.keys(deps).length > 0 ? deps : null;\n}\n/**\r\n * Parse build.gradle content (basic parsing)\r\n * @param content build.gradle content\r\n * @returns Dependencies object or null\r\n */ function parseBuildGradle(content) {\n    const deps = {};\n    // Simple Gradle parsing for dependencies\n    const lines = content.split('\\n');\n    let inDependencies = false;\n    for (const line of lines){\n        const trimmed = line.trim();\n        if (trimmed.includes('dependencies') && trimmed.includes('{')) {\n            inDependencies = true;\n            continue;\n        }\n        if (trimmed === '}' && inDependencies) {\n            break;\n        }\n        if (inDependencies && trimmed.includes('implementation') || trimmed.includes('compile')) {\n            // implementation 'group:artifact:version'\n            // implementation(\"group:artifact:version\")\n            const match = trimmed.match(/(?:implementation|compile)\\s*[(\"]?([^:)]+):([^:)]+):([^:)]+)/);\n            if (match) {\n                const [, group, artifact, version] = match;\n                const fullName = `${group}:${artifact}`;\n                deps[fullName] = version;\n            }\n        }\n    }\n    return Object.keys(deps).length > 0 ? deps : null;\n}\n/**\r\n * Parse go.mod content\r\n * @param content go.mod content\r\n * @returns Dependencies object or null\r\n */ function parseGoMod(content) {\n    const deps = {};\n    const lines = content.split('\\n');\n    for (const line of lines){\n        const trimmed = line.trim();\n        if (trimmed.startsWith('require')) {\n            continue;\n        }\n        if (trimmed.startsWith('require ')) {\n            // require module v1.0.0\n            const match = trimmed.match(/require\\s+([^\\s]+)\\s+([^\\s]+)/);\n            if (match) {\n                const [, module, version] = match;\n                deps[module] = version;\n            }\n        } else if (trimmed && !trimmed.startsWith('go ') && !trimmed.startsWith('module ') && !trimmed.startsWith('//')) {\n            // Module version line\n            const match = trimmed.match(/^([^\\s]+)\\s+([^\\s]+)/);\n            if (match) {\n                const [, module, version] = match;\n                deps[module] = version;\n            }\n        }\n    }\n    return Object.keys(deps).length > 0 ? deps : null;\n}\n/**\r\n * Parse .csproj content (basic XML parsing)\r\n * @param content .csproj content\r\n * @returns Dependencies object or null\r\n */ function parseCsproj(content) {\n    const deps = {};\n    // Simple XML parsing for PackageReference\n    const packageRefRegex = /<PackageReference\\s+Include=\"([^\"]+)\"\\s+Version=\"([^\"]+)\"\\s*\\/?>/g;\n    let match;\n    while((match = packageRefRegex.exec(content)) !== null){\n        const [, packageName, version] = match;\n        deps[packageName] = version;\n    }\n    return Object.keys(deps).length > 0 ? deps : null;\n}\n/**\r\n * Detect languages from file extensions\r\n * @param files Array of extracted files\r\n * @returns Array of detected languages\r\n */ function detectLanguagesFromFiles(files) {\n    const languageMap = {\n        '.js': 'node',\n        '.jsx': 'node',\n        '.ts': 'node',\n        '.tsx': 'node',\n        '.py': 'python',\n        '.java': 'java',\n        '.go': 'go',\n        '.cs': 'dotnet',\n        '.fs': 'dotnet',\n        '.vb': 'dotnet'\n    };\n    const detectedLanguages = new Set();\n    for (const file of files){\n        const filePath = file.path || file.name;\n        if (filePath) {\n            const ext = getFileExtension(filePath);\n            const language = languageMap[ext];\n            if (language) {\n                detectedLanguages.add(language);\n            }\n        }\n    }\n    return Array.from(detectedLanguages);\n}\n/**\r\n * Get file extension from path\r\n * @param filePath File path\r\n * @returns File extension with dot\r\n */ function getFileExtension(filePath) {\n    const lastDot = filePath.lastIndexOf('.');\n    if (lastDot === -1) return '';\n    return filePath.substring(lastDot);\n}\n/**\r\n * Get primary language from manifests\r\n * @param manifests Array of project manifests\r\n * @returns Primary language or null\r\n */ function getPrimaryLanguage(manifests) {\n    if (manifests.length === 0) return null;\n    // Priority order: node, python, java, go, dotnet\n    const priority = [\n        'node',\n        'python',\n        'java',\n        'go',\n        'dotnet'\n    ];\n    for (const lang of priority){\n        if (manifests.some((m)=>m.language === lang)) {\n            return lang;\n        }\n    }\n    return manifests[0].language;\n}\n/**\r\n * Check if a file is a manifest file\r\n * @param filePath File path\r\n * @returns True if it's a manifest file\r\n */ function isManifestFile(filePath) {\n    const manifestFiles = [\n        'package.json',\n        'requirements.txt',\n        'pyproject.toml',\n        'pom.xml',\n        'build.gradle',\n        'build.gradle.kts',\n        'go.mod',\n        '.csproj'\n    ];\n    return manifestFiles.some((manifest)=>filePath.endsWith(manifest));\n}\n/**\r\n * Get manifest file type from path\r\n * @param filePath File path\r\n * @returns Manifest type or null\r\n */ function getManifestType(filePath) {\n    if (filePath.endsWith('package.json')) {\n        return {\n            language: 'node',\n            type: 'package.json'\n        };\n    }\n    if (filePath.endsWith('requirements.txt')) {\n        return {\n            language: 'python',\n            type: 'requirements.txt'\n        };\n    }\n    if (filePath.endsWith('pyproject.toml')) {\n        return {\n            language: 'python',\n            type: 'pyproject.toml'\n        };\n    }\n    if (filePath.endsWith('pom.xml')) {\n        return {\n            language: 'java',\n            type: 'pom.xml'\n        };\n    }\n    if (filePath.endsWith('build.gradle') || filePath.endsWith('build.gradle.kts')) {\n        return {\n            language: 'java',\n            type: 'build.gradle'\n        };\n    }\n    if (filePath.endsWith('go.mod')) {\n        return {\n            language: 'go',\n            type: 'go.mod'\n        };\n    }\n    if (filePath.endsWith('.csproj')) {\n        return {\n            language: 'dotnet',\n            type: '.csproj'\n        };\n    }\n    return null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/analysis/detect.ts\n");

/***/ }),

/***/ "(api-node)/./lib/analysis/run.ts":
/*!*****************************!*\
  !*** ./lib/analysis/run.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkAnalysisFeasibility: () => (/* binding */ checkAnalysisFeasibility),\n/* harmony export */   estimateAnalysisTime: () => (/* binding */ estimateAnalysisTime),\n/* harmony export */   getAnalysisProgress: () => (/* binding */ getAnalysisProgress),\n/* harmony export */   runAnalysisOnFiles: () => (/* binding */ runAnalysisOnFiles),\n/* harmony export */   runBaselineAnalysis: () => (/* binding */ runBaselineAnalysis),\n/* harmony export */   validateAnalysisOptions: () => (/* binding */ validateAnalysisOptions)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _baseline_loader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./baseline.loader */ \"(api-node)/./lib/analysis/baseline.loader.ts\");\n/* harmony import */ var _detect__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./detect */ \"(api-node)/./lib/analysis/detect.ts\");\n/* harmony import */ var _deps__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./deps */ \"(api-node)/./lib/analysis/deps.ts\");\n/* harmony import */ var _scan__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./scan */ \"(api-node)/./lib/analysis/scan.ts\");\n/* harmony import */ var _files_unzip__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../files/unzip */ \"(api-node)/./lib/files/unzip.ts\");\n/* harmony import */ var _files_single_file__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../files/single-file */ \"(api-node)/./lib/files/single-file.ts\");\n/* harmony import */ var _files_store__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../files/store */ \"(api-node)/./lib/files/store.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_baseline_loader__WEBPACK_IMPORTED_MODULE_1__, _scan__WEBPACK_IMPORTED_MODULE_4__]);\n([_baseline_loader__WEBPACK_IMPORTED_MODULE_1__, _scan__WEBPACK_IMPORTED_MODULE_4__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\n\n/**\r\n * Run complete baseline analysis on a ZIP file\r\n * @param zipPath Path to ZIP file\r\n * @param options Analysis options\r\n * @returns Analysis result with report and artifacts\r\n */ async function analyzeWithGroq(files, projectType, dependencies) {\n    const results = [];\n    // Skip Groq analysis if no GROQ_API_KEY is available\n    if (!process.env.GROQ_API_KEY) {\n        console.log('Skipping Groq analysis: GROQ_API_KEY not configured');\n        return results;\n    }\n    // Analyze up to 5 key files to avoid rate limits\n    const keyFiles = files.filter((file)=>{\n        const fileName = file.name || file.path || 'unknown';\n        const ext = fileName.split('.').pop()?.toLowerCase();\n        return [\n            'js',\n            'ts',\n            'jsx',\n            'tsx',\n            'css',\n            'html',\n            'vue',\n            'svelte',\n            'py',\n            'java',\n            'go',\n            'cs'\n        ].includes(ext || '');\n    }).slice(0, 5);\n    for (const file of keyFiles){\n        try {\n            // Use absolute URL for server-side fetch\n            const baseUrl = process.env.PUBLIC_URL || 'http://localhost:3000';\n            const response = await fetch(`${baseUrl}/api/analyze/groq`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    code: file.content,\n                    filename: file.name || file.path || 'unknown',\n                    projectType,\n                    dependencies\n                })\n            });\n            if (response.ok) {\n                const result = await response.json();\n                results.push(result);\n            } else {\n                console.error(`Groq analysis failed for ${file.name || file.path}: ${response.status} ${response.statusText}`);\n            }\n        } catch (error) {\n            console.error(`Groq analysis failed for ${file.name || file.path}:`, error);\n        }\n    }\n    return results;\n}\nasync function runBaselineAnalysis(filePath, options = {}) {\n    const { maxFiles = 50000, maxFileSize = 2 * 1024 * 1024, allowedExtensions = [\n        '.py',\n        '.js',\n        '.ts',\n        '.tsx',\n        '.jsx',\n        '.java',\n        '.go',\n        '.cs',\n        '.fs',\n        '.vb'\n    ], ignorePaths = [\n        '/node_modules/',\n        '/.venv/',\n        '/venv/',\n        '/dist/',\n        '/build/',\n        '/.git/',\n        '/.next/'\n    ], storeResults = true, publicUrl = 'http://localhost:3000' } = options;\n    const analysisId = (0,crypto__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n    const startTime = Date.now();\n    try {\n        // Load baseline rules\n        const rules = (0,_baseline_loader__WEBPACK_IMPORTED_MODULE_1__.loadBaselineRules)();\n        // Determine if file is ZIP or single file\n        const isZipFile = filePath.toLowerCase().endsWith('.zip');\n        let extractResult;\n        if (isZipFile) {\n            // Extract ZIP file\n            extractResult = await (0,_files_unzip__WEBPACK_IMPORTED_MODULE_5__.extractZipToMemory)(filePath, {\n                maxFiles,\n                maxFileSize,\n                allowedExtensions,\n                ignorePaths\n            });\n            if (extractResult.errors.length > 0) {\n                console.warn('Extraction warnings:', extractResult.errors);\n            }\n        } else {\n            // Process single file\n            const fs = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 23));\n            const content = fs.readFileSync(filePath, 'utf8');\n            if (!(0,_files_single_file__WEBPACK_IMPORTED_MODULE_6__.shouldAnalyzeFile)(filePath)) {\n                throw new Error(`File type not supported for analysis: ${filePath}`);\n            }\n            extractResult = (0,_files_single_file__WEBPACK_IMPORTED_MODULE_6__.processSingleFile)(filePath, content, maxFileSize);\n        }\n        // Detect project manifests and languages\n        const manifests = (0,_detect__WEBPACK_IMPORTED_MODULE_2__.detectProjectManifests)(extractResult.files);\n        const detectedLanguages = (0,_detect__WEBPACK_IMPORTED_MODULE_2__.detectLanguagesFromFiles)(extractResult.files);\n        // Create analysis context\n        const context = {\n            rules,\n            extractedFiles: extractResult.files,\n            manifests,\n            detectedLanguages\n        };\n        // Run analysis\n        const findings = await runAnalysis(context);\n        // Generate summary\n        const summary = generateSummary(findings, detectedLanguages);\n        // Run Groq AI analysis\n        const groqResults = await analyzeWithGroq(extractResult.files, detectedLanguages.join(', '), context.manifests.flatMap((m)=>Object.keys(m.dependencies || {})));\n        // Create report\n        const report = {\n            findings,\n            summary,\n            metadata: {\n                analysisId,\n                timestamp: new Date().toISOString(),\n                projectName: getProjectName(filePath),\n                detectedLanguages,\n                totalFiles: extractResult.totalFiles,\n                scannedFiles: extractResult.files.length,\n                skippedFiles: extractResult.skippedFiles,\n                groqAnalysis: groqResults\n            }\n        };\n        // Store results if requested\n        let artifacts;\n        if (storeResults) {\n            artifacts = (0,_files_store__WEBPACK_IMPORTED_MODULE_7__.storeAnalysisResults)(report, {\n                publicUrl\n            });\n        }\n        const endTime = Date.now();\n        console.log(`Analysis completed in ${endTime - startTime}ms`);\n        return {\n            report,\n            artifacts\n        };\n    } catch (error) {\n        console.error('Analysis failed:', error);\n        throw new Error(`Analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n}\n/**\r\n * Run analysis on extracted files and manifests\r\n * @param context Analysis context\r\n * @returns Array of findings\r\n */ async function runAnalysis(context) {\n    const findings = [];\n    // Analyze dependencies\n    const dependencyFindings = (0,_deps__WEBPACK_IMPORTED_MODULE_3__.analyzeDependencies)(context.manifests, context.rules);\n    findings.push(...dependencyFindings);\n    // Scan source files for deprecated patterns\n    const patternFindings = (0,_scan__WEBPACK_IMPORTED_MODULE_4__.scanSourceFiles)(context.extractedFiles, context.rules);\n    findings.push(...patternFindings);\n    return findings;\n}\n/**\r\n * Generate summary from findings\r\n * @param findings Array of findings\r\n * @param detectedLanguages Array of detected languages\r\n * @returns Report summary\r\n */ function generateSummary(findings, detectedLanguages) {\n    const summary = {\n        ok: 0,\n        affected: 0,\n        unknown: 0,\n        byLanguage: {}\n    };\n    // Initialize language summaries\n    for (const language of detectedLanguages){\n        summary.byLanguage[language] = {\n            ok: 0,\n            affected: 0,\n            unknown: 0\n        };\n    }\n    // Count findings by status and language\n    for (const finding of findings){\n        if (finding.kind === 'dependency') {\n            summary[finding.status]++;\n            if (summary.byLanguage[finding.lang]) {\n                summary.byLanguage[finding.lang][finding.status]++;\n            }\n        } else if (finding.kind === 'pattern') {\n            summary.affected++;\n            if (summary.byLanguage[finding.lang]) {\n                summary.byLanguage[finding.lang].affected++;\n            }\n        }\n    }\n    return summary;\n}\n/**\r\n * Get project name from ZIP path\r\n * @param zipPath ZIP file path\r\n * @returns Project name\r\n */ function getProjectName(zipPath) {\n    const pathParts = zipPath.split('/');\n    const fileName = pathParts[pathParts.length - 1];\n    return fileName.replace(/\\.zip$/i, '');\n}\n/**\r\n * Run analysis on extracted files (for testing)\r\n * @param files Array of extracted files\r\n * @param manifests Array of project manifests\r\n * @param rules Baseline rules\r\n * @returns Analysis result\r\n */ async function runAnalysisOnFiles(files, manifests, rules) {\n    const analysisId = (0,crypto__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n    const detectedLanguages = (0,_detect__WEBPACK_IMPORTED_MODULE_2__.detectLanguagesFromFiles)(files);\n    const context = {\n        rules,\n        extractedFiles: files,\n        manifests,\n        detectedLanguages\n    };\n    const findings = await runAnalysis(context);\n    const summary = generateSummary(findings, detectedLanguages);\n    const report = {\n        findings,\n        summary,\n        metadata: {\n            analysisId,\n            timestamp: new Date().toISOString(),\n            projectName: 'test-project',\n            detectedLanguages,\n            totalFiles: files.length,\n            scannedFiles: files.length,\n            skippedFiles: 0\n        }\n    };\n    return {\n        report\n    };\n}\n/**\r\n * Validate analysis options\r\n * @param options Analysis options\r\n * @returns Validated options\r\n */ function validateAnalysisOptions(options) {\n    return {\n        maxFiles: Math.min(options.maxFiles || 50000, 100000),\n        maxFileSize: Math.min(options.maxFileSize || 2 * 1024 * 1024, 10 * 1024 * 1024),\n        allowedExtensions: options.allowedExtensions || [\n            '.py',\n            '.js',\n            '.ts',\n            '.tsx',\n            '.jsx',\n            '.java',\n            '.go',\n            '.cs',\n            '.fs',\n            '.vb'\n        ],\n        ignorePaths: options.ignorePaths || [\n            '/node_modules/',\n            '/.venv/',\n            '/venv/',\n            '/dist/',\n            '/build/',\n            '/.git/',\n            '/.next/'\n        ],\n        storeResults: options.storeResults !== false,\n        publicUrl: options.publicUrl || 'http://localhost:3000'\n    };\n}\n/**\r\n * Get analysis progress (for long-running analyses)\r\n * @param context Analysis context\r\n * @param currentStep Current step\r\n * @param totalSteps Total steps\r\n * @returns Progress information\r\n */ function getAnalysisProgress(context, currentStep, totalSteps) {\n    const steps = [\n        'Loading baseline rules',\n        'Extracting ZIP file',\n        'Detecting project manifests',\n        'Analyzing dependencies',\n        'Scanning source files',\n        'Generating report'\n    ];\n    const step = steps[currentStep] || 'Unknown';\n    const progress = currentStep / totalSteps * 100;\n    let details = '';\n    if (currentStep === 1) {\n        details = `Extracted ${context.extractedFiles.length} files`;\n    } else if (currentStep === 2) {\n        details = `Found ${context.manifests.length} manifests, ${context.detectedLanguages.length} languages`;\n    } else if (currentStep === 3) {\n        details = `Analyzing ${context.manifests.length} dependency manifests`;\n    } else if (currentStep === 4) {\n        details = `Scanning ${context.extractedFiles.length} source files`;\n    }\n    return {\n        step,\n        progress,\n        details\n    };\n}\n/**\r\n * Estimate analysis time\r\n * @param fileCount Number of files\r\n * @param manifestCount Number of manifests\r\n * @returns Estimated time in milliseconds\r\n */ function estimateAnalysisTime(fileCount, manifestCount) {\n    // Base time: 1 second\n    let estimated = 1000;\n    // Add time for file processing: 10ms per file\n    estimated += fileCount * 10;\n    // Add time for manifest processing: 50ms per manifest\n    estimated += manifestCount * 50;\n    // Add time for pattern scanning: 5ms per file\n    estimated += fileCount * 5;\n    return Math.min(estimated, 30000); // Cap at 30 seconds\n}\n/**\r\n * Check if analysis is feasible\r\n * @param fileCount Number of files\r\n * @param totalSize Total size in bytes\r\n * @returns Feasibility check result\r\n */ function checkAnalysisFeasibility(fileCount, totalSize) {\n    const warnings = [];\n    let feasible = true;\n    // Check file count\n    if (fileCount > 50000) {\n        feasible = false;\n        warnings.push(`Too many files: ${fileCount} (limit: 50,000)`);\n    } else if (fileCount > 10000) {\n        warnings.push(`Large number of files: ${fileCount} (analysis may take longer)`);\n    }\n    // Check total size\n    if (totalSize > 100 * 1024 * 1024) {\n        feasible = false;\n        warnings.push(`Archive too large: ${Math.round(totalSize / 1024 / 1024)}MB (limit: 100MB)`);\n    } else if (totalSize > 50 * 1024 * 1024) {\n        warnings.push(`Large archive: ${Math.round(totalSize / 1024 / 1024)}MB (analysis may take longer)`);\n    }\n    const estimatedTime = estimateAnalysisTime(fileCount, Math.min(fileCount / 100, 50));\n    return {\n        feasible,\n        warnings,\n        estimatedTime\n    };\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/analysis/run.ts\n");

/***/ }),

/***/ "(api-node)/./lib/analysis/scan.ts":
/*!******************************!*\
  !*** ./lib/analysis/scan.ts ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fileHasDeprecatedPatterns: () => (/* binding */ fileHasDeprecatedPatterns),\n/* harmony export */   filterPatternFindingsByFile: () => (/* binding */ filterPatternFindingsByFile),\n/* harmony export */   filterPatternFindingsByLanguage: () => (/* binding */ filterPatternFindingsByLanguage),\n/* harmony export */   getDeprecatedPatternLines: () => (/* binding */ getDeprecatedPatternLines),\n/* harmony export */   getFilesWithDeprecatedPatterns: () => (/* binding */ getFilesWithDeprecatedPatterns),\n/* harmony export */   getMostCommonPatterns: () => (/* binding */ getMostCommonPatterns),\n/* harmony export */   getPatternFrequency: () => (/* binding */ getPatternFrequency),\n/* harmony export */   getPatternQuickFix: () => (/* binding */ getPatternQuickFix),\n/* harmony export */   getPatternSummary: () => (/* binding */ getPatternSummary),\n/* harmony export */   getUniquePatterns: () => (/* binding */ getUniquePatterns),\n/* harmony export */   groupPatternFindingsByFile: () => (/* binding */ groupPatternFindingsByFile),\n/* harmony export */   groupPatternFindingsByLanguage: () => (/* binding */ groupPatternFindingsByLanguage),\n/* harmony export */   scanSourceFiles: () => (/* binding */ scanSourceFiles),\n/* harmony export */   sortPatternFindings: () => (/* binding */ sortPatternFindings)\n/* harmony export */ });\n/* harmony import */ var _baseline_loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseline.loader */ \"(api-node)/./lib/analysis/baseline.loader.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_baseline_loader__WEBPACK_IMPORTED_MODULE_0__]);\n_baseline_loader__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n/**\r\n * Scan source files for deprecated patterns\r\n * @param files Array of extracted files\r\n * @param rules Baseline rules\r\n * @returns Array of pattern findings\r\n */ function scanSourceFiles(files, rules) {\n    const findings = [];\n    for (const file of files){\n        // Skip files that are too large\n        if (file.size > rules.max_file_size) {\n            console.warn(`Skipping large file: ${file.path || file.name} (${file.size} bytes)`);\n            continue;\n        }\n        // Skip ignored paths\n        const filePath = file.path || file.name;\n        if ((0,_baseline_loader__WEBPACK_IMPORTED_MODULE_0__.shouldIgnorePath)(rules, filePath)) {\n            continue;\n        }\n        // Skip files that shouldn't be scanned\n        const extension = getFileExtension(filePath);\n        if (!(0,_baseline_loader__WEBPACK_IMPORTED_MODULE_0__.shouldScanFile)(rules, extension)) {\n            continue;\n        }\n        // Detect language from file extension\n        const language = detectLanguageFromExtension(extension);\n        if (!language) {\n            continue;\n        }\n        // Get deprecated patterns for this language\n        const patterns = rules.deprecated_patterns[language] || [];\n        if (patterns.length === 0) {\n            continue;\n        }\n        // Scan file content\n        const fileFindings = scanFileContent(file, language, patterns, rules);\n        findings.push(...fileFindings);\n    }\n    return findings;\n}\n/**\r\n * Scan a single file for deprecated patterns\r\n * @param file File to scan\r\n * @param language Language of the file\r\n * @param patterns Deprecated patterns to look for\r\n * @param rules Baseline rules\r\n * @returns Array of pattern findings\r\n */ function scanFileContent(file, language, patterns, rules) {\n    const findings = [];\n    const lines = file.content.split('\\n');\n    for(let lineIndex = 0; lineIndex < lines.length; lineIndex++){\n        const line = lines[lineIndex];\n        const lineNumber = lineIndex + 1;\n        // Skip empty lines and comments\n        if (isCommentLine(line, language) || line.trim() === '') {\n            continue;\n        }\n        // Check each pattern\n        for (const pattern of patterns){\n            try {\n                const regex = new RegExp(pattern.pattern, 'g');\n                let match;\n                while((match = regex.exec(line)) !== null){\n                    // Avoid infinite loops with zero-length matches\n                    if (match.index === regex.lastIndex) {\n                        regex.lastIndex++;\n                    }\n                    findings.push({\n                        kind: 'pattern',\n                        lang: language,\n                        file: file.path || file.name || 'unknown',\n                        line: lineNumber,\n                        status: 'affected',\n                        reason: 'deprecated-api',\n                        issue: pattern.message,\n                        pattern: pattern.pattern,\n                        quickFix: pattern.alternative\n                    });\n                }\n            } catch (error) {\n                console.warn(`Invalid regex pattern: ${pattern.pattern} - ${error}`);\n            }\n        }\n    }\n    return findings;\n}\n/**\r\n * Get file extension from path\r\n * @param filePath File path\r\n * @returns File extension with dot\r\n */ function getFileExtension(filePath) {\n    const lastDot = filePath.lastIndexOf('.');\n    if (lastDot === -1) return '';\n    return filePath.substring(lastDot);\n}\n/**\r\n * Detect language from file extension\r\n * @param extension File extension\r\n * @returns Language or null\r\n */ function detectLanguageFromExtension(extension) {\n    const languageMap = {\n        '.js': 'node',\n        '.jsx': 'node',\n        '.ts': 'node',\n        '.tsx': 'node',\n        '.py': 'python',\n        '.java': 'java',\n        '.go': 'go',\n        '.cs': 'dotnet',\n        '.fs': 'dotnet',\n        '.vb': 'dotnet'\n    };\n    return languageMap[extension] || null;\n}\n/**\r\n * Check if a line is a comment\r\n * @param line Line content\r\n * @param language Language context\r\n * @returns True if comment line\r\n */ function isCommentLine(line, language) {\n    const trimmed = line.trim();\n    switch(language){\n        case 'node':\n        case 'java':\n        case 'go':\n        case 'dotnet':\n            return trimmed.startsWith('//') || trimmed.startsWith('/*') || trimmed.startsWith('*');\n        case 'python':\n            return trimmed.startsWith('#');\n        default:\n            return false;\n    }\n}\n/**\r\n * Get quick fix for pattern replacement\r\n * @param rules Baseline rules\r\n * @param language Language\r\n * @param pattern Pattern to replace\r\n * @returns Quick fix suggestion or undefined\r\n */ function getPatternQuickFix(rules, language, pattern) {\n    return rules.quick_fixes.pattern_replacement[language]?.[pattern];\n}\n/**\r\n * Group pattern findings by file\r\n * @param findings Pattern findings\r\n * @returns Grouped findings by file\r\n */ function groupPatternFindingsByFile(findings) {\n    const grouped = {};\n    for (const finding of findings){\n        if (!grouped[finding.file]) {\n            grouped[finding.file] = [];\n        }\n        grouped[finding.file].push(finding);\n    }\n    return grouped;\n}\n/**\r\n * Group pattern findings by language\r\n * @param findings Pattern findings\r\n * @returns Grouped findings by language\r\n */ function groupPatternFindingsByLanguage(findings) {\n    const grouped = {};\n    for (const finding of findings){\n        if (!grouped[finding.lang]) {\n            grouped[finding.lang] = [];\n        }\n        grouped[finding.lang].push(finding);\n    }\n    return grouped;\n}\n/**\r\n * Get pattern summary statistics\r\n * @param findings Pattern findings\r\n * @returns Summary statistics\r\n */ function getPatternSummary(findings) {\n    const total = findings.length;\n    const byLanguage = groupPatternFindingsByLanguage(findings);\n    const byFile = groupPatternFindingsByFile(findings);\n    return {\n        total,\n        affectedFiles: Object.keys(byFile).length,\n        byLanguage: Object.fromEntries(Object.entries(byLanguage).map(([lang, findings])=>[\n                lang,\n                {\n                    count: findings.length,\n                    files: new Set(findings.map((f)=>f.file)).size\n                }\n            ]))\n    };\n}\n/**\r\n * Filter pattern findings by language\r\n * @param findings Pattern findings\r\n * @param language Language to filter by\r\n * @returns Filtered findings\r\n */ function filterPatternFindingsByLanguage(findings, language) {\n    return findings.filter((f)=>f.lang === language);\n}\n/**\r\n * Filter pattern findings by file\r\n * @param findings Pattern findings\r\n * @param filePath File path to filter by\r\n * @returns Filtered findings\r\n */ function filterPatternFindingsByFile(findings, filePath) {\n    return findings.filter((f)=>f.file === filePath);\n}\n/**\r\n * Sort pattern findings by file and line\r\n * @param findings Pattern findings\r\n * @returns Sorted findings\r\n */ function sortPatternFindings(findings) {\n    return [\n        ...findings\n    ].sort((a, b)=>{\n        // First by file path\n        const fileDiff = a.file.localeCompare(b.file);\n        if (fileDiff !== 0) return fileDiff;\n        // Then by line number\n        return a.line - b.line;\n    });\n}\n/**\r\n * Get unique patterns found\r\n * @param findings Pattern findings\r\n * @returns Array of unique patterns\r\n */ function getUniquePatterns(findings) {\n    const patterns = new Set();\n    for (const finding of findings){\n        patterns.add(finding.pattern);\n    }\n    return Array.from(patterns);\n}\n/**\r\n * Get pattern frequency\r\n * @param findings Pattern findings\r\n * @returns Pattern frequency map\r\n */ function getPatternFrequency(findings) {\n    const frequency = {};\n    for (const finding of findings){\n        frequency[finding.pattern] = (frequency[finding.pattern] || 0) + 1;\n    }\n    return frequency;\n}\n/**\r\n * Get most common patterns\r\n * @param findings Pattern findings\r\n * @param limit Maximum number of patterns to return\r\n * @returns Array of most common patterns\r\n */ function getMostCommonPatterns(findings, limit = 10) {\n    const frequency = getPatternFrequency(findings);\n    return Object.entries(frequency).map(([pattern, count])=>({\n            pattern,\n            count\n        })).sort((a, b)=>b.count - a.count).slice(0, limit);\n}\n/**\r\n * Check if a file contains any deprecated patterns\r\n * @param filePath File path\r\n * @param findings Pattern findings\r\n * @returns True if file has deprecated patterns\r\n */ function fileHasDeprecatedPatterns(filePath, findings) {\n    return findings.some((f)=>f.file === filePath);\n}\n/**\r\n * Get files with deprecated patterns\r\n * @param findings Pattern findings\r\n * @returns Array of file paths\r\n */ function getFilesWithDeprecatedPatterns(findings) {\n    const files = new Set();\n    for (const finding of findings){\n        files.add(finding.file);\n    }\n    return Array.from(files);\n}\n/**\r\n * Get line numbers with deprecated patterns for a file\r\n * @param filePath File path\r\n * @param findings Pattern findings\r\n * @returns Array of line numbers\r\n */ function getDeprecatedPatternLines(filePath, findings) {\n    return findings.filter((f)=>f.file === filePath).map((f)=>f.line).sort((a, b)=>a - b);\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/analysis/scan.ts\n");

/***/ }),

/***/ "(api-node)/./lib/files/single-file.ts":
/*!**********************************!*\
  !*** ./lib/files/single-file.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   detectFileType: () => (/* binding */ detectFileType),\n/* harmony export */   processSingleFile: () => (/* binding */ processSingleFile),\n/* harmony export */   shouldAnalyzeFile: () => (/* binding */ shouldAnalyzeFile)\n/* harmony export */ });\n/**\r\n * Process a single file for analysis\r\n * @param filePath Path to the file\r\n * @param content File content\r\n * @param maxFileSize Maximum file size in bytes\r\n * @returns Single file result\r\n */ function processSingleFile(filePath, content, maxFileSize = 2 * 1024 * 1024 // 2MB\n) {\n    // Check file size\n    const fileSize = Buffer.byteLength(content, 'utf8');\n    if (fileSize > maxFileSize) {\n        return {\n            files: [],\n            totalFiles: 1,\n            skippedFiles: 1\n        };\n    }\n    // Create extracted file object\n    const extractedFile = {\n        name: filePath,\n        content: content,\n        size: fileSize\n    };\n    return {\n        files: [\n            extractedFile\n        ],\n        totalFiles: 1,\n        skippedFiles: 0\n    };\n}\n/**\r\n * Detect file type from extension\r\n * @param filename File name\r\n * @returns File type category\r\n */ function detectFileType(filename) {\n    const ext = filename.split('.').pop()?.toLowerCase();\n    const typeMap = {\n        // Web files\n        'js': 'javascript',\n        'jsx': 'javascript',\n        'ts': 'typescript',\n        'tsx': 'typescript',\n        'html': 'html',\n        'htm': 'html',\n        'css': 'css',\n        'scss': 'css',\n        'sass': 'css',\n        'less': 'css',\n        // Python\n        'py': 'python',\n        'pyw': 'python',\n        // Java\n        'java': 'java',\n        'kt': 'kotlin',\n        'scala': 'scala',\n        // C/C++\n        'c': 'c',\n        'cpp': 'cpp',\n        'cc': 'cpp',\n        'cxx': 'cpp',\n        'h': 'c',\n        'hpp': 'cpp',\n        // C#\n        'cs': 'csharp',\n        'fs': 'fsharp',\n        'vb': 'vbnet',\n        // Go\n        'go': 'go',\n        // Rust\n        'rs': 'rust',\n        // PHP\n        'php': 'php',\n        // Ruby\n        'rb': 'ruby',\n        // Swift\n        'swift': 'swift',\n        // Configuration files\n        'json': 'json',\n        'yaml': 'yaml',\n        'yml': 'yaml',\n        'xml': 'xml',\n        'toml': 'toml',\n        'ini': 'ini',\n        'cfg': 'config',\n        'conf': 'config',\n        // Documentation\n        'md': 'markdown',\n        'txt': 'text',\n        'rst': 'restructuredtext',\n        // Shell scripts\n        'sh': 'shell',\n        'bash': 'shell',\n        'zsh': 'shell',\n        'fish': 'shell',\n        'ps1': 'powershell',\n        'bat': 'batch',\n        'cmd': 'batch',\n        // SQL\n        'sql': 'sql',\n        // Docker\n        'dockerfile': 'dockerfile',\n        'dockerignore': 'dockerignore',\n        // Git\n        'gitignore': 'gitignore',\n        'gitattributes': 'gitattributes',\n        // Package managers\n        'package.json': 'package.json',\n        'requirements.txt': 'requirements.txt',\n        'pom.xml': 'pom.xml',\n        'build.gradle': 'gradle',\n        'go.mod': 'go.mod',\n        'cargo.toml': 'cargo.toml',\n        'composer.json': 'composer.json',\n        'gemfile': 'gemfile',\n        'podfile': 'podfile',\n        'pubspec.yaml': 'pubspec.yaml'\n    };\n    return typeMap[ext || ''] || 'unknown';\n}\n/**\r\n * Check if file should be analyzed\r\n * @param filename File name\r\n * @returns Whether file should be analyzed\r\n */ function shouldAnalyzeFile(filename) {\n    const ext = filename.split('.').pop()?.toLowerCase();\n    // Skip binary files (but allow ZIP for project archives)\n    const binaryExtensions = [\n        'exe',\n        'dll',\n        'so',\n        'dylib',\n        'bin',\n        'dat',\n        'db',\n        'sqlite',\n        'jpg',\n        'jpeg',\n        'png',\n        'gif',\n        'bmp',\n        'svg',\n        'ico',\n        'webp',\n        'mp3',\n        'mp4',\n        'avi',\n        'mov',\n        'wav',\n        'flac',\n        'ogg',\n        'rar',\n        '7z',\n        'tar',\n        'gz',\n        'bz2',\n        'xz',\n        'pdf',\n        'doc',\n        'docx',\n        'xls',\n        'xlsx',\n        'ppt',\n        'pptx',\n        'woff',\n        'woff2',\n        'ttf',\n        'otf',\n        'eot'\n    ];\n    if (binaryExtensions.includes(ext || '')) {\n        return false;\n    }\n    // Skip very large files (over 1MB for single file analysis)\n    return true;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/files/single-file.ts\n");

/***/ }),

/***/ "(api-node)/./lib/files/store.ts":
/*!****************************!*\
  !*** ./lib/files/store.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analysisExists: () => (/* binding */ analysisExists),\n/* harmony export */   cleanupOldAnalyses: () => (/* binding */ cleanupOldAnalyses),\n/* harmony export */   deleteAnalysis: () => (/* binding */ deleteAnalysis),\n/* harmony export */   getAnalysisMetadata: () => (/* binding */ getAnalysisMetadata),\n/* harmony export */   getStorageStats: () => (/* binding */ getStorageStats),\n/* harmony export */   getStoredAnalysis: () => (/* binding */ getStoredAnalysis),\n/* harmony export */   listStoredAnalyses: () => (/* binding */ listStoredAnalyses),\n/* harmony export */   storeAnalysisResults: () => (/* binding */ storeAnalysisResults)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var papaparse__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! papaparse */ \"papaparse\");\n/* harmony import */ var papaparse__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(papaparse__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n/**\r\n * Store analysis results and return public URLs\r\n * @param report Analysis report\r\n * @param options Storage options\r\n * @returns Stored artifacts with public URLs\r\n */ function storeAnalysisResults(report, options = {}) {\n    const { baseDir = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(process.cwd(), 'tmp', 'analysis'), publicUrl = 'http://localhost:3000', ttl = 24 * 60 * 60 * 1000 } = options;\n    const analysisId = (0,crypto__WEBPACK_IMPORTED_MODULE_2__.randomUUID)();\n    // Ensure base directory exists\n    if (!(0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(baseDir)) {\n        (0,fs__WEBPACK_IMPORTED_MODULE_0__.mkdirSync)(baseDir, {\n            recursive: true\n        });\n    }\n    // Create analysis directory\n    const analysisDir = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(baseDir, analysisId);\n    if (!(0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(analysisDir)) {\n        (0,fs__WEBPACK_IMPORTED_MODULE_0__.mkdirSync)(analysisDir, {\n            recursive: true\n        });\n    }\n    // Store JSON report\n    const jsonPath = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(analysisDir, 'report.json');\n    (0,fs__WEBPACK_IMPORTED_MODULE_0__.writeFileSync)(jsonPath, JSON.stringify(report, null, 2));\n    // Store CSV report\n    const csvPath = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(analysisDir, 'report.csv');\n    const csvContent = generateCSV(report);\n    (0,fs__WEBPACK_IMPORTED_MODULE_0__.writeFileSync)(csvPath, csvContent);\n    // Schedule cleanup\n    scheduleCleanup(analysisDir, ttl);\n    return {\n        jsonUrl: `${publicUrl}/api/analyze/${analysisId}?format=json`,\n        csvUrl: `${publicUrl}/api/analyze/${analysisId}?format=csv`,\n        analysisId\n    };\n}\n/**\r\n * Generate CSV content from report\r\n * @param report Analysis report\r\n * @returns CSV content\r\n */ function generateCSV(report) {\n    const rows = [];\n    for (const finding of report.findings){\n        if (finding.kind === 'dependency') {\n            rows.push({\n                Kind: 'Dependency',\n                Language: finding.lang,\n                Component: finding.component,\n                File: finding.file,\n                Line: '',\n                Status: finding.status,\n                Reason: finding.reason,\n                'Quick Fix': finding.quickFix || '',\n                'Found Version': finding.foundVersion || '',\n                'Required Version': finding.baselineRequired || ''\n            });\n        } else if (finding.kind === 'pattern') {\n            rows.push({\n                Kind: 'Pattern',\n                Language: finding.lang,\n                Component: '',\n                File: finding.file,\n                Line: finding.line.toString(),\n                Status: finding.status,\n                Reason: finding.issue,\n                'Quick Fix': finding.quickFix || '',\n                'Found Version': '',\n                'Required Version': ''\n            });\n        }\n    }\n    return papaparse__WEBPACK_IMPORTED_MODULE_3___default().unparse(rows);\n}\n/**\r\n * Schedule cleanup of analysis files\r\n * @param analysisDir Analysis directory path\r\n * @param ttl Time to live in milliseconds\r\n */ function scheduleCleanup(analysisDir, ttl) {\n    setTimeout(()=>{\n        try {\n            if ((0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(analysisDir)) {\n                // Remove directory and all contents\n                const { rmSync } = __webpack_require__(/*! fs */ \"fs\");\n                rmSync(analysisDir, {\n                    recursive: true,\n                    force: true\n                });\n            }\n        } catch (error) {\n            console.warn(`Failed to cleanup analysis directory ${analysisDir}: ${error}`);\n        }\n    }, ttl);\n}\n/**\r\n * Get stored analysis report\r\n * @param analysisId Analysis ID\r\n * @param format Format (json or csv)\r\n * @param baseDir Base directory for storage\r\n * @returns Report content or null if not found\r\n */ function getStoredAnalysis(analysisId, format = 'json', baseDir = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(process.cwd(), 'tmp', 'analysis')) {\n    try {\n        const analysisDir = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(baseDir, analysisId);\n        const filePath = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(analysisDir, `report.${format}`);\n        if (!(0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(filePath)) {\n            return null;\n        }\n        const content = (__webpack_require__(/*! fs */ \"fs\").readFileSync)(filePath, 'utf8');\n        return content;\n    } catch (error) {\n        console.warn(`Failed to read stored analysis ${analysisId}: ${error}`);\n        return null;\n    }\n}\n/**\r\n * Check if analysis exists\r\n * @param analysisId Analysis ID\r\n * @param baseDir Base directory for storage\r\n * @returns True if analysis exists\r\n */ function analysisExists(analysisId, baseDir = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(process.cwd(), 'tmp', 'analysis')) {\n    const analysisDir = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(baseDir, analysisId);\n    return (0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(analysisDir);\n}\n/**\r\n * Clean up old analysis files\r\n * @param baseDir Base directory for storage\r\n * @param maxAge Maximum age in milliseconds\r\n * @returns Number of cleaned up analyses\r\n */ function cleanupOldAnalyses(baseDir = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(process.cwd(), 'tmp', 'analysis'), maxAge = 24 * 60 * 60 * 1000 // 24 hours\n) {\n    let cleanedCount = 0;\n    try {\n        if (!(0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(baseDir)) {\n            return 0;\n        }\n        const { readdirSync, statSync, rmSync } = __webpack_require__(/*! fs */ \"fs\");\n        const entries = readdirSync(baseDir, {\n            withFileTypes: true\n        });\n        for (const entry of entries){\n            if (entry.isDirectory()) {\n                const analysisDir = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(baseDir, entry.name);\n                const stats = statSync(analysisDir);\n                const age = Date.now() - stats.mtime.getTime();\n                if (age > maxAge) {\n                    try {\n                        rmSync(analysisDir, {\n                            recursive: true,\n                            force: true\n                        });\n                        cleanedCount++;\n                    } catch (error) {\n                        console.warn(`Failed to cleanup ${analysisDir}: ${error}`);\n                    }\n                }\n            }\n        }\n    } catch (error) {\n        console.warn(`Failed to cleanup old analyses: ${error}`);\n    }\n    return cleanedCount;\n}\n/**\r\n * Get analysis metadata\r\n * @param analysisId Analysis ID\r\n * @param baseDir Base directory for storage\r\n * @returns Analysis metadata or null\r\n */ function getAnalysisMetadata(analysisId, baseDir = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(process.cwd(), 'tmp', 'analysis')) {\n    try {\n        const analysisDir = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(baseDir, analysisId);\n        if (!(0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(analysisDir)) {\n            return null;\n        }\n        const { statSync } = __webpack_require__(/*! fs */ \"fs\");\n        const stats = statSync(analysisDir);\n        return {\n            createdAt: stats.birthtime,\n            size: stats.size\n        };\n    } catch (error) {\n        console.warn(`Failed to get metadata for ${analysisId}: ${error}`);\n        return null;\n    }\n}\n/**\r\n * List all stored analyses\r\n * @param baseDir Base directory for storage\r\n * @returns Array of analysis IDs\r\n */ function listStoredAnalyses(baseDir = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(process.cwd(), 'tmp', 'analysis')) {\n    try {\n        if (!(0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(baseDir)) {\n            return [];\n        }\n        const { readdirSync } = __webpack_require__(/*! fs */ \"fs\");\n        const entries = readdirSync(baseDir, {\n            withFileTypes: true\n        });\n        return entries.filter((entry)=>entry.isDirectory()).map((entry)=>entry.name);\n    } catch (error) {\n        console.warn(`Failed to list stored analyses: ${error}`);\n        return [];\n    }\n}\n/**\r\n * Delete specific analysis\r\n * @param analysisId Analysis ID\r\n * @param baseDir Base directory for storage\r\n * @returns True if deleted successfully\r\n */ function deleteAnalysis(analysisId, baseDir = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(process.cwd(), 'tmp', 'analysis')) {\n    try {\n        const analysisDir = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(baseDir, analysisId);\n        if (!(0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(analysisDir)) {\n            return false;\n        }\n        const { rmSync } = __webpack_require__(/*! fs */ \"fs\");\n        rmSync(analysisDir, {\n            recursive: true,\n            force: true\n        });\n        return true;\n    } catch (error) {\n        console.warn(`Failed to delete analysis ${analysisId}: ${error}`);\n        return false;\n    }\n}\n/**\r\n * Get storage statistics\r\n * @param baseDir Base directory for storage\r\n * @returns Storage statistics\r\n */ function getStorageStats(baseDir = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(process.cwd(), 'tmp', 'analysis')) {\n    try {\n        if (!(0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(baseDir)) {\n            return {\n                totalAnalyses: 0,\n                totalSize: 0,\n                oldestAnalysis: null,\n                newestAnalysis: null\n            };\n        }\n        const { readdirSync, statSync } = __webpack_require__(/*! fs */ \"fs\");\n        const entries = readdirSync(baseDir, {\n            withFileTypes: true\n        });\n        const analyses = entries.filter((entry)=>entry.isDirectory());\n        let totalSize = 0;\n        let oldestDate = null;\n        let newestDate = null;\n        for (const analysis of analyses){\n            const analysisDir = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(baseDir, analysis.name);\n            const stats = statSync(analysisDir);\n            totalSize += stats.size;\n            if (!oldestDate || stats.birthtime < oldestDate) {\n                oldestDate = stats.birthtime;\n            }\n            if (!newestDate || stats.birthtime > newestDate) {\n                newestDate = stats.birthtime;\n            }\n        }\n        return {\n            totalAnalyses: analyses.length,\n            totalSize,\n            oldestAnalysis: oldestDate,\n            newestAnalysis: newestDate\n        };\n    } catch (error) {\n        console.warn(`Failed to get storage stats: ${error}`);\n        return {\n            totalAnalyses: 0,\n            totalSize: 0,\n            oldestAnalysis: null,\n            newestAnalysis: null\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/files/store.ts\n");

/***/ }),

/***/ "(api-node)/./lib/files/unzip.ts":
/*!****************************!*\
  !*** ./lib/files/unzip.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractZip: () => (/* binding */ extractZip),\n/* harmony export */   extractZipToMemory: () => (/* binding */ extractZipToMemory),\n/* harmony export */   getZipInfo: () => (/* binding */ getZipInfo),\n/* harmony export */   validateZip: () => (/* binding */ validateZip)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var stream_promises__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! stream/promises */ \"stream/promises\");\n/* harmony import */ var stream_promises__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(stream_promises__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var unzipper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! unzipper */ \"unzipper\");\n/* harmony import */ var unzipper__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(unzipper__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n/**\r\n * Securely extract ZIP file contents\r\n * @param zipPath Path to ZIP file\r\n * @param extractPath Path to extract to\r\n * @param options Extraction options\r\n * @returns Extraction result\r\n */ async function extractZip(zipPath, extractPath, options = {}) {\n    const { maxFiles = 50000, maxFileSize = 10 * 1024 * 1024, allowedExtensions = [\n        '.py',\n        '.js',\n        '.ts',\n        '.tsx',\n        '.jsx',\n        '.java',\n        '.go',\n        '.cs',\n        '.fs',\n        '.vb'\n    ], ignorePaths = [\n        '/node_modules/',\n        '/.venv/',\n        '/venv/',\n        '/dist/',\n        '/build/',\n        '/.git/',\n        '/.next/'\n    ] } = options;\n    const files = [];\n    const errors = [];\n    let totalFiles = 0;\n    let skippedFiles = 0;\n    try {\n        // Create extract directory\n        if (!(0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(extractPath)) {\n            (0,fs__WEBPACK_IMPORTED_MODULE_0__.mkdirSync)(extractPath, {\n                recursive: true\n            });\n        }\n        // Open ZIP file\n        const zip = unzipper__WEBPACK_IMPORTED_MODULE_3___default().Open.file(zipPath);\n        const directory = await zip;\n        // Process each entry\n        for (const entry of directory.files){\n            totalFiles++;\n            // Check file count limit\n            if (totalFiles > maxFiles) {\n                errors.push(`Too many files in archive (limit: ${maxFiles})`);\n                break;\n            }\n            // Skip directories\n            if (entry.type === 'Directory') {\n                continue;\n            }\n            // Validate file path\n            const filePath = (0,path__WEBPACK_IMPORTED_MODULE_1__.normalize)(entry.path);\n            if (!isValidPath(filePath, extractPath)) {\n                errors.push(`Invalid file path: ${filePath}`);\n                skippedFiles++;\n                continue;\n            }\n            // Check if path should be ignored\n            if (shouldIgnorePath(filePath, ignorePaths)) {\n                skippedFiles++;\n                continue;\n            }\n            // Check file extension\n            const extension = getFileExtension(filePath);\n            if (allowedExtensions.length > 0 && !allowedExtensions.includes(extension)) {\n                skippedFiles++;\n                continue;\n            }\n            // Check file size\n            if (entry.uncompressedSize > maxFileSize) {\n                errors.push(`File too large: ${filePath} (${entry.uncompressedSize} bytes)`);\n                skippedFiles++;\n                continue;\n            }\n            try {\n                // Extract file\n                const fullPath = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(extractPath, filePath);\n                const dir = (0,path__WEBPACK_IMPORTED_MODULE_1__.dirname)(fullPath);\n                if (!(0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(dir)) {\n                    (0,fs__WEBPACK_IMPORTED_MODULE_0__.mkdirSync)(dir, {\n                        recursive: true\n                    });\n                }\n                await (0,stream_promises__WEBPACK_IMPORTED_MODULE_2__.pipeline)(entry.stream(), (0,fs__WEBPACK_IMPORTED_MODULE_0__.createWriteStream)(fullPath));\n                // Read file content for analysis\n                const content = await readFileContent(fullPath);\n                if (content !== null) {\n                    files.push({\n                        path: filePath,\n                        content,\n                        size: content.length,\n                        language: detectLanguageFromExtension(extension)\n                    });\n                }\n            } catch (error) {\n                errors.push(`Failed to extract ${filePath}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n                skippedFiles++;\n            }\n        }\n    } catch (error) {\n        errors.push(`Failed to open ZIP file: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n    return {\n        files,\n        totalFiles,\n        skippedFiles,\n        errors\n    };\n}\n/**\r\n * Validate file path for security\r\n * @param filePath File path\r\n * @param extractPath Base extraction path\r\n * @returns True if path is valid\r\n */ function isValidPath(filePath, extractPath) {\n    try {\n        // Normalize path\n        const normalized = (0,path__WEBPACK_IMPORTED_MODULE_1__.normalize)(filePath);\n        // Check for path traversal\n        if (normalized.includes('..') || normalized.startsWith('/')) {\n            return false;\n        }\n        // Check if path is within extract directory\n        const fullPath = (0,path__WEBPACK_IMPORTED_MODULE_1__.resolve)(extractPath, normalized);\n        const basePath = (0,path__WEBPACK_IMPORTED_MODULE_1__.resolve)(extractPath);\n        return fullPath.startsWith(basePath);\n    } catch  {\n        return false;\n    }\n}\n/**\r\n * Check if path should be ignored\r\n * @param filePath File path\r\n * @param ignorePaths Array of paths to ignore\r\n * @returns True if should be ignored\r\n */ function shouldIgnorePath(filePath, ignorePaths) {\n    return ignorePaths.some((ignorePath)=>filePath.includes(ignorePath) || filePath.startsWith(ignorePath));\n}\n/**\r\n * Get file extension from path\r\n * @param filePath File path\r\n * @returns File extension with dot\r\n */ function getFileExtension(filePath) {\n    const lastDot = filePath.lastIndexOf('.');\n    if (lastDot === -1) return '';\n    return filePath.substring(lastDot);\n}\n/**\r\n * Detect language from file extension\r\n * @param extension File extension\r\n * @returns Language or undefined\r\n */ function detectLanguageFromExtension(extension) {\n    const languageMap = {\n        '.js': 'node',\n        '.jsx': 'node',\n        '.ts': 'node',\n        '.tsx': 'node',\n        '.py': 'python',\n        '.java': 'java',\n        '.go': 'go',\n        '.cs': 'dotnet',\n        '.fs': 'dotnet',\n        '.vb': 'dotnet'\n    };\n    return languageMap[extension];\n}\n/**\r\n * Read file content safely\r\n * @param filePath File path\r\n * @returns File content or null if error\r\n */ async function readFileContent(filePath) {\n    try {\n        const stats = (0,fs__WEBPACK_IMPORTED_MODULE_0__.statSync)(filePath);\n        // Skip very large files\n        if (stats.size > 2 * 1024 * 1024) {\n            return null;\n        }\n        // Read file content\n        const content = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 23)).then((fs)=>fs.promises.readFile(filePath, 'utf8'));\n        return content;\n    } catch (error) {\n        console.warn(`Failed to read file ${filePath}: ${error}`);\n        return null;\n    }\n}\n/**\r\n * Extract ZIP to memory (for small archives)\r\n * @param zipPath Path to ZIP file\r\n * @param options Extraction options\r\n * @returns Extraction result\r\n */ async function extractZipToMemory(zipPath, options = {}) {\n    const { maxFiles = 50000, maxFileSize = 2 * 1024 * 1024, allowedExtensions = [\n        '.py',\n        '.js',\n        '.ts',\n        '.tsx',\n        '.jsx',\n        '.java',\n        '.go',\n        '.cs',\n        '.fs',\n        '.vb'\n    ], ignorePaths = [\n        '/node_modules/',\n        '/.venv/',\n        '/venv/',\n        '/dist/',\n        '/build/',\n        '/.git/',\n        '/.next/'\n    ] } = options;\n    const files = [];\n    const errors = [];\n    let totalFiles = 0;\n    let skippedFiles = 0;\n    try {\n        // Open ZIP file\n        const zip = unzipper__WEBPACK_IMPORTED_MODULE_3___default().Open.file(zipPath);\n        const directory = await zip;\n        // Process each entry\n        for (const entry of directory.files){\n            totalFiles++;\n            // Check file count limit\n            if (totalFiles > maxFiles) {\n                errors.push(`Too many files in archive (limit: ${maxFiles})`);\n                break;\n            }\n            // Skip directories\n            if (entry.type === 'Directory') {\n                continue;\n            }\n            // Validate file path\n            const filePath = (0,path__WEBPACK_IMPORTED_MODULE_1__.normalize)(entry.path);\n            if (!isValidPath(filePath, '/')) {\n                errors.push(`Invalid file path: ${filePath}`);\n                skippedFiles++;\n                continue;\n            }\n            // Check if path should be ignored\n            if (shouldIgnorePath(filePath, ignorePaths)) {\n                skippedFiles++;\n                continue;\n            }\n            // Check file extension\n            const extension = getFileExtension(filePath);\n            if (allowedExtensions.length > 0 && !allowedExtensions.includes(extension)) {\n                skippedFiles++;\n                continue;\n            }\n            // Check file size\n            if (entry.uncompressedSize > maxFileSize) {\n                errors.push(`File too large: ${filePath} (${entry.uncompressedSize} bytes)`);\n                skippedFiles++;\n                continue;\n            }\n            try {\n                // Read file content\n                const content = await entry.buffer();\n                const contentString = content.toString('utf8');\n                files.push({\n                    path: filePath,\n                    content: contentString,\n                    size: contentString.length,\n                    language: detectLanguageFromExtension(extension)\n                });\n            } catch (error) {\n                errors.push(`Failed to read ${filePath}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n                skippedFiles++;\n            }\n        }\n    } catch (error) {\n        errors.push(`Failed to open ZIP file: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n    return {\n        files,\n        totalFiles,\n        skippedFiles,\n        errors\n    };\n}\n/**\r\n * Get ZIP file information\r\n * @param zipPath Path to ZIP file\r\n * @returns ZIP file info\r\n */ async function getZipInfo(zipPath) {\n    try {\n        const zip = unzipper__WEBPACK_IMPORTED_MODULE_3___default().Open.file(zipPath);\n        const directory = await zip;\n        let totalSize = 0;\n        let compressedSize = 0;\n        const files = [];\n        for (const entry of directory.files){\n            if (entry.type !== 'Directory') {\n                totalSize += entry.uncompressedSize;\n                compressedSize += entry.compressedSize;\n                files.push({\n                    path: entry.path,\n                    size: entry.uncompressedSize,\n                    compressedSize: entry.compressedSize\n                });\n            }\n        }\n        return {\n            totalFiles: files.length,\n            totalSize,\n            compressedSize,\n            files\n        };\n    } catch (error) {\n        throw new Error(`Failed to read ZIP info: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n}\n/**\r\n * Validate ZIP file\r\n * @param zipPath Path to ZIP file\r\n * @returns True if valid ZIP\r\n */ async function validateZip(zipPath) {\n    try {\n        const zip = unzipper__WEBPACK_IMPORTED_MODULE_3___default().Open.file(zipPath);\n        await zip;\n        return true;\n    } catch  {\n        return false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/files/unzip.ts\n");

/***/ }),

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fanalyze&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Canalyze.ts&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fanalyze&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Canalyze.ts&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   handler: () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/api-utils */ \"(api-node)/./node_modules/next/dist/server/api-utils/index.js\");\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_analyze_ts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pages\\api\\analyze.ts */ \"(api-node)/./pages/api/analyze.ts\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(api-node)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(api-node)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_analyze_ts__WEBPACK_IMPORTED_MODULE_4__]);\n_pages_api_analyze_ts__WEBPACK_IMPORTED_MODULE_4__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n// Import the userland code.\n\n\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_pages_api_analyze_ts__WEBPACK_IMPORTED_MODULE_4__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_pages_api_analyze_ts__WEBPACK_IMPORTED_MODULE_4__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/analyze\",\n        pathname: \"/api/analyze\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_analyze_ts__WEBPACK_IMPORTED_MODULE_4__,\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || ''\n});\nasync function handler(req, res, ctx) {\n    let srcPage = \"/api/analyze\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {}\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return;\n    }\n    const { query, params, prerenderManifest, routerServerContext } = prepareResult;\n    try {\n        const method = req.method || 'GET';\n        const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.getTracer)();\n        const activeSpan = tracer.getActiveScopeSpan();\n        const onRequestError = routeModule.instrumentationOnRequestError.bind(routeModule);\n        const invokeRouteModule = async (span)=>routeModule.render(req, res, {\n                query: {\n                    ...query,\n                    ...params\n                },\n                params,\n                allowedRevalidateHeaderKeys: [],\n                multiZoneDraftMode: Boolean(false),\n                trustHostHeader: false,\n                // TODO: get this from from runtime env so manifest\n                // doesn't need to load\n                previewProps: prerenderManifest.preview,\n                propagateError: false,\n                dev: routeModule.isDev,\n                page: \"/api/analyze\",\n                internalRevalidate: routerServerContext == null ? void 0 : routerServerContext.revalidate,\n                onError: (...args)=>onRequestError(req, ...args)\n            }).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await invokeRouteModule(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, invokeRouteModule));\n        }\n    } catch (err) {\n        // we re-throw in dev to show the error overlay\n        if (routeModule.isDev) {\n            throw err;\n        }\n        // this is technically an invariant as error handling\n        // should be done inside of api-resolver onError\n        (0,next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__.sendError)(res, 500, 'Internal Server Error');\n    } finally{\n        // We don't allow any waitUntil work in pages API routes currently\n        // so if callback is present return with resolved promise since no\n        // pending work\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n    }\n}\n\n//# sourceMappingURL=pages-api.js.map\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fanalyze&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Canalyze.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/analyze.ts":
/*!******************************!*\
  !*** ./pages/api/analyze.ts ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var formidable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! formidable */ \"formidable\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _lib_analysis_run__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../lib/analysis/run */ \"(api-node)/./lib/analysis/run.ts\");\n/* harmony import */ var _lib_files_unzip__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../lib/files/unzip */ \"(api-node)/./lib/files/unzip.ts\");\n/* harmony import */ var _lib_files_single_file__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../lib/files/single-file */ \"(api-node)/./lib/files/single-file.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([formidable__WEBPACK_IMPORTED_MODULE_0__, _lib_analysis_run__WEBPACK_IMPORTED_MODULE_4__]);\n([formidable__WEBPACK_IMPORTED_MODULE_0__, _lib_analysis_run__WEBPACK_IMPORTED_MODULE_4__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\n\nconst config = {\n    api: {\n        bodyParser: false\n    }\n};\nasync function handler(req, res) {\n    console.log('Analyze API called with method:', req.method);\n    if (req.method !== 'POST') {\n        return res.status(405).json({\n            error: 'Method not allowed'\n        });\n    }\n    let tempPath;\n    try {\n        // Parse form data\n        const form = (0,formidable__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({\n            maxFileSize: 200 * 1024 * 1024,\n            filter: ({ mimetype, originalFilename })=>{\n                // Accept all file types\n                console.log('Filter check:', {\n                    mimetype,\n                    originalFilename\n                });\n                return true;\n            }\n        });\n        console.log('Parsing form data...');\n        const [fields, files] = await form.parse(req);\n        console.log('Parsed fields:', Object.keys(fields));\n        console.log('Parsed files:', Object.keys(files));\n        console.log('Files object:', files);\n        const file = Array.isArray(files.file) ? files.file[0] : files.file;\n        if (!file) {\n            console.error('No file found in request. Available files:', Object.keys(files));\n            return res.status(400).json({\n                error: 'No file provided',\n                debug: {\n                    fieldsKeys: Object.keys(fields),\n                    filesKeys: Object.keys(files),\n                    filesContent: files\n                }\n            });\n        }\n        console.log('File found:', {\n            originalFilename: file.originalFilename,\n            mimetype: file.mimetype,\n            size: file.size,\n            filepath: file.filepath\n        });\n        // Create temporary directory\n        const tempDir = path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), 'tmp', 'analyzer');\n        await fs__WEBPACK_IMPORTED_MODULE_1__.promises.mkdir(tempDir, {\n            recursive: true\n        });\n        // Save uploaded file\n        const analysisId = (0,crypto__WEBPACK_IMPORTED_MODULE_3__.randomUUID)();\n        const originalName = file.originalFilename || 'uploaded-file';\n        tempPath = path__WEBPACK_IMPORTED_MODULE_2___default().join(tempDir, `${analysisId}-${originalName}`);\n        console.log('Copying file from', file.filepath, 'to', tempPath);\n        await fs__WEBPACK_IMPORTED_MODULE_1__.promises.copyFile(file.filepath, tempPath);\n        console.log('File copied successfully');\n        try {\n            // Check if file should be analyzed\n            if (!(0,_lib_files_single_file__WEBPACK_IMPORTED_MODULE_6__.shouldAnalyzeFile)(originalName)) {\n                return res.status(400).json({\n                    error: 'File type not supported for analysis',\n                    details: {\n                        filename: originalName\n                    }\n                });\n            }\n            // Check file size\n            const stats = await fs__WEBPACK_IMPORTED_MODULE_1__.promises.stat(tempPath);\n            if (stats.size > 200 * 1024 * 1024) {\n                return res.status(400).json({\n                    error: 'File too large',\n                    details: {\n                        size: stats.size,\n                        maxSize: 200 * 1024 * 1024\n                    }\n                });\n            }\n            // For ZIP files, validate and get info\n            let feasibility = {\n                feasible: true,\n                warnings: [],\n                estimatedTime: '1-2 minutes'\n            };\n            if (originalName.toLowerCase().endsWith('.zip')) {\n                const isValidZip = await (0,_lib_files_unzip__WEBPACK_IMPORTED_MODULE_5__.validateZip)(tempPath);\n                if (!isValidZip) {\n                    return res.status(400).json({\n                        error: 'Invalid ZIP file'\n                    });\n                }\n                const zipInfo = await (0,_lib_files_unzip__WEBPACK_IMPORTED_MODULE_5__.getZipInfo)(tempPath);\n                feasibility = (0,_lib_analysis_run__WEBPACK_IMPORTED_MODULE_4__.checkAnalysisFeasibility)(zipInfo.totalFiles, zipInfo.totalSize);\n                if (!feasibility.feasible) {\n                    return res.status(400).json({\n                        error: 'Analysis not feasible',\n                        warnings: feasibility.warnings,\n                        details: {\n                            totalFiles: zipInfo.totalFiles,\n                            totalSize: zipInfo.totalSize,\n                            estimatedTime: feasibility.estimatedTime\n                        }\n                    });\n                }\n            }\n            // Run analysis\n            console.log('Starting analysis for:', originalName);\n            const analysisOptions = (0,_lib_analysis_run__WEBPACK_IMPORTED_MODULE_4__.validateAnalysisOptions)({\n                maxFiles: 50000,\n                maxFileSize: 2 * 1024 * 1024,\n                storeResults: true,\n                publicUrl: process.env.PUBLIC_URL || 'http://localhost:3000'\n            });\n            console.log('Analysis options:', analysisOptions);\n            const result = await (0,_lib_analysis_run__WEBPACK_IMPORTED_MODULE_4__.runBaselineAnalysis)(tempPath, analysisOptions);\n            console.log('Analysis completed successfully');\n            if (!result.artifacts) {\n                throw new Error('Failed to store analysis results');\n            }\n            // Create response\n            const response = {\n                analysisId: result.artifacts.analysisId,\n                summary: result.report.summary,\n                artifacts: {\n                    jsonUrl: result.artifacts.jsonUrl,\n                    csvUrl: result.artifacts.csvUrl\n                },\n                report: result.report\n            };\n            return res.status(200).json(response);\n        } finally{\n            // Clean up temporary file\n            try {\n                await fs__WEBPACK_IMPORTED_MODULE_1__.promises.unlink(tempPath);\n            } catch (error) {\n                console.warn(`Failed to cleanup temp file ${tempPath}: ${error}`);\n            }\n        }\n    } catch (error) {\n        console.error('Analysis API error:', error);\n        // Clean up temporary file on error\n        try {\n            if (typeof tempPath !== 'undefined') {\n                await fs__WEBPACK_IMPORTED_MODULE_1__.promises.unlink(tempPath);\n            }\n        } catch (cleanupError) {\n            console.warn(`Failed to cleanup temp file on error: ${cleanupError}`);\n        }\n        return res.status(500).json({\n            error: 'Analysis failed',\n            message: error instanceof Error ? error.message : 'Unknown error',\n            details: error instanceof Error ? error.stack : undefined\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL3BhZ2VzL2FwaS9hbmFseXplLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNvQztBQUNBO0FBQ1o7QUFDWTtBQUM0RTtBQUNoRDtBQUNBO0FBR3pELE1BQU1XLFNBQVM7SUFDcEJDLEtBQUs7UUFDSEMsWUFBWTtJQUNkO0FBQ0YsRUFBRTtBQUVhLGVBQWVDLFFBQVFDLEdBQW1CLEVBQUVDLEdBQW9CO0lBQzdFQyxRQUFRQyxHQUFHLENBQUMsbUNBQW1DSCxJQUFJSSxNQUFNO0lBRXpELElBQUlKLElBQUlJLE1BQU0sS0FBSyxRQUFRO1FBQ3pCLE9BQU9ILElBQUlJLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFBRUMsT0FBTztRQUFxQjtJQUM1RDtJQUVBLElBQUlDO0lBRUosSUFBSTtRQUNGLGtCQUFrQjtRQUNsQixNQUFNQyxPQUFPeEIsc0RBQVVBLENBQUM7WUFDdEJ5QixhQUFhLE1BQU0sT0FBTztZQUMxQkMsUUFBUSxDQUFDLEVBQUVDLFFBQVEsRUFBRUMsZ0JBQWdCLEVBQUU7Z0JBQ3JDLHdCQUF3QjtnQkFDeEJYLFFBQVFDLEdBQUcsQ0FBQyxpQkFBaUI7b0JBQUVTO29CQUFVQztnQkFBaUI7Z0JBQzFELE9BQU87WUFDVDtRQUNGO1FBRUFYLFFBQVFDLEdBQUcsQ0FBQztRQUNaLE1BQU0sQ0FBQ1csUUFBUUMsTUFBTSxHQUFHLE1BQU1OLEtBQUtPLEtBQUssQ0FBQ2hCO1FBQ3pDRSxRQUFRQyxHQUFHLENBQUMsa0JBQWtCYyxPQUFPQyxJQUFJLENBQUNKO1FBQzFDWixRQUFRQyxHQUFHLENBQUMsaUJBQWlCYyxPQUFPQyxJQUFJLENBQUNIO1FBQ3pDYixRQUFRQyxHQUFHLENBQUMsaUJBQWlCWTtRQUU3QixNQUFNSSxPQUFPQyxNQUFNQyxPQUFPLENBQUNOLE1BQU1JLElBQUksSUFBSUosTUFBTUksSUFBSSxDQUFDLEVBQUUsR0FBR0osTUFBTUksSUFBSTtRQUVuRSxJQUFJLENBQUNBLE1BQU07WUFDVGpCLFFBQVFLLEtBQUssQ0FBQyw4Q0FBOENVLE9BQU9DLElBQUksQ0FBQ0g7WUFDeEUsT0FBT2QsSUFBSUksTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztnQkFDMUJDLE9BQU87Z0JBQ1BlLE9BQU87b0JBQ0xDLFlBQVlOLE9BQU9DLElBQUksQ0FBQ0o7b0JBQ3hCVSxXQUFXUCxPQUFPQyxJQUFJLENBQUNIO29CQUN2QlUsY0FBY1Y7Z0JBQ2hCO1lBQ0Y7UUFDRjtRQUVBYixRQUFRQyxHQUFHLENBQUMsZUFBZTtZQUN6QlUsa0JBQWtCTSxLQUFLTixnQkFBZ0I7WUFDdkNELFVBQVVPLEtBQUtQLFFBQVE7WUFDdkJjLE1BQU1QLEtBQUtPLElBQUk7WUFDZkMsVUFBVVIsS0FBS1EsUUFBUTtRQUN6QjtRQUVBLDZCQUE2QjtRQUM3QixNQUFNQyxVQUFVeEMsZ0RBQVMsQ0FBQzBDLFFBQVFDLEdBQUcsSUFBSSxPQUFPO1FBQ2hELE1BQU01Qyx3Q0FBRUEsQ0FBQzZDLEtBQUssQ0FBQ0osU0FBUztZQUFFSyxXQUFXO1FBQUs7UUFFMUMscUJBQXFCO1FBQ3JCLE1BQU1DLGFBQWE3QyxrREFBVUE7UUFDN0IsTUFBTThDLGVBQWVoQixLQUFLTixnQkFBZ0IsSUFBSTtRQUM5Q0wsV0FBV3BCLGdEQUFTLENBQUN3QyxTQUFTLEdBQUdNLFdBQVcsQ0FBQyxFQUFFQyxjQUFjO1FBRTdEakMsUUFBUUMsR0FBRyxDQUFDLHFCQUFxQmdCLEtBQUtRLFFBQVEsRUFBRSxNQUFNbkI7UUFDdEQsTUFBTXJCLHdDQUFFQSxDQUFDaUQsUUFBUSxDQUFDakIsS0FBS1EsUUFBUSxFQUFFbkI7UUFDakNOLFFBQVFDLEdBQUcsQ0FBQztRQUVaLElBQUk7WUFDRixtQ0FBbUM7WUFDbkMsSUFBSSxDQUFDUix5RUFBaUJBLENBQUN3QyxlQUFlO2dCQUNwQyxPQUFPbEMsSUFBSUksTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztvQkFDMUJDLE9BQU87b0JBQ1A4QixTQUFTO3dCQUFFQyxVQUFVSDtvQkFBYTtnQkFDcEM7WUFDRjtZQUVBLGtCQUFrQjtZQUNsQixNQUFNSSxRQUFRLE1BQU1wRCx3Q0FBRUEsQ0FBQ3FELElBQUksQ0FBQ2hDO1lBQzVCLElBQUkrQixNQUFNYixJQUFJLEdBQUcsTUFBTSxPQUFPLE1BQU07Z0JBQ2xDLE9BQU96QixJQUFJSSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO29CQUMxQkMsT0FBTztvQkFDUDhCLFNBQVM7d0JBQ1BYLE1BQU1hLE1BQU1iLElBQUk7d0JBQ2hCZSxTQUFTLE1BQU0sT0FBTztvQkFDeEI7Z0JBQ0Y7WUFDRjtZQUVBLHVDQUF1QztZQUN2QyxJQUFJQyxjQUFjO2dCQUFFQyxVQUFVO2dCQUFNQyxVQUFVLEVBQUU7Z0JBQUVDLGVBQWU7WUFBYztZQUMvRSxJQUFJVixhQUFhVyxXQUFXLEdBQUdDLFFBQVEsQ0FBQyxTQUFTO2dCQUMvQyxNQUFNQyxhQUFhLE1BQU12RCw2REFBV0EsQ0FBQ2U7Z0JBQ3JDLElBQUksQ0FBQ3dDLFlBQVk7b0JBQ2YsT0FBTy9DLElBQUlJLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7d0JBQUVDLE9BQU87b0JBQW1CO2dCQUMxRDtnQkFFQSxNQUFNMEMsVUFBVSxNQUFNdkQsNERBQVVBLENBQUNjO2dCQUNqQ2tDLGNBQWNsRCwyRUFBd0JBLENBQUN5RCxRQUFRQyxVQUFVLEVBQUVELFFBQVFFLFNBQVM7Z0JBQzVFLElBQUksQ0FBQ1QsWUFBWUMsUUFBUSxFQUFFO29CQUN6QixPQUFPMUMsSUFBSUksTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQzt3QkFDMUJDLE9BQU87d0JBQ1BxQyxVQUFVRixZQUFZRSxRQUFRO3dCQUM5QlAsU0FBUzs0QkFDUGEsWUFBWUQsUUFBUUMsVUFBVTs0QkFDOUJDLFdBQVdGLFFBQVFFLFNBQVM7NEJBQzVCTixlQUFlSCxZQUFZRyxhQUFhO3dCQUMxQztvQkFDRjtnQkFDRjtZQUNGO1lBRUEsZUFBZTtZQUNmM0MsUUFBUUMsR0FBRyxDQUFDLDBCQUEwQmdDO1lBQ3RDLE1BQU1pQixrQkFBa0I3RCwwRUFBdUJBLENBQUM7Z0JBQzlDOEQsVUFBVTtnQkFDVjNDLGFBQWEsSUFBSSxPQUFPO2dCQUN4QjRDLGNBQWM7Z0JBQ2RDLFdBQVd6QixRQUFRMEIsR0FBRyxDQUFDQyxVQUFVLElBQUk7WUFDdkM7WUFFQXZELFFBQVFDLEdBQUcsQ0FBQyxxQkFBcUJpRDtZQUNqQyxNQUFNTSxTQUFTLE1BQU1wRSxzRUFBbUJBLENBQUNrQixVQUFVNEM7WUFDbkRsRCxRQUFRQyxHQUFHLENBQUM7WUFFWixJQUFJLENBQUN1RCxPQUFPQyxTQUFTLEVBQUU7Z0JBQ3JCLE1BQU0sSUFBSUMsTUFBTTtZQUNsQjtZQUVBLGtCQUFrQjtZQUNsQixNQUFNQyxXQUE0QjtnQkFDaEMzQixZQUFZd0IsT0FBT0MsU0FBUyxDQUFDekIsVUFBVTtnQkFDdkM0QixTQUFTSixPQUFPSyxNQUFNLENBQUNELE9BQU87Z0JBQzlCSCxXQUFXO29CQUNUSyxTQUFTTixPQUFPQyxTQUFTLENBQUNLLE9BQU87b0JBQ2pDQyxRQUFRUCxPQUFPQyxTQUFTLENBQUNNLE1BQU07Z0JBQ2pDO2dCQUNBRixRQUFRTCxPQUFPSyxNQUFNO1lBQ3ZCO1lBRUEsT0FBTzlELElBQUlJLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUN1RDtRQUU5QixTQUFVO1lBQ1IsMEJBQTBCO1lBQzFCLElBQUk7Z0JBQ0YsTUFBTTFFLHdDQUFFQSxDQUFDK0UsTUFBTSxDQUFDMUQ7WUFDbEIsRUFBRSxPQUFPRCxPQUFPO2dCQUNkTCxRQUFRaUUsSUFBSSxDQUFDLENBQUMsNEJBQTRCLEVBQUUzRCxTQUFTLEVBQUUsRUFBRUQsT0FBTztZQUNsRTtRQUNGO0lBRUYsRUFBRSxPQUFPQSxPQUFPO1FBQ2RMLFFBQVFLLEtBQUssQ0FBQyx1QkFBdUJBO1FBRXJDLG1DQUFtQztRQUNuQyxJQUFJO1lBQ0YsSUFBSSxPQUFPQyxhQUFhLGFBQWE7Z0JBQ25DLE1BQU1yQix3Q0FBRUEsQ0FBQytFLE1BQU0sQ0FBQzFEO1lBQ2xCO1FBQ0YsRUFBRSxPQUFPNEQsY0FBYztZQUNyQmxFLFFBQVFpRSxJQUFJLENBQUMsQ0FBQyxzQ0FBc0MsRUFBRUMsY0FBYztRQUN0RTtRQUVBLE9BQU9uRSxJQUFJSSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO1lBQzFCQyxPQUFPO1lBQ1A4RCxTQUFTOUQsaUJBQWlCcUQsUUFBUXJELE1BQU04RCxPQUFPLEdBQUc7WUFDbERoQyxTQUFTOUIsaUJBQWlCcUQsUUFBUXJELE1BQU0rRCxLQUFLLEdBQUdDO1FBQ2xEO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxDa2hhZGFyXFxEb3dubG9hZHNcXEFJX0Jhc2VsaW5lX01hcFxccGFnZXNcXGFwaVxcYW5hbHl6ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0QXBpUmVxdWVzdCwgTmV4dEFwaVJlc3BvbnNlIH0gZnJvbSAnbmV4dCc7XHJcbmltcG9ydCBmb3JtaWRhYmxlIGZyb20gJ2Zvcm1pZGFibGUnO1xyXG5pbXBvcnQgeyBwcm9taXNlcyBhcyBmcyB9IGZyb20gJ2ZzJztcclxuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XHJcbmltcG9ydCB7IHJhbmRvbVVVSUQgfSBmcm9tICdjcnlwdG8nO1xyXG5pbXBvcnQgeyBydW5CYXNlbGluZUFuYWx5c2lzLCB2YWxpZGF0ZUFuYWx5c2lzT3B0aW9ucywgY2hlY2tBbmFseXNpc0ZlYXNpYmlsaXR5IH0gZnJvbSAnLi4vLi4vbGliL2FuYWx5c2lzL3J1bic7XHJcbmltcG9ydCB7IHZhbGlkYXRlWmlwLCBnZXRaaXBJbmZvIH0gZnJvbSAnLi4vLi4vbGliL2ZpbGVzL3VuemlwJztcclxuaW1wb3J0IHsgc2hvdWxkQW5hbHl6ZUZpbGUgfSBmcm9tICcuLi8uLi9saWIvZmlsZXMvc2luZ2xlLWZpbGUnO1xyXG5pbXBvcnQgeyBBbmFseXplUmVzcG9uc2UgfSBmcm9tICcuLi8uLi9saWIvYW5hbHlzaXMvYmFzZWxpbmUudHlwZXMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IHtcclxuICBhcGk6IHtcclxuICAgIGJvZHlQYXJzZXI6IGZhbHNlLFxyXG4gIH0sXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiBoYW5kbGVyKHJlcTogTmV4dEFwaVJlcXVlc3QsIHJlczogTmV4dEFwaVJlc3BvbnNlKSB7XHJcbiAgY29uc29sZS5sb2coJ0FuYWx5emUgQVBJIGNhbGxlZCB3aXRoIG1ldGhvZDonLCByZXEubWV0aG9kKTtcclxuICBcclxuICBpZiAocmVxLm1ldGhvZCAhPT0gJ1BPU1QnKSB7XHJcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDUpLmpzb24oeyBlcnJvcjogJ01ldGhvZCBub3QgYWxsb3dlZCcgfSk7XHJcbiAgfVxyXG5cclxuICBsZXQgdGVtcFBhdGg6IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuXHJcbiAgdHJ5IHtcclxuICAgIC8vIFBhcnNlIGZvcm0gZGF0YVxyXG4gICAgY29uc3QgZm9ybSA9IGZvcm1pZGFibGUoe1xyXG4gICAgICBtYXhGaWxlU2l6ZTogMjAwICogMTAyNCAqIDEwMjQsIC8vIDIwME1CXHJcbiAgICAgIGZpbHRlcjogKHsgbWltZXR5cGUsIG9yaWdpbmFsRmlsZW5hbWUgfSkgPT4ge1xyXG4gICAgICAgIC8vIEFjY2VwdCBhbGwgZmlsZSB0eXBlc1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdGaWx0ZXIgY2hlY2s6JywgeyBtaW1ldHlwZSwgb3JpZ2luYWxGaWxlbmFtZSB9KTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKCdQYXJzaW5nIGZvcm0gZGF0YS4uLicpO1xyXG4gICAgY29uc3QgW2ZpZWxkcywgZmlsZXNdID0gYXdhaXQgZm9ybS5wYXJzZShyZXEpO1xyXG4gICAgY29uc29sZS5sb2coJ1BhcnNlZCBmaWVsZHM6JywgT2JqZWN0LmtleXMoZmllbGRzKSk7XHJcbiAgICBjb25zb2xlLmxvZygnUGFyc2VkIGZpbGVzOicsIE9iamVjdC5rZXlzKGZpbGVzKSk7XHJcbiAgICBjb25zb2xlLmxvZygnRmlsZXMgb2JqZWN0OicsIGZpbGVzKTtcclxuICAgIFxyXG4gICAgY29uc3QgZmlsZSA9IEFycmF5LmlzQXJyYXkoZmlsZXMuZmlsZSkgPyBmaWxlcy5maWxlWzBdIDogZmlsZXMuZmlsZTtcclxuXHJcbiAgICBpZiAoIWZpbGUpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignTm8gZmlsZSBmb3VuZCBpbiByZXF1ZXN0LiBBdmFpbGFibGUgZmlsZXM6JywgT2JqZWN0LmtleXMoZmlsZXMpKTtcclxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgXHJcbiAgICAgICAgZXJyb3I6ICdObyBmaWxlIHByb3ZpZGVkJyxcclxuICAgICAgICBkZWJ1Zzoge1xyXG4gICAgICAgICAgZmllbGRzS2V5czogT2JqZWN0LmtleXMoZmllbGRzKSxcclxuICAgICAgICAgIGZpbGVzS2V5czogT2JqZWN0LmtleXMoZmlsZXMpLFxyXG4gICAgICAgICAgZmlsZXNDb250ZW50OiBmaWxlc1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc29sZS5sb2coJ0ZpbGUgZm91bmQ6Jywge1xyXG4gICAgICBvcmlnaW5hbEZpbGVuYW1lOiBmaWxlLm9yaWdpbmFsRmlsZW5hbWUsXHJcbiAgICAgIG1pbWV0eXBlOiBmaWxlLm1pbWV0eXBlLFxyXG4gICAgICBzaXplOiBmaWxlLnNpemUsXHJcbiAgICAgIGZpbGVwYXRoOiBmaWxlLmZpbGVwYXRoXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBDcmVhdGUgdGVtcG9yYXJ5IGRpcmVjdG9yeVxyXG4gICAgY29uc3QgdGVtcERpciA9IHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAndG1wJywgJ2FuYWx5emVyJyk7XHJcbiAgICBhd2FpdCBmcy5ta2Rpcih0ZW1wRGlyLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcclxuXHJcbiAgICAvLyBTYXZlIHVwbG9hZGVkIGZpbGVcclxuICAgIGNvbnN0IGFuYWx5c2lzSWQgPSByYW5kb21VVUlEKCk7XHJcbiAgICBjb25zdCBvcmlnaW5hbE5hbWUgPSBmaWxlLm9yaWdpbmFsRmlsZW5hbWUgfHwgJ3VwbG9hZGVkLWZpbGUnO1xyXG4gICAgdGVtcFBhdGggPSBwYXRoLmpvaW4odGVtcERpciwgYCR7YW5hbHlzaXNJZH0tJHtvcmlnaW5hbE5hbWV9YCk7XHJcbiAgICBcclxuICAgIGNvbnNvbGUubG9nKCdDb3B5aW5nIGZpbGUgZnJvbScsIGZpbGUuZmlsZXBhdGgsICd0bycsIHRlbXBQYXRoKTtcclxuICAgIGF3YWl0IGZzLmNvcHlGaWxlKGZpbGUuZmlsZXBhdGgsIHRlbXBQYXRoKTtcclxuICAgIGNvbnNvbGUubG9nKCdGaWxlIGNvcGllZCBzdWNjZXNzZnVsbHknKTtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBDaGVjayBpZiBmaWxlIHNob3VsZCBiZSBhbmFseXplZFxyXG4gICAgICBpZiAoIXNob3VsZEFuYWx5emVGaWxlKG9yaWdpbmFsTmFtZSkpIHtcclxuICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBcclxuICAgICAgICAgIGVycm9yOiAnRmlsZSB0eXBlIG5vdCBzdXBwb3J0ZWQgZm9yIGFuYWx5c2lzJyxcclxuICAgICAgICAgIGRldGFpbHM6IHsgZmlsZW5hbWU6IG9yaWdpbmFsTmFtZSB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIENoZWNrIGZpbGUgc2l6ZVxyXG4gICAgICBjb25zdCBzdGF0cyA9IGF3YWl0IGZzLnN0YXQodGVtcFBhdGgpO1xyXG4gICAgICBpZiAoc3RhdHMuc2l6ZSA+IDIwMCAqIDEwMjQgKiAxMDI0KSB7IC8vIDIwME1CIGxpbWl0XHJcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgXHJcbiAgICAgICAgICBlcnJvcjogJ0ZpbGUgdG9vIGxhcmdlJyxcclxuICAgICAgICAgIGRldGFpbHM6IHsgXHJcbiAgICAgICAgICAgIHNpemU6IHN0YXRzLnNpemUsXHJcbiAgICAgICAgICAgIG1heFNpemU6IDIwMCAqIDEwMjQgKiAxMDI0XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEZvciBaSVAgZmlsZXMsIHZhbGlkYXRlIGFuZCBnZXQgaW5mb1xyXG4gICAgICBsZXQgZmVhc2liaWxpdHkgPSB7IGZlYXNpYmxlOiB0cnVlLCB3YXJuaW5nczogW10sIGVzdGltYXRlZFRpbWU6ICcxLTIgbWludXRlcycgfTtcclxuICAgICAgaWYgKG9yaWdpbmFsTmFtZS50b0xvd2VyQ2FzZSgpLmVuZHNXaXRoKCcuemlwJykpIHtcclxuICAgICAgICBjb25zdCBpc1ZhbGlkWmlwID0gYXdhaXQgdmFsaWRhdGVaaXAodGVtcFBhdGgpO1xyXG4gICAgICAgIGlmICghaXNWYWxpZFppcCkge1xyXG4gICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgZXJyb3I6ICdJbnZhbGlkIFpJUCBmaWxlJyB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHppcEluZm8gPSBhd2FpdCBnZXRaaXBJbmZvKHRlbXBQYXRoKTtcclxuICAgICAgICBmZWFzaWJpbGl0eSA9IGNoZWNrQW5hbHlzaXNGZWFzaWJpbGl0eSh6aXBJbmZvLnRvdGFsRmlsZXMsIHppcEluZm8udG90YWxTaXplKTtcclxuICAgICAgICBpZiAoIWZlYXNpYmlsaXR5LmZlYXNpYmxlKSB7XHJcbiAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBcclxuICAgICAgICAgICAgZXJyb3I6ICdBbmFseXNpcyBub3QgZmVhc2libGUnLFxyXG4gICAgICAgICAgICB3YXJuaW5nczogZmVhc2liaWxpdHkud2FybmluZ3MsXHJcbiAgICAgICAgICAgIGRldGFpbHM6IHtcclxuICAgICAgICAgICAgICB0b3RhbEZpbGVzOiB6aXBJbmZvLnRvdGFsRmlsZXMsXHJcbiAgICAgICAgICAgICAgdG90YWxTaXplOiB6aXBJbmZvLnRvdGFsU2l6ZSxcclxuICAgICAgICAgICAgICBlc3RpbWF0ZWRUaW1lOiBmZWFzaWJpbGl0eS5lc3RpbWF0ZWRUaW1lLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFJ1biBhbmFseXNpc1xyXG4gICAgICBjb25zb2xlLmxvZygnU3RhcnRpbmcgYW5hbHlzaXMgZm9yOicsIG9yaWdpbmFsTmFtZSk7XHJcbiAgICAgIGNvbnN0IGFuYWx5c2lzT3B0aW9ucyA9IHZhbGlkYXRlQW5hbHlzaXNPcHRpb25zKHtcclxuICAgICAgICBtYXhGaWxlczogNTAwMDAsXHJcbiAgICAgICAgbWF4RmlsZVNpemU6IDIgKiAxMDI0ICogMTAyNCwgLy8gMk1CXHJcbiAgICAgICAgc3RvcmVSZXN1bHRzOiB0cnVlLFxyXG4gICAgICAgIHB1YmxpY1VybDogcHJvY2Vzcy5lbnYuUFVCTElDX1VSTCB8fCAnaHR0cDovL2xvY2FsaG9zdDozMDAwJyxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBjb25zb2xlLmxvZygnQW5hbHlzaXMgb3B0aW9uczonLCBhbmFseXNpc09wdGlvbnMpO1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBydW5CYXNlbGluZUFuYWx5c2lzKHRlbXBQYXRoLCBhbmFseXNpc09wdGlvbnMpO1xyXG4gICAgICBjb25zb2xlLmxvZygnQW5hbHlzaXMgY29tcGxldGVkIHN1Y2Nlc3NmdWxseScpO1xyXG5cclxuICAgICAgaWYgKCFyZXN1bHQuYXJ0aWZhY3RzKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gc3RvcmUgYW5hbHlzaXMgcmVzdWx0cycpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDcmVhdGUgcmVzcG9uc2VcclxuICAgICAgY29uc3QgcmVzcG9uc2U6IEFuYWx5emVSZXNwb25zZSA9IHtcclxuICAgICAgICBhbmFseXNpc0lkOiByZXN1bHQuYXJ0aWZhY3RzLmFuYWx5c2lzSWQsXHJcbiAgICAgICAgc3VtbWFyeTogcmVzdWx0LnJlcG9ydC5zdW1tYXJ5LFxyXG4gICAgICAgIGFydGlmYWN0czoge1xyXG4gICAgICAgICAganNvblVybDogcmVzdWx0LmFydGlmYWN0cy5qc29uVXJsLFxyXG4gICAgICAgICAgY3N2VXJsOiByZXN1bHQuYXJ0aWZhY3RzLmNzdlVybCxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlcG9ydDogcmVzdWx0LnJlcG9ydCwgLy8gSW5jbHVkZSBmdWxsIHJlcG9ydCBmb3IgR3JvcSBhbmFseXNpc1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHJlc3BvbnNlKTtcclxuXHJcbiAgICB9IGZpbmFsbHkge1xyXG4gICAgICAvLyBDbGVhbiB1cCB0ZW1wb3JhcnkgZmlsZVxyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGF3YWl0IGZzLnVubGluayh0ZW1wUGF0aCk7XHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKGBGYWlsZWQgdG8gY2xlYW51cCB0ZW1wIGZpbGUgJHt0ZW1wUGF0aH06ICR7ZXJyb3J9YCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0FuYWx5c2lzIEFQSSBlcnJvcjonLCBlcnJvcik7XHJcbiAgICBcclxuICAgIC8vIENsZWFuIHVwIHRlbXBvcmFyeSBmaWxlIG9uIGVycm9yXHJcbiAgICB0cnkge1xyXG4gICAgICBpZiAodHlwZW9mIHRlbXBQYXRoICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIGF3YWl0IGZzLnVubGluayh0ZW1wUGF0aCk7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGNsZWFudXBFcnJvcikge1xyXG4gICAgICBjb25zb2xlLndhcm4oYEZhaWxlZCB0byBjbGVhbnVwIHRlbXAgZmlsZSBvbiBlcnJvcjogJHtjbGVhbnVwRXJyb3J9YCk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IFxyXG4gICAgICBlcnJvcjogJ0FuYWx5c2lzIGZhaWxlZCcsXHJcbiAgICAgIG1lc3NhZ2U6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InLFxyXG4gICAgICBkZXRhaWxzOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3Iuc3RhY2sgOiB1bmRlZmluZWRcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOlsiZm9ybWlkYWJsZSIsInByb21pc2VzIiwiZnMiLCJwYXRoIiwicmFuZG9tVVVJRCIsInJ1bkJhc2VsaW5lQW5hbHlzaXMiLCJ2YWxpZGF0ZUFuYWx5c2lzT3B0aW9ucyIsImNoZWNrQW5hbHlzaXNGZWFzaWJpbGl0eSIsInZhbGlkYXRlWmlwIiwiZ2V0WmlwSW5mbyIsInNob3VsZEFuYWx5emVGaWxlIiwiY29uZmlnIiwiYXBpIiwiYm9keVBhcnNlciIsImhhbmRsZXIiLCJyZXEiLCJyZXMiLCJjb25zb2xlIiwibG9nIiwibWV0aG9kIiwic3RhdHVzIiwianNvbiIsImVycm9yIiwidGVtcFBhdGgiLCJmb3JtIiwibWF4RmlsZVNpemUiLCJmaWx0ZXIiLCJtaW1ldHlwZSIsIm9yaWdpbmFsRmlsZW5hbWUiLCJmaWVsZHMiLCJmaWxlcyIsInBhcnNlIiwiT2JqZWN0Iiwia2V5cyIsImZpbGUiLCJBcnJheSIsImlzQXJyYXkiLCJkZWJ1ZyIsImZpZWxkc0tleXMiLCJmaWxlc0tleXMiLCJmaWxlc0NvbnRlbnQiLCJzaXplIiwiZmlsZXBhdGgiLCJ0ZW1wRGlyIiwiam9pbiIsInByb2Nlc3MiLCJjd2QiLCJta2RpciIsInJlY3Vyc2l2ZSIsImFuYWx5c2lzSWQiLCJvcmlnaW5hbE5hbWUiLCJjb3B5RmlsZSIsImRldGFpbHMiLCJmaWxlbmFtZSIsInN0YXRzIiwic3RhdCIsIm1heFNpemUiLCJmZWFzaWJpbGl0eSIsImZlYXNpYmxlIiwid2FybmluZ3MiLCJlc3RpbWF0ZWRUaW1lIiwidG9Mb3dlckNhc2UiLCJlbmRzV2l0aCIsImlzVmFsaWRaaXAiLCJ6aXBJbmZvIiwidG90YWxGaWxlcyIsInRvdGFsU2l6ZSIsImFuYWx5c2lzT3B0aW9ucyIsIm1heEZpbGVzIiwic3RvcmVSZXN1bHRzIiwicHVibGljVXJsIiwiZW52IiwiUFVCTElDX1VSTCIsInJlc3VsdCIsImFydGlmYWN0cyIsIkVycm9yIiwicmVzcG9uc2UiLCJzdW1tYXJ5IiwicmVwb3J0IiwianNvblVybCIsImNzdlVybCIsInVubGluayIsIndhcm4iLCJjbGVhbnVwRXJyb3IiLCJtZXNzYWdlIiwic3RhY2siLCJ1bmRlZmluZWQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/analyze.ts\n");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "formidable":
/*!*****************************!*\
  !*** external "formidable" ***!
  \*****************************/
/***/ ((module) => {

module.exports = import("formidable");;

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "papaparse":
/*!****************************!*\
  !*** external "papaparse" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("papaparse");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "semver":
/*!*************************!*\
  !*** external "semver" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("semver");

/***/ }),

/***/ "stream/promises":
/*!**********************************!*\
  !*** external "stream/promises" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("stream/promises");

/***/ }),

/***/ "unzipper":
/*!***************************!*\
  !*** external "unzipper" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("unzipper");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "yaml":
/*!***********************!*\
  !*** external "yaml" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("yaml");

/***/ }),

/***/ "zod":
/*!**********************!*\
  !*** external "zod" ***!
  \**********************/
/***/ ((module) => {

module.exports = import("zod");;

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fanalyze&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Canalyze.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();