/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/analyze/route";
exports.ids = ["app/api/analyze/route"];
exports.modules = {

/***/ "(rsc)/./app/api/analyze/route.ts":
/*!**********************************!*\
  !*** ./app/api/analyze/route.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   dynamic: () => (/* binding */ dynamic),\n/* harmony export */   runtime: () => (/* binding */ runtime)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _lib_analysis_run__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../lib/analysis/run */ \"(rsc)/./lib/analysis/run.ts\");\n/* harmony import */ var _lib_files_single_file__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../lib/files/single-file */ \"(rsc)/./lib/files/single-file.ts\");\n\n\n\n\n\n// ZIP imports removed as per new requirements\n\nconst runtime = \"nodejs\";\nconst dynamic = \"force-dynamic\";\nasync function POST(request) {\n    console.log('Analyze API called with method: POST');\n    let tempPath;\n    try {\n        // Parse form data using Next.js built-in FormData\n        const formData = await request.formData();\n        const file = formData.get('file');\n        if (!file) {\n            console.error('No file found in request');\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'No file provided'\n            }, {\n                status: 400\n            });\n        }\n        console.log('File found:', {\n            name: file.name,\n            type: file.type,\n            size: file.size\n        });\n        // Create temporary directory - use /tmp for Vercel serverless\n        const tempDir = process.env.VERCEL ? '/tmp/analyzer' : path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), 'tmp', 'analyzer');\n        await fs__WEBPACK_IMPORTED_MODULE_1__.promises.mkdir(tempDir, {\n            recursive: true\n        });\n        // Save uploaded file\n        const analysisId = (0,crypto__WEBPACK_IMPORTED_MODULE_3__.randomUUID)();\n        const originalName = file.name || 'uploaded-file';\n        tempPath = path__WEBPACK_IMPORTED_MODULE_2___default().join(tempDir, `${analysisId}-${originalName}`);\n        // Convert File to Buffer and write to disk\n        const bytes = await file.arrayBuffer();\n        const buffer = Buffer.from(bytes);\n        await fs__WEBPACK_IMPORTED_MODULE_1__.promises.writeFile(tempPath, buffer);\n        console.log('File saved successfully');\n        try {\n            // Check if file should be analyzed (early exit for unsupported types)\n            if (!(0,_lib_files_single_file__WEBPACK_IMPORTED_MODULE_5__.shouldAnalyzeFile)(originalName)) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'File type not supported for analysis',\n                    details: {\n                        filename: originalName\n                    }\n                }, {\n                    status: 400\n                });\n            }\n            // Check file size\n            const stats = await fs__WEBPACK_IMPORTED_MODULE_1__.promises.stat(tempPath);\n            if (stats.size > 200 * 1024 * 1024) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'File too large',\n                    details: {\n                        size: stats.size,\n                        maxSize: 200 * 1024 * 1024\n                    }\n                }, {\n                    status: 400\n                });\n            }\n            // Run analysis\n            console.log('Starting analysis for:', originalName);\n            const analysisOptions = (0,_lib_analysis_run__WEBPACK_IMPORTED_MODULE_4__.validateAnalysisOptions)({\n                maxFiles: 50000,\n                maxFileSize: 2 * 1024 * 1024,\n                allowedExtensions: [\n                    '.html',\n                    '.htm',\n                    '.css',\n                    '.js',\n                    '.mjs',\n                    '.ts',\n                    '.svg',\n                    '.wasm',\n                    '.json',\n                    '.webmanifest'\n                ],\n                storeResults: true,\n                publicUrl: process.env.PUBLIC_URL || 'http://localhost:3000'\n            });\n            console.log('Analysis options:', analysisOptions);\n            const result = await (0,_lib_analysis_run__WEBPACK_IMPORTED_MODULE_4__.runBaselineAnalysis)(tempPath, analysisOptions);\n            console.log('Analysis completed successfully');\n            if (!result.artifacts) {\n                throw new Error('Failed to store analysis results');\n            }\n            // Create response\n            const response = {\n                analysisId: result.artifacts.analysisId,\n                summary: result.report.summary,\n                artifacts: {\n                    jsonUrl: result.artifacts.jsonUrl,\n                    csvUrl: result.artifacts.csvUrl\n                },\n                report: result.report\n            };\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response);\n        } finally{\n            // Clean up temporary file\n            try {\n                await fs__WEBPACK_IMPORTED_MODULE_1__.promises.unlink(tempPath);\n            } catch (error) {\n                console.warn(`Failed to cleanup temp file ${tempPath}: ${error}`);\n            }\n        }\n    } catch (error) {\n        console.error('Analysis API error:', error);\n        // Clean up temporary file on error\n        try {\n            if (typeof tempPath !== 'undefined') {\n                await fs__WEBPACK_IMPORTED_MODULE_1__.promises.unlink(tempPath);\n            }\n        } catch (cleanupError) {\n            console.warn(`Failed to cleanup temp file on error: ${cleanupError}`);\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Analysis failed',\n            message: error instanceof Error ? error.message : 'Unknown error',\n            details: error instanceof Error ? error.stack : undefined\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/analyze/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/analysis/baseline.loader.ts":
/*!*****************************************!*\
  !*** ./lib/analysis/baseline.loader.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearRulesCache: () => (/* binding */ clearRulesCache),\n/* harmony export */   getCachedBaselineRules: () => (/* binding */ getCachedBaselineRules),\n/* harmony export */   getDefaultBaselineRules: () => (/* binding */ getDefaultBaselineRules),\n/* harmony export */   getDependencyUpgradeTemplate: () => (/* binding */ getDependencyUpgradeTemplate),\n/* harmony export */   getLanguageRules: () => (/* binding */ getLanguageRules),\n/* harmony export */   getPatternQuickFix: () => (/* binding */ getPatternQuickFix),\n/* harmony export */   isRulesCacheValid: () => (/* binding */ isRulesCacheValid),\n/* harmony export */   loadBaselineRules: () => (/* binding */ loadBaselineRules),\n/* harmony export */   loadBaselineRulesWithFallback: () => (/* binding */ loadBaselineRulesWithFallback),\n/* harmony export */   shouldIgnorePath: () => (/* binding */ shouldIgnorePath),\n/* harmony export */   shouldScanFile: () => (/* binding */ shouldScanFile),\n/* harmony export */   validateRulesStructure: () => (/* binding */ validateRulesStructure)\n/* harmony export */ });\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var yaml__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! yaml */ \"(rsc)/./node_modules/yaml/dist/index.js\");\n/* harmony import */ var _baseline_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./baseline.types */ \"(rsc)/./lib/analysis/baseline.types.ts\");\n// readFileSync imported dynamically\n\n\n\n// Use process.cwd() for Node.js environment\n// Cache for loaded rules\nlet rulesCache = null;\nlet rulesCacheTimestamp = 0;\n/**\r\n * Load baseline rules from YAML configuration file\r\n * @param configPath Optional path to config file, defaults to config/baseline.rules.yaml\r\n * @returns Parsed and validated baseline rules\r\n */ async function loadBaselineRules(configPath) {\n    const defaultPath = (0,path__WEBPACK_IMPORTED_MODULE_0__.join)(process.cwd(), 'config', 'baseline.rules.yaml');\n    const path = configPath || defaultPath;\n    try {\n        // Check if we have cached rules and they're still valid\n        const { statSync } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 23));\n        const stats = statSync(path);\n        const mtime = stats.mtime.getTime();\n        if (rulesCache && mtime <= rulesCacheTimestamp) {\n            return rulesCache;\n        }\n        // Read and parse YAML file\n        const { readFileSync } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 23));\n        const yamlContent = readFileSync(path, 'utf8');\n        const rawRules = yaml__WEBPACK_IMPORTED_MODULE_1__.parse(yamlContent);\n        // Validate and parse rules\n        const rules = (0,_baseline_types__WEBPACK_IMPORTED_MODULE_2__.validateBaselineRules)(rawRules);\n        // Update cache\n        rulesCache = rules;\n        rulesCacheTimestamp = mtime;\n        return rules;\n    } catch (error) {\n        throw new Error(`Failed to load baseline rules from ${path}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n}\n/**\r\n * Get cached baseline rules without file system access\r\n * @returns Cached rules or throws if not loaded\r\n */ function getCachedBaselineRules() {\n    if (!rulesCache) {\n        throw new Error('Baseline rules not loaded. Call loadBaselineRules() first.');\n    }\n    return rulesCache;\n}\n/**\r\n * Clear the rules cache (useful for testing)\r\n */ function clearRulesCache() {\n    rulesCache = null;\n    rulesCacheTimestamp = 0;\n}\n/**\r\n * Check if rules are cached and up to date\r\n * @param configPath Optional path to config file\r\n * @returns True if cached rules are valid\r\n */ async function isRulesCacheValid(configPath) {\n    if (!rulesCache) return false;\n    try {\n        const defaultPath = (0,path__WEBPACK_IMPORTED_MODULE_0__.join)(process.cwd(), 'config', 'baseline.rules.yaml');\n        const path = configPath || defaultPath;\n        const { statSync } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 23));\n        const stats = statSync(path);\n        const mtime = stats.mtime.getTime();\n        return mtime <= rulesCacheTimestamp;\n    } catch  {\n        return false;\n    }\n}\n/**\r\n * Get default baseline rules (fallback if file loading fails)\r\n * @returns Minimal default rules\r\n */ function getDefaultBaselineRules() {\n    return {\n        language_runtimes: {\n            node: '>=18.0.0',\n            python: '>=3.10.0',\n            java: '>=17.0.0',\n            go: '>=1.21.0',\n            dotnet: '>=6.0.0'\n        },\n        package_mins: {\n            node: {\n                react: '>=18.0.0',\n                next: '>=13.0.0',\n                express: '>=4.18.0'\n            },\n            python: {\n                numpy: '>=1.22.0',\n                pandas: '>=1.4.0',\n                torch: '>=2.0.0'\n            },\n            java: {},\n            go: {},\n            dotnet: {}\n        },\n        deprecated_patterns: {\n            node: [\n                {\n                    pattern: 'fs\\\\.exists\\\\(',\n                    message: 'fs.exists() is deprecated, use fs.access() or fs.stat()',\n                    alternative: 'Use fs.access() or fs.promises.access()'\n                }\n            ],\n            python: [\n                {\n                    pattern: 'numpy\\\\.asscalar',\n                    message: 'numpy.asscalar is deprecated, use item() instead',\n                    alternative: 'Use numpy.item() or direct array indexing'\n                }\n            ],\n            java: [],\n            go: [],\n            dotnet: []\n        },\n        scan_file_exts: [\n            '.py',\n            '.js',\n            '.ts',\n            '.tsx',\n            '.jsx',\n            '.java',\n            '.go',\n            '.cs'\n        ],\n        ignore_paths: [\n            '/node_modules/',\n            '/.venv/',\n            '/venv/',\n            '/dist/',\n            '/build/',\n            '/.git/'\n        ],\n        max_file_size: 2097152,\n        max_files: 50000,\n        quick_fixes: {\n            dependency_upgrade: {\n                node: 'npm install {package}@{version}',\n                python: 'pip install \\'{package}>={version}\\'',\n                java: 'Update {package} to version {version} in pom.xml or build.gradle',\n                go: 'go get {package}@{version}',\n                dotnet: 'dotnet add package {package} --version {version}'\n            },\n            pattern_replacement: {\n                node: {\n                    'fs.exists(': 'Use fs.access() or fs.promises.access()'\n                },\n                python: {\n                    'numpy.asscalar': 'Use .item() method instead'\n                },\n                java: {},\n                go: {},\n                dotnet: {}\n            }\n        }\n    };\n}\n/**\r\n * Load baseline rules with fallback to defaults\r\n * @param configPath Optional path to config file\r\n * @returns Baseline rules (loaded or default)\r\n */ async function loadBaselineRulesWithFallback(configPath) {\n    try {\n        return await loadBaselineRules(configPath);\n    } catch (error) {\n        console.warn(`Failed to load baseline rules: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        console.warn('Using default baseline rules');\n        return getDefaultBaselineRules();\n    }\n}\n/**\r\n * Validate that a rules object has all required fields\r\n * @param rules Rules object to validate\r\n * @returns True if valid\r\n */ async function validateRulesStructure(rules) {\n    try {\n        (0,_baseline_types__WEBPACK_IMPORTED_MODULE_2__.validateBaselineRules)(rules);\n        return true;\n    } catch  {\n        return false;\n    }\n}\n/**\r\n * Get rules for a specific language\r\n * @param rules Baseline rules\r\n * @param language Language to get rules for\r\n * @returns Rules specific to the language\r\n */ function getLanguageRules(rules, language) {\n    return {\n        packageMins: rules.package_mins[language] || {},\n        deprecatedPatterns: rules.deprecated_patterns[language] || [],\n        runtime: rules.language_runtimes[language]\n    };\n}\n/**\r\n * Check if a file extension should be scanned\r\n * @param rules Baseline rules\r\n * @param extension File extension (with or without dot)\r\n * @returns True if should be scanned\r\n */ function shouldScanFile(rules, extension) {\n    const ext = extension.startsWith('.') ? extension : `.${extension}`;\n    return rules.scan_file_exts.includes(ext);\n}\n/**\r\n * Check if a path should be ignored\r\n * @param rules Baseline rules\r\n * @param filePath File path to check\r\n * @returns True if should be ignored\r\n */ function shouldIgnorePath(rules, filePath) {\n    if (!filePath || !rules.ignore_paths) {\n        return false;\n    }\n    return rules.ignore_paths.some((ignorePath)=>filePath.includes(ignorePath) || filePath.startsWith(ignorePath));\n}\n/**\r\n * Get quick fix template for dependency upgrade\r\n * @param rules Baseline rules\r\n * @param language Language\r\n * @returns Template string\r\n */ function getDependencyUpgradeTemplate(rules, language) {\n    return rules.quick_fixes.dependency_upgrade[language] || 'Update {package} to {version}';\n}\n/**\r\n * Get quick fix for pattern replacement\r\n * @param rules Baseline rules\r\n * @param language Language\r\n * @param pattern Pattern to replace\r\n * @returns Quick fix suggestion or undefined\r\n */ function getPatternQuickFix(rules, language, pattern) {\n    return rules.quick_fixes.pattern_replacement[language]?.[pattern];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/analysis/baseline.loader.ts\n");

/***/ }),

/***/ "(rsc)/./lib/analysis/baseline.types.ts":
/*!****************************************!*\
  !*** ./lib/analysis/baseline.types.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnalysisContextSchema: () => (/* binding */ AnalysisContextSchema),\n/* harmony export */   AnalysisErrorSchema: () => (/* binding */ AnalysisErrorSchema),\n/* harmony export */   AnalyzeResponseSchema: () => (/* binding */ AnalyzeResponseSchema),\n/* harmony export */   BaselineRulesSchema: () => (/* binding */ BaselineRulesSchema),\n/* harmony export */   DependencyFindingSchema: () => (/* binding */ DependencyFindingSchema),\n/* harmony export */   DeprecatedPatternSchema: () => (/* binding */ DeprecatedPatternSchema),\n/* harmony export */   ExtractedFileSchema: () => (/* binding */ ExtractedFileSchema),\n/* harmony export */   FindingSchema: () => (/* binding */ FindingSchema),\n/* harmony export */   LanguageRuntimesSchema: () => (/* binding */ LanguageRuntimesSchema),\n/* harmony export */   LanguageSchema: () => (/* binding */ LanguageSchema),\n/* harmony export */   LanguageSummarySchema: () => (/* binding */ LanguageSummarySchema),\n/* harmony export */   PackageMinsSchema: () => (/* binding */ PackageMinsSchema),\n/* harmony export */   PatternFindingSchema: () => (/* binding */ PatternFindingSchema),\n/* harmony export */   ProjectManifestSchema: () => (/* binding */ ProjectManifestSchema),\n/* harmony export */   QuickFixesSchema: () => (/* binding */ QuickFixesSchema),\n/* harmony export */   ReportSchema: () => (/* binding */ ReportSchema),\n/* harmony export */   ReportSummarySchema: () => (/* binding */ ReportSummarySchema),\n/* harmony export */   StatusSchema: () => (/* binding */ StatusSchema),\n/* harmony export */   getStatusBadgeClass: () => (/* binding */ getStatusBadgeClass),\n/* harmony export */   getStatusColor: () => (/* binding */ getStatusColor),\n/* harmony export */   getStatusIcon: () => (/* binding */ getStatusIcon),\n/* harmony export */   isDependencyFinding: () => (/* binding */ isDependencyFinding),\n/* harmony export */   isPatternFinding: () => (/* binding */ isPatternFinding),\n/* harmony export */   validateAnalyzeResponse: () => (/* binding */ validateAnalyzeResponse),\n/* harmony export */   validateBaselineRules: () => (/* binding */ validateBaselineRules),\n/* harmony export */   validateFinding: () => (/* binding */ validateFinding),\n/* harmony export */   validateReport: () => (/* binding */ validateReport)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n\n// Language types\nconst LanguageSchema = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n    'python',\n    'node',\n    'java',\n    'go',\n    'dotnet'\n]);\n// Status types\nconst StatusSchema = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n    'ok',\n    'affected',\n    'unknown'\n]);\n// Finding types\nconst DependencyFindingSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    kind: zod__WEBPACK_IMPORTED_MODULE_0__.literal('dependency'),\n    lang: LanguageSchema,\n    component: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    foundVersion: zod__WEBPACK_IMPORTED_MODULE_0__.string().nullable(),\n    baselineRequired: zod__WEBPACK_IMPORTED_MODULE_0__.string().nullable(),\n    status: StatusSchema,\n    reason: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    file: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    quickFix: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\nconst PatternFindingSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    kind: zod__WEBPACK_IMPORTED_MODULE_0__.literal('pattern'),\n    lang: LanguageSchema,\n    file: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    line: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n    status: zod__WEBPACK_IMPORTED_MODULE_0__.literal('affected'),\n    reason: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'deprecated-api',\n        'code-quality',\n        'security',\n        'performance'\n    ]),\n    issue: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    pattern: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    quickFix: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\nconst FindingSchema = zod__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion('kind', [\n    DependencyFindingSchema,\n    PatternFindingSchema\n]);\n// Summary types\nconst LanguageSummarySchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    ok: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n    affected: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n    unknown: zod__WEBPACK_IMPORTED_MODULE_0__.number()\n});\nconst ReportSummarySchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    ok: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n    affected: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n    unknown: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n    byLanguage: zod__WEBPACK_IMPORTED_MODULE_0__.record(LanguageSchema, LanguageSummarySchema)\n});\n// Report type\nconst ReportSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    findings: zod__WEBPACK_IMPORTED_MODULE_0__.array(FindingSchema),\n    summary: ReportSummarySchema,\n    metadata: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        analysisId: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        projectName: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n        detectedLanguages: zod__WEBPACK_IMPORTED_MODULE_0__.array(LanguageSchema),\n        totalFiles: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n        scannedFiles: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n        skippedFiles: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n        groqAnalysis: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.object({\n            analysis: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            filename: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n        })).optional()\n    })\n});\n// Rules configuration types\nconst DeprecatedPatternSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    pattern: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    message: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    alternative: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nconst PackageMinsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.record(LanguageSchema, zod__WEBPACK_IMPORTED_MODULE_0__.record(zod__WEBPACK_IMPORTED_MODULE_0__.string(), zod__WEBPACK_IMPORTED_MODULE_0__.string()));\nconst LanguageRuntimesSchema = zod__WEBPACK_IMPORTED_MODULE_0__.record(LanguageSchema, zod__WEBPACK_IMPORTED_MODULE_0__.string());\nconst QuickFixesSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    dependency_upgrade: zod__WEBPACK_IMPORTED_MODULE_0__.record(LanguageSchema, zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    pattern_replacement: zod__WEBPACK_IMPORTED_MODULE_0__.record(LanguageSchema, zod__WEBPACK_IMPORTED_MODULE_0__.record(zod__WEBPACK_IMPORTED_MODULE_0__.string(), zod__WEBPACK_IMPORTED_MODULE_0__.string()))\n});\nconst BaselineRulesSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    language_runtimes: LanguageRuntimesSchema,\n    package_mins: PackageMinsSchema,\n    deprecated_patterns: zod__WEBPACK_IMPORTED_MODULE_0__.record(LanguageSchema, zod__WEBPACK_IMPORTED_MODULE_0__.array(DeprecatedPatternSchema)),\n    scan_file_exts: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    ignore_paths: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    max_file_size: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n    max_files: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n    quick_fixes: QuickFixesSchema\n});\n// API types\nconst AnalyzeResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    analysisId: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    summary: ReportSummarySchema,\n    artifacts: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        jsonUrl: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        csvUrl: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n    }),\n    report: ReportSchema.optional()\n});\n// Project detection types\nconst ProjectManifestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    language: LanguageSchema,\n    file: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    dependencies: zod__WEBPACK_IMPORTED_MODULE_0__.record(zod__WEBPACK_IMPORTED_MODULE_0__.string(), zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    devDependencies: zod__WEBPACK_IMPORTED_MODULE_0__.record(zod__WEBPACK_IMPORTED_MODULE_0__.string(), zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    peerDependencies: zod__WEBPACK_IMPORTED_MODULE_0__.record(zod__WEBPACK_IMPORTED_MODULE_0__.string(), zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    optionalDependencies: zod__WEBPACK_IMPORTED_MODULE_0__.record(zod__WEBPACK_IMPORTED_MODULE_0__.string(), zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional()\n});\n// File processing types\nconst ExtractedFileSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    path: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    content: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    size: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n    language: LanguageSchema.optional()\n});\n// Analysis context types\nconst AnalysisContextSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    rules: BaselineRulesSchema,\n    extractedFiles: zod__WEBPACK_IMPORTED_MODULE_0__.array(ExtractedFileSchema),\n    manifests: zod__WEBPACK_IMPORTED_MODULE_0__.array(ProjectManifestSchema),\n    detectedLanguages: zod__WEBPACK_IMPORTED_MODULE_0__.array(LanguageSchema)\n});\n// Error types\nconst AnalysisErrorSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    code: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    message: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    details: zod__WEBPACK_IMPORTED_MODULE_0__.any().optional()\n});\n// Validation helpers\nfunction validateFinding(finding) {\n    return FindingSchema.parse(finding);\n}\nfunction validateReport(report) {\n    return ReportSchema.parse(report);\n}\nfunction validateBaselineRules(rules) {\n    return BaselineRulesSchema.parse(rules);\n}\nfunction validateAnalyzeResponse(response) {\n    return AnalyzeResponseSchema.parse(response);\n}\n// Type guards\nfunction isDependencyFinding(finding) {\n    return finding.kind === 'dependency';\n}\nfunction isPatternFinding(finding) {\n    return finding.kind === 'pattern';\n}\n// Status helpers\nfunction getStatusIcon(status) {\n    switch(status){\n        case 'ok':\n            return '✅';\n        case 'affected':\n            return '⚠️';\n        case 'unknown':\n            return '❓';\n        default:\n            return '❓';\n    }\n}\nfunction getStatusColor(status) {\n    switch(status){\n        case 'ok':\n            return 'text-green-600';\n        case 'affected':\n            return 'text-yellow-600';\n        case 'unknown':\n            return 'text-gray-600';\n        default:\n            return 'text-gray-600';\n    }\n}\nfunction getStatusBadgeClass(status) {\n    switch(status){\n        case 'ok':\n            return 'bg-green-100 text-green-800';\n        case 'affected':\n            return 'bg-yellow-100 text-yellow-800';\n        case 'unknown':\n            return 'bg-gray-100 text-gray-800';\n        default:\n            return 'bg-gray-100 text-gray-800';\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/analysis/baseline.types.ts\n");

/***/ }),

/***/ "(rsc)/./lib/analysis/compare.ts":
/*!*********************************!*\
  !*** ./lib/analysis/compare.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compareVersions: () => (/* binding */ compareVersions),\n/* harmony export */   getLatestStableVersion: () => (/* binding */ getLatestStableVersion),\n/* harmony export */   getVersionDifference: () => (/* binding */ getVersionDifference),\n/* harmony export */   isPreRelease: () => (/* binding */ isPreRelease),\n/* harmony export */   parseVersion: () => (/* binding */ parseVersion),\n/* harmony export */   satisfiesRequirement: () => (/* binding */ satisfiesRequirement)\n/* harmony export */ });\n/* harmony import */ var semver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! semver */ \"(rsc)/./node_modules/semver/index.js\");\n/* harmony import */ var semver__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(semver__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\r\n * Compare two version strings\r\n * @param version1 First version\r\n * @param version2 Second version (baseline)\r\n * @param language Language context for parsing\r\n * @returns Comparison result\r\n */ function compareVersions(version1, version2, language) {\n    try {\n        const v1 = parseVersion(version1, language);\n        const v2 = parseVersion(version2, language);\n        if (!v1 || !v2) {\n            return 'unknown';\n        }\n        // Use semver for Node.js packages\n        if (language === 'node') {\n            return compareWithSemver(v1, v2);\n        }\n        // Use custom comparison for other languages\n        return compareVersionsCustom(v1, v2, language);\n    } catch (error) {\n        console.warn(`Version comparison failed: ${error}`);\n        return 'unknown';\n    }\n}\n/**\r\n * Compare versions using semver (for Node.js)\r\n * @param version1 First version\r\n * @param version2 Second version\r\n * @returns Comparison result\r\n */ function compareWithSemver(version1, version2) {\n    try {\n        // Clean versions for semver\n        const v1 = cleanVersionForSemver(version1);\n        const v2 = cleanVersionForSemver(version2);\n        if (!semver__WEBPACK_IMPORTED_MODULE_0___default().valid(v1) || !semver__WEBPACK_IMPORTED_MODULE_0___default().valid(v2)) {\n            return 'unknown';\n        }\n        const result = semver__WEBPACK_IMPORTED_MODULE_0___default().compare(v1, v2);\n        if (result > 0) return 'greater';\n        if (result < 0) return 'less';\n        return 'equal';\n    } catch  {\n        return 'unknown';\n    }\n}\n/**\r\n * Clean version string for semver parsing\r\n * @param version Version string\r\n * @returns Cleaned version\r\n */ function cleanVersionForSemver(version) {\n    // Remove common prefixes and suffixes\n    let cleaned = version.replace(/^v/, '') // Remove v prefix\n    .replace(/^[~^>=<!=]+/, '') // Remove operators\n    .trim();\n    // Handle pre-release versions\n    if (cleaned.includes('-')) {\n        const parts = cleaned.split('-');\n        cleaned = parts[0];\n    }\n    // Handle build metadata\n    if (cleaned.includes('+')) {\n        const parts = cleaned.split('+');\n        cleaned = parts[0];\n    }\n    return cleaned;\n}\n/**\r\n * Custom version comparison for non-Node.js languages\r\n * @param version1 First version\r\n * @param version2 Second version\r\n * @param language Language context\r\n * @returns Comparison result\r\n */ function compareVersionsCustom(version1, version2, language) {\n    try {\n        const v1Parts = parseVersionParts(version1, language);\n        const v2Parts = parseVersionParts(version2, language);\n        if (!v1Parts || !v2Parts) {\n            return 'unknown';\n        }\n        // Compare major, minor, patch\n        for(let i = 0; i < Math.max(v1Parts.length, v2Parts.length); i++){\n            const v1Part = v1Parts[i] || 0;\n            const v2Part = v2Parts[i] || 0;\n            if (v1Part > v2Part) return 'greater';\n            if (v1Part < v2Part) return 'less';\n        }\n        return 'equal';\n    } catch  {\n        return 'unknown';\n    }\n}\n/**\r\n * Parse version into numeric parts\r\n * @param version Version string\r\n * @param language Language context\r\n * @returns Array of numeric parts\r\n */ function parseVersionParts(version, language) {\n    try {\n        // Clean version\n        let cleaned = version.replace(/^v/, '').replace(/^[~^>=<!=]+/, '').trim();\n        // Handle different version formats\n        if (language === 'python') {\n            // Python: 1.2.3, 1.2, 1.2.3a1, 1.2.3b1, 1.2.3rc1\n            cleaned = cleaned.replace(/[a-zA-Z].*$/, ''); // Remove pre-release info\n        } else if (language === 'java') {\n            // Java: 1.8.0, 11, 17.0.1\n            cleaned = cleaned.replace(/[a-zA-Z].*$/, ''); // Remove pre-release info\n        } else if (language === 'go') {\n            // Go: v1.21.0, 1.21.0\n            cleaned = cleaned.replace(/[a-zA-Z].*$/, ''); // Remove pre-release info\n        } else if (language === 'dotnet') {\n            // .NET: 6.0.0, 7.0.0-preview.1\n            cleaned = cleaned.replace(/[a-zA-Z].*$/, ''); // Remove pre-release info\n        }\n        // Split by dots and convert to numbers\n        const parts = cleaned.split('.').map((part)=>{\n            const num = parseInt(part, 10);\n            return isNaN(num) ? 0 : num;\n        });\n        return parts.length > 0 ? parts : null;\n    } catch  {\n        return null;\n    }\n}\n/**\r\n * Parse version string and extract version number\r\n * @param versionString Version string (may contain operators)\r\n * @param language Language context\r\n * @returns Clean version string\r\n */ function parseVersion(versionString, language) {\n    if (!versionString || versionString === '*') {\n        return '0.0.0';\n    }\n    // Remove common operators and prefixes\n    let clean = versionString.replace(/^[~^>=<!=]+/, '') // Remove operators\n    .replace(/^v/, '') // Remove v prefix\n    .trim();\n    // Handle special cases\n    if (clean === 'latest' || clean === '') {\n        return '0.0.0';\n    }\n    // Handle Python version specifiers\n    if (language === 'python') {\n        // Remove Python-specific operators\n        clean = clean.replace(/^[~=!<>]+/, '');\n    }\n    // Handle Go version suffixes\n    if (language === 'go') {\n        // Remove +incompatible, +incompatible.20210101, etc.\n        clean = clean.replace(/\\+.*$/, '');\n    }\n    // Handle Java version ranges\n    if (language === 'java') {\n        // Extract version from ranges like [1.0,2.0) or (1.0,2.0]\n        const rangeMatch = clean.match(/[[(]([^,]+),/);\n        if (rangeMatch) {\n            clean = rangeMatch[1];\n        }\n    }\n    return clean;\n}\n/**\r\n * Check if a version satisfies a requirement\r\n * @param version Version to check\r\n * @param requirement Requirement (e.g., \">=1.0.0\", \"~1.2.3\")\r\n * @param language Language context\r\n * @returns True if version satisfies requirement\r\n */ function satisfiesRequirement(version, requirement, language) {\n    try {\n        if (language === 'node') {\n            // Use semver for Node.js\n            const cleanVersion = cleanVersionForSemver(version);\n            if (!semver__WEBPACK_IMPORTED_MODULE_0___default().valid(cleanVersion)) return false;\n            return semver__WEBPACK_IMPORTED_MODULE_0___default().satisfies(cleanVersion, requirement);\n        }\n        // Custom logic for other languages\n        return satisfiesRequirementCustom(version, requirement, language);\n    } catch  {\n        return false;\n    }\n}\n/**\r\n * Custom requirement satisfaction check\r\n * @param version Version to check\r\n * @param requirement Requirement\r\n * @param language Language context\r\n * @returns True if version satisfies requirement\r\n */ function satisfiesRequirementCustom(version, requirement, language) {\n    try {\n        const cleanVersion = parseVersion(version, language);\n        const cleanRequirement = parseVersion(requirement, language);\n        if (!cleanVersion || !cleanRequirement) return false;\n        // Extract operator from requirement\n        const operatorMatch = requirement.match(/^([~^>=<!=]+)/);\n        const operator = operatorMatch ? operatorMatch[1] : '>=';\n        const comparison = compareVersions(cleanVersion, cleanRequirement, language);\n        switch(operator){\n            case '>=':\n                return comparison === 'greater' || comparison === 'equal';\n            case '>':\n                return comparison === 'greater';\n            case '<=':\n                return comparison === 'less' || comparison === 'equal';\n            case '<':\n                return comparison === 'less';\n            case '=':\n            case '==':\n                return comparison === 'equal';\n            case '~':\n                // Tilde: allow patch-level changes\n                return satisfiesTilde(cleanVersion, cleanRequirement, language);\n            case '^':\n                // Caret: allow minor-level changes\n                return satisfiesCaret(cleanVersion, cleanRequirement, language);\n            default:\n                return comparison === 'equal';\n        }\n    } catch  {\n        return false;\n    }\n}\n/**\r\n * Check if version satisfies tilde requirement\r\n * @param version Version to check\r\n * @param requirement Requirement\r\n * @param language Language context\r\n * @returns True if satisfies\r\n */ function satisfiesTilde(version, requirement, language) {\n    const vParts = parseVersionParts(version, language);\n    const rParts = parseVersionParts(requirement, language);\n    if (!vParts || !rParts) return false;\n    // Major and minor must match, patch can be higher\n    if (vParts[0] !== rParts[0]) return false;\n    if (vParts[1] !== rParts[1]) return false;\n    return vParts[2] >= (rParts[2] || 0);\n}\n/**\r\n * Check if version satisfies caret requirement\r\n * @param version Version to check\r\n * @param requirement Requirement\r\n * @param language Language context\r\n * @returns True if satisfies\r\n */ function satisfiesCaret(version, requirement, language) {\n    const vParts = parseVersionParts(version, language);\n    const rParts = parseVersionParts(requirement, language);\n    if (!vParts || !rParts) return false;\n    // Major must match, minor and patch can be higher\n    if (vParts[0] !== rParts[0]) return false;\n    return vParts[1] > (rParts[1] || 0) || vParts[1] === (rParts[1] || 0) && vParts[2] >= (rParts[2] || 0);\n}\n/**\r\n * Get version difference description\r\n * @param version1 First version\r\n * @param version2 Second version\r\n * @param language Language context\r\n * @returns Description of difference\r\n */ function getVersionDifference(version1, version2, language) {\n    const comparison = compareVersions(version1, version2, language);\n    switch(comparison){\n        case 'greater':\n            return `${version1} is newer than ${version2}`;\n        case 'less':\n            return `${version1} is older than ${version2}`;\n        case 'equal':\n            return `${version1} matches ${version2}`;\n        case 'unknown':\n            return `Cannot compare ${version1} with ${version2}`;\n        default:\n            return 'Unknown comparison';\n    }\n}\n/**\r\n * Check if a version is a pre-release\r\n * @param version Version string\r\n * @param language Language context\r\n * @returns True if pre-release\r\n */ function isPreRelease(version, language) {\n    const clean = parseVersion(version, language);\n    // Check for common pre-release indicators\n    return /[a-zA-Z]/.test(clean) || clean.includes('-') || clean.includes('alpha') || clean.includes('beta') || clean.includes('rc') || clean.includes('preview');\n}\n/**\r\n * Get the latest stable version from a list\r\n * @param versions Array of version strings\r\n * @param language Language context\r\n * @returns Latest stable version or null\r\n */ function getLatestStableVersion(versions, language) {\n    const stableVersions = versions.filter((v)=>!isPreRelease(v, language));\n    if (stableVersions.length === 0) return null;\n    let latest = stableVersions[0];\n    for (const version of stableVersions){\n        if (compareVersions(version, latest, language) === 'greater') {\n            latest = version;\n        }\n    }\n    return latest;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/analysis/compare.ts\n");

/***/ }),

/***/ "(rsc)/./lib/analysis/deps.ts":
/*!******************************!*\
  !*** ./lib/analysis/deps.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeDependencies: () => (/* binding */ analyzeDependencies),\n/* harmony export */   filterDependenciesByLanguage: () => (/* binding */ filterDependenciesByLanguage),\n/* harmony export */   getBaselineVersion: () => (/* binding */ getBaselineVersion),\n/* harmony export */   getDependencySummary: () => (/* binding */ getDependencySummary),\n/* harmony export */   groupDependenciesByStatus: () => (/* binding */ groupDependenciesByStatus),\n/* harmony export */   hasBaselineRule: () => (/* binding */ hasBaselineRule),\n/* harmony export */   isValidVersion: () => (/* binding */ isValidVersion),\n/* harmony export */   normalizePackageName: () => (/* binding */ normalizePackageName),\n/* harmony export */   parseVersion: () => (/* binding */ parseVersion),\n/* harmony export */   sortDependencies: () => (/* binding */ sortDependencies)\n/* harmony export */ });\n/* harmony import */ var _compare__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./compare */ \"(rsc)/./lib/analysis/compare.ts\");\n\n/**\r\n * Analyze dependencies from project manifests\r\n * @param manifests Array of project manifests\r\n * @param rules Baseline rules\r\n * @returns Array of dependency findings\r\n */ function analyzeDependencies(manifests, rules) {\n    const findings = [];\n    for (const manifest of manifests){\n        if (!manifest.dependencies) continue;\n        const languageRules = rules.package_mins[manifest.language] || {};\n        for (const [packageName, foundVersion] of Object.entries(manifest.dependencies)){\n            const baselineVersion = languageRules[packageName];\n            if (!baselineVersion) {\n                // No baseline rule for this package\n                findings.push({\n                    kind: 'dependency',\n                    lang: manifest.language,\n                    component: packageName,\n                    foundVersion,\n                    baselineRequired: null,\n                    status: 'unknown',\n                    reason: 'no-baseline-rule',\n                    file: manifest.file\n                });\n                continue;\n            }\n            // Compare versions\n            const comparison = (0,_compare__WEBPACK_IMPORTED_MODULE_0__.compareVersions)(foundVersion, baselineVersion, manifest.language);\n            let status;\n            let reason;\n            switch(comparison){\n                case 'greater':\n                case 'equal':\n                    status = 'ok';\n                    reason = 'meets-baseline';\n                    break;\n                case 'less':\n                    status = 'affected';\n                    reason = 'below-baseline';\n                    break;\n                case 'unknown':\n                    status = 'unknown';\n                    reason = 'version-parse-error';\n                    break;\n                default:\n                    status = 'unknown';\n                    reason = 'unknown-comparison';\n            }\n            findings.push({\n                kind: 'dependency',\n                lang: manifest.language,\n                component: packageName,\n                foundVersion,\n                baselineRequired: baselineVersion,\n                status,\n                reason,\n                file: manifest.file,\n                quickFix: getDependencyQuickFix(rules, manifest.language, packageName, baselineVersion)\n            });\n        }\n    }\n    return findings;\n}\n/**\r\n * Get quick fix for dependency upgrade\r\n * @param rules Baseline rules\r\n * @param language Language\r\n * @param packageName Package name\r\n * @param version Required version\r\n * @returns Quick fix string\r\n */ function getDependencyQuickFix(rules, language, packageName, version) {\n    const template = rules.quick_fixes.dependency_upgrade[language] || 'Update {package} to {version}';\n    return template.replace('{package}', packageName).replace('{version}', version);\n}\n/**\r\n * Parse version string and extract version number\r\n * @param versionString Version string (may contain operators)\r\n * @param language Language context\r\n * @returns Clean version string\r\n */ function parseVersion(versionString, language) {\n    if (!versionString || versionString === '*') {\n        return '0.0.0';\n    }\n    // Remove common operators and prefixes\n    let clean = versionString.replace(/^[~^>=<!=]+/, '') // Remove operators\n    .replace(/^v/, '') // Remove v prefix\n    .trim();\n    // Handle special cases\n    if (clean === 'latest' || clean === '') {\n        return '0.0.0';\n    }\n    // Handle Python version specifiers\n    if (language === 'python') {\n        // Remove Python-specific operators\n        clean = clean.replace(/^[~=!<>]+/, '');\n    }\n    // Handle Go version suffixes\n    if (language === 'go') {\n        // Remove +incompatible, +incompatible.20210101, etc.\n        clean = clean.replace(/\\+.*$/, '');\n    }\n    // Handle Java version ranges\n    if (language === 'java') {\n        // Extract version from ranges like [1.0,2.0) or (1.0,2.0]\n        const rangeMatch = clean.match(/[[(]([^,]+),/);\n        if (rangeMatch) {\n            clean = rangeMatch[1];\n        }\n    }\n    return clean;\n}\n/**\r\n * Check if a version string is valid\r\n * @param versionString Version string\r\n * @param language Language context\r\n * @returns True if valid\r\n */ function isValidVersion(versionString, language) {\n    if (!versionString || versionString === '*') return false;\n    const clean = parseVersion(versionString, language);\n    // Basic version pattern validation\n    const versionPatterns = {\n        node: /^\\d+\\.\\d+\\.\\d+(-[a-zA-Z0-9.-]+)?(\\+[a-zA-Z0-9.-]+)?$/,\n        python: /^\\d+\\.\\d+(\\.\\d+)?([a-zA-Z0-9.-]+)?$/,\n        java: /^\\d+(\\.\\d+)*(-[a-zA-Z0-9.-]+)?$/,\n        go: /^v?\\d+\\.\\d+\\.\\d+(-[a-zA-Z0-9.-]+)?(\\+[a-zA-Z0-9.-]+)?$/,\n        dotnet: /^\\d+\\.\\d+(\\.\\d+)?(-[a-zA-Z0-9.-]+)?$/\n    };\n    const pattern = versionPatterns[language];\n    return pattern ? pattern.test(clean) : false;\n}\n/**\r\n * Normalize package name for comparison\r\n * @param packageName Package name\r\n * @param language Language context\r\n * @returns Normalized package name\r\n */ function normalizePackageName(packageName, language) {\n    let normalized = packageName.toLowerCase().trim();\n    // Handle scoped packages (Node.js)\n    if (language === 'node' && normalized.startsWith('@')) {\n        // Keep @scope/package format\n        return normalized;\n    }\n    // Handle Java group:artifact format\n    if (language === 'java' && normalized.includes(':')) {\n        return normalized;\n    }\n    // Handle Go modules\n    if (language === 'go') {\n        // Remove common prefixes\n        normalized = normalized.replace(/^github\\.com\\//, '');\n        normalized = normalized.replace(/^golang\\.org\\/x\\//, '');\n    }\n    // Handle .NET packages\n    if (language === 'dotnet') {\n        // Remove common prefixes\n        normalized = normalized.replace(/^microsoft\\./, '');\n        normalized = normalized.replace(/^system\\./, '');\n    }\n    return normalized;\n}\n/**\r\n * Check if a package is in the baseline rules\r\n * @param packageName Package name\r\n * @param language Language\r\n * @param rules Baseline rules\r\n * @returns True if package has baseline rules\r\n */ function hasBaselineRule(packageName, language, rules) {\n    const languageRules = rules.package_mins[language] || {};\n    const normalized = normalizePackageName(packageName, language);\n    // Check exact match first\n    if (languageRules[packageName]) return true;\n    if (languageRules[normalized]) return true;\n    // Check for partial matches (for scoped packages, etc.)\n    for (const [rulePackage] of Object.entries(languageRules)){\n        if (normalizePackageName(rulePackage, language) === normalized) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\r\n * Get baseline version for a package\r\n * @param packageName Package name\r\n * @param language Language\r\n * @param rules Baseline rules\r\n * @returns Baseline version or null\r\n */ function getBaselineVersion(packageName, language, rules) {\n    const languageRules = rules.package_mins[language] || {};\n    const normalized = normalizePackageName(packageName, language);\n    // Check exact match first\n    if (languageRules[packageName]) return languageRules[packageName];\n    if (languageRules[normalized]) return languageRules[normalized];\n    // Check for partial matches\n    for (const [rulePackage, version] of Object.entries(languageRules)){\n        if (normalizePackageName(rulePackage, language) === normalized) {\n            return version;\n        }\n    }\n    return null;\n}\n/**\r\n * Group dependencies by status\r\n * @param findings Dependency findings\r\n * @returns Grouped findings\r\n */ function groupDependenciesByStatus(findings) {\n    return {\n        ok: findings.filter((f)=>f.status === 'ok'),\n        affected: findings.filter((f)=>f.status === 'affected'),\n        unknown: findings.filter((f)=>f.status === 'unknown')\n    };\n}\n/**\r\n * Get dependency summary statistics\r\n * @param findings Dependency findings\r\n * @returns Summary statistics\r\n */ function getDependencySummary(findings) {\n    const total = findings.length;\n    const ok = findings.filter((f)=>f.status === 'ok').length;\n    const affected = findings.filter((f)=>f.status === 'affected').length;\n    const unknown = findings.filter((f)=>f.status === 'unknown').length;\n    return {\n        total,\n        ok,\n        affected,\n        unknown,\n        okPercentage: total > 0 ? ok / total * 100 : 0,\n        affectedPercentage: total > 0 ? affected / total * 100 : 0,\n        unknownPercentage: total > 0 ? unknown / total * 100 : 0\n    };\n}\n/**\r\n * Filter dependencies by language\r\n * @param findings Dependency findings\r\n * @param language Language to filter by\r\n * @returns Filtered findings\r\n */ function filterDependenciesByLanguage(findings, language) {\n    return findings.filter((f)=>f.lang === language);\n}\n/**\r\n * Sort dependencies by status and name\r\n * @param findings Dependency findings\r\n * @returns Sorted findings\r\n */ function sortDependencies(findings) {\n    const statusOrder = {\n        affected: 0,\n        unknown: 1,\n        ok: 2\n    };\n    return [\n        ...findings\n    ].sort((a, b)=>{\n        // First by status\n        const statusDiff = statusOrder[a.status] - statusOrder[b.status];\n        if (statusDiff !== 0) return statusDiff;\n        // Then by language\n        const langDiff = a.lang.localeCompare(b.lang);\n        if (langDiff !== 0) return langDiff;\n        // Finally by component name\n        return a.component.localeCompare(b.component);\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/analysis/deps.ts\n");

/***/ }),

/***/ "(rsc)/./lib/analysis/detect.ts":
/*!********************************!*\
  !*** ./lib/analysis/detect.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   detectLanguagesFromFiles: () => (/* binding */ detectLanguagesFromFiles),\n/* harmony export */   detectProjectManifests: () => (/* binding */ detectProjectManifests),\n/* harmony export */   getManifestType: () => (/* binding */ getManifestType),\n/* harmony export */   getPrimaryLanguage: () => (/* binding */ getPrimaryLanguage),\n/* harmony export */   isManifestFile: () => (/* binding */ isManifestFile)\n/* harmony export */ });\n/**\r\n * Detect project languages and manifests from extracted files\r\n * @param files Array of extracted files\r\n * @returns Array of detected project manifests\r\n */ function detectProjectManifests(files) {\n    const manifests = [];\n    // Look for package.json (Node.js)\n    const packageJson = files.find((f)=>(f.path || f.name)?.endsWith('package.json'));\n    if (packageJson) {\n        try {\n            const pkg = JSON.parse(packageJson.content);\n            manifests.push({\n                language: 'node',\n                file: packageJson.path || packageJson.name || 'package.json',\n                dependencies: pkg.dependencies,\n                devDependencies: pkg.devDependencies,\n                peerDependencies: pkg.peerDependencies,\n                optionalDependencies: pkg.optionalDependencies\n            });\n        } catch (error) {\n            console.warn(`Failed to parse package.json: ${error}`);\n        }\n    }\n    // Look for requirements.txt (Python)\n    const requirementsTxt = files.find((f)=>(f.path || f.name)?.endsWith('requirements.txt'));\n    if (requirementsTxt) {\n        manifests.push({\n            language: 'python',\n            file: requirementsTxt.path || requirementsTxt.name || 'requirements.txt',\n            dependencies: parseRequirementsTxt(requirementsTxt.content)\n        });\n    }\n    // Look for pyproject.toml (Python)\n    const pyprojectToml = files.find((f)=>(f.path || f.name)?.endsWith('pyproject.toml'));\n    if (pyprojectToml) {\n        try {\n            const deps = parsePyprojectToml(pyprojectToml.content);\n            if (deps) {\n                manifests.push({\n                    language: 'python',\n                    file: pyprojectToml.path || pyprojectToml.name || 'pyproject.toml',\n                    dependencies: deps\n                });\n            }\n        } catch (error) {\n            console.warn(`Failed to parse pyproject.toml: ${error}`);\n        }\n    }\n    // Look for pom.xml (Java Maven)\n    const pomXml = files.find((f)=>(f.path || f.name)?.endsWith('pom.xml'));\n    if (pomXml) {\n        try {\n            const deps = parsePomXml(pomXml.content);\n            if (deps) {\n                manifests.push({\n                    language: 'java',\n                    file: pomXml.path || pomXml.name || 'pom.xml',\n                    dependencies: deps\n                });\n            }\n        } catch (error) {\n            console.warn(`Failed to parse pom.xml: ${error}`);\n        }\n    }\n    // Look for build.gradle (Java Gradle)\n    const buildGradle = files.find((f)=>{\n        const path = f.path || f.name;\n        return path?.endsWith('build.gradle') || path?.endsWith('build.gradle.kts');\n    });\n    if (buildGradle) {\n        try {\n            const deps = parseBuildGradle(buildGradle.content);\n            if (deps) {\n                manifests.push({\n                    language: 'java',\n                    file: buildGradle.path || buildGradle.name || 'build.gradle',\n                    dependencies: deps\n                });\n            }\n        } catch (error) {\n            console.warn(`Failed to parse build.gradle: ${error}`);\n        }\n    }\n    // Look for go.mod (Go)\n    const goMod = files.find((f)=>(f.path || f.name)?.endsWith('go.mod'));\n    if (goMod) {\n        try {\n            const deps = parseGoMod(goMod.content);\n            if (deps) {\n                manifests.push({\n                    language: 'go',\n                    file: goMod.path || goMod.name || 'go.mod',\n                    dependencies: deps\n                });\n            }\n        } catch (error) {\n            console.warn(`Failed to parse go.mod: ${error}`);\n        }\n    }\n    // Look for .csproj files (.NET)\n    const csprojFiles = files.filter((f)=>(f.path || f.name)?.endsWith('.csproj'));\n    for (const csproj of csprojFiles){\n        try {\n            const deps = parseCsproj(csproj.content);\n            if (deps) {\n                manifests.push({\n                    language: 'dotnet',\n                    file: csproj.path || csproj.name || 'project.csproj',\n                    dependencies: deps\n                });\n            }\n        } catch (error) {\n            console.warn(`Failed to parse ${csproj.path || csproj.name || 'project.csproj'}: ${error}`);\n        }\n    }\n    return manifests;\n}\n/**\r\n * Parse requirements.txt content\r\n * @param content requirements.txt content\r\n * @returns Dependencies object\r\n */ function parseRequirementsTxt(content) {\n    const deps = {};\n    const lines = content.split('\\n');\n    for (const line of lines){\n        const trimmed = line.trim();\n        if (!trimmed || trimmed.startsWith('#')) continue;\n        // Handle various requirement formats\n        // package==1.0.0\n        // package>=1.0.0\n        // package~=1.0.0\n        // package\n        const match = trimmed.match(/^([a-zA-Z0-9_-]+)(.*)$/);\n        if (match) {\n            const [, name, version] = match;\n            deps[name] = version || '*';\n        }\n    }\n    return deps;\n}\n/**\r\n * Parse pyproject.toml content (basic parsing)\r\n * @param content pyproject.toml content\r\n * @returns Dependencies object or null\r\n */ function parsePyprojectToml(content) {\n    const deps = {};\n    // Simple TOML parsing for dependencies\n    const lines = content.split('\\n');\n    let inDependencies = false;\n    for (const line of lines){\n        const trimmed = line.trim();\n        if (trimmed.startsWith('[tool.poetry.dependencies]') || trimmed.startsWith('[project.dependencies]') || trimmed.startsWith('[dependencies]')) {\n            inDependencies = true;\n            continue;\n        }\n        if (trimmed.startsWith('[') && inDependencies) {\n            break;\n        }\n        if (inDependencies && trimmed && !trimmed.startsWith('#')) {\n            const match = trimmed.match(/^([a-zA-Z0-9_-]+)\\s*=\\s*[\"']?([^\"']+)[\"']?/);\n            if (match) {\n                const [, name, version] = match;\n                deps[name] = version;\n            }\n        }\n    }\n    return Object.keys(deps).length > 0 ? deps : null;\n}\n/**\r\n * Parse pom.xml content (basic XML parsing)\r\n * @param content pom.xml content\r\n * @returns Dependencies object or null\r\n */ function parsePomXml(content) {\n    const deps = {};\n    // Simple XML parsing for dependencies\n    const dependencyRegex = /<dependency>\\s*<groupId>([^<]+)<\\/groupId>\\s*<artifactId>([^<]+)<\\/artifactId>\\s*<version>([^<]+)<\\/version>/g;\n    let match;\n    while((match = dependencyRegex.exec(content)) !== null){\n        const [, groupId, artifactId, version] = match;\n        const fullName = `${groupId}:${artifactId}`;\n        deps[fullName] = version;\n    }\n    return Object.keys(deps).length > 0 ? deps : null;\n}\n/**\r\n * Parse build.gradle content (basic parsing)\r\n * @param content build.gradle content\r\n * @returns Dependencies object or null\r\n */ function parseBuildGradle(content) {\n    const deps = {};\n    // Simple Gradle parsing for dependencies\n    const lines = content.split('\\n');\n    let inDependencies = false;\n    for (const line of lines){\n        const trimmed = line.trim();\n        if (trimmed.includes('dependencies') && trimmed.includes('{')) {\n            inDependencies = true;\n            continue;\n        }\n        if (trimmed === '}' && inDependencies) {\n            break;\n        }\n        if (inDependencies && trimmed.includes('implementation') || trimmed.includes('compile')) {\n            // implementation 'group:artifact:version'\n            // implementation(\"group:artifact:version\")\n            const match = trimmed.match(/(?:implementation|compile)\\s*[(\"]?([^:)]+):([^:)]+):([^:)]+)/);\n            if (match) {\n                const [, group, artifact, version] = match;\n                const fullName = `${group}:${artifact}`;\n                deps[fullName] = version;\n            }\n        }\n    }\n    return Object.keys(deps).length > 0 ? deps : null;\n}\n/**\r\n * Parse go.mod content\r\n * @param content go.mod content\r\n * @returns Dependencies object or null\r\n */ function parseGoMod(content) {\n    const deps = {};\n    const lines = content.split('\\n');\n    for (const line of lines){\n        const trimmed = line.trim();\n        if (trimmed.startsWith('require')) {\n            continue;\n        }\n        if (trimmed.startsWith('require ')) {\n            // require module v1.0.0\n            const match = trimmed.match(/require\\s+([^\\s]+)\\s+([^\\s]+)/);\n            if (match) {\n                const [, module, version] = match;\n                deps[module] = version;\n            }\n        } else if (trimmed && !trimmed.startsWith('go ') && !trimmed.startsWith('module ') && !trimmed.startsWith('//')) {\n            // Module version line\n            const match = trimmed.match(/^([^\\s]+)\\s+([^\\s]+)/);\n            if (match) {\n                const [, module, version] = match;\n                deps[module] = version;\n            }\n        }\n    }\n    return Object.keys(deps).length > 0 ? deps : null;\n}\n/**\r\n * Parse .csproj content (basic XML parsing)\r\n * @param content .csproj content\r\n * @returns Dependencies object or null\r\n */ function parseCsproj(content) {\n    const deps = {};\n    // Simple XML parsing for PackageReference\n    const packageRefRegex = /<PackageReference\\s+Include=\"([^\"]+)\"\\s+Version=\"([^\"]+)\"\\s*\\/?>/g;\n    let match;\n    while((match = packageRefRegex.exec(content)) !== null){\n        const [, packageName, version] = match;\n        deps[packageName] = version;\n    }\n    return Object.keys(deps).length > 0 ? deps : null;\n}\n/**\r\n * Detect languages from file extensions\r\n * @param files Array of extracted files\r\n * @returns Array of detected languages\r\n */ function detectLanguagesFromFiles(files) {\n    const languageMap = {\n        '.js': 'node',\n        '.jsx': 'node',\n        '.ts': 'node',\n        '.tsx': 'node',\n        '.py': 'python',\n        '.java': 'java',\n        '.go': 'go',\n        '.cs': 'dotnet',\n        '.fs': 'dotnet',\n        '.vb': 'dotnet'\n    };\n    const detectedLanguages = new Set();\n    for (const file of files){\n        const filePath = file.path || file.name;\n        if (filePath) {\n            const ext = getFileExtension(filePath);\n            const language = languageMap[ext];\n            if (language) {\n                detectedLanguages.add(language);\n            }\n        }\n    }\n    return Array.from(detectedLanguages);\n}\n/**\r\n * Get file extension from path\r\n * @param filePath File path\r\n * @returns File extension with dot\r\n */ function getFileExtension(filePath) {\n    const lastDot = filePath.lastIndexOf('.');\n    if (lastDot === -1) return '';\n    return filePath.substring(lastDot);\n}\n/**\r\n * Get primary language from manifests\r\n * @param manifests Array of project manifests\r\n * @returns Primary language or null\r\n */ function getPrimaryLanguage(manifests) {\n    if (manifests.length === 0) return null;\n    // Priority order: node, python, java, go, dotnet\n    const priority = [\n        'node',\n        'python',\n        'java',\n        'go',\n        'dotnet'\n    ];\n    for (const lang of priority){\n        if (manifests.some((m)=>m.language === lang)) {\n            return lang;\n        }\n    }\n    return manifests[0].language;\n}\n/**\r\n * Check if a file is a manifest file\r\n * @param filePath File path\r\n * @returns True if it's a manifest file\r\n */ function isManifestFile(filePath) {\n    const manifestFiles = [\n        'package.json',\n        'requirements.txt',\n        'pyproject.toml',\n        'pom.xml',\n        'build.gradle',\n        'build.gradle.kts',\n        'go.mod',\n        '.csproj'\n    ];\n    return manifestFiles.some((manifest)=>filePath.endsWith(manifest));\n}\n/**\r\n * Get manifest file type from path\r\n * @param filePath File path\r\n * @returns Manifest type or null\r\n */ function getManifestType(filePath) {\n    if (filePath.endsWith('package.json')) {\n        return {\n            language: 'node',\n            type: 'package.json'\n        };\n    }\n    if (filePath.endsWith('requirements.txt')) {\n        return {\n            language: 'python',\n            type: 'requirements.txt'\n        };\n    }\n    if (filePath.endsWith('pyproject.toml')) {\n        return {\n            language: 'python',\n            type: 'pyproject.toml'\n        };\n    }\n    if (filePath.endsWith('pom.xml')) {\n        return {\n            language: 'java',\n            type: 'pom.xml'\n        };\n    }\n    if (filePath.endsWith('build.gradle') || filePath.endsWith('build.gradle.kts')) {\n        return {\n            language: 'java',\n            type: 'build.gradle'\n        };\n    }\n    if (filePath.endsWith('go.mod')) {\n        return {\n            language: 'go',\n            type: 'go.mod'\n        };\n    }\n    if (filePath.endsWith('.csproj')) {\n        return {\n            language: 'dotnet',\n            type: '.csproj'\n        };\n    }\n    return null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFVO1lBQVFxRSxNQUFNO1FBQVU7SUFDN0M7SUFDQSxJQUFJbEIsU0FBU3pELFFBQVEsQ0FBQyxtQkFBbUJ5RCxTQUFTekQsUUFBUSxDQUFDLHFCQUFxQjtRQUM5RSxPQUFPO1lBQUVNLFVBQVU7WUFBUXFFLE1BQU07UUFBZTtJQUNsRDtJQUNBLElBQUlsQixTQUFTekQsUUFBUSxDQUFDLFdBQVc7UUFDL0IsT0FBTztZQUFFTSxVQUFVO1lBQU1xRSxNQUFNO1FBQVM7SUFDMUM7SUFDQSxJQUFJbEIsU0FBU3pELFFBQVEsQ0FBQyxZQUFZO1FBQ2hDLE9BQU87WUFBRU0sVUFBVTtZQUFVcUUsTUFBTTtRQUFVO0lBQy9DO0lBRUEsT0FBTztBQUNUIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXENraGFkYXJcXERvd25sb2Fkc1xcQUlfQmFzZWxpbmVfTWFwXFxsaWJcXGFuYWx5c2lzXFxkZXRlY3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTGFuZ3VhZ2UsIFByb2plY3RNYW5pZmVzdCB9IGZyb20gJy4vYmFzZWxpbmUudHlwZXMnO1xyXG5cclxuLyoqXHJcbiAqIERldGVjdCBwcm9qZWN0IGxhbmd1YWdlcyBhbmQgbWFuaWZlc3RzIGZyb20gZXh0cmFjdGVkIGZpbGVzXHJcbiAqIEBwYXJhbSBmaWxlcyBBcnJheSBvZiBleHRyYWN0ZWQgZmlsZXNcclxuICogQHJldHVybnMgQXJyYXkgb2YgZGV0ZWN0ZWQgcHJvamVjdCBtYW5pZmVzdHNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkZXRlY3RQcm9qZWN0TWFuaWZlc3RzKGZpbGVzOiB7IHBhdGg/OiBzdHJpbmc7IG5hbWU/OiBzdHJpbmc7IGNvbnRlbnQ6IHN0cmluZyB9W10pOiBQcm9qZWN0TWFuaWZlc3RbXSB7XHJcbiAgY29uc3QgbWFuaWZlc3RzOiBQcm9qZWN0TWFuaWZlc3RbXSA9IFtdO1xyXG4gIFxyXG4gIC8vIExvb2sgZm9yIHBhY2thZ2UuanNvbiAoTm9kZS5qcylcclxuICBjb25zdCBwYWNrYWdlSnNvbiA9IGZpbGVzLmZpbmQoZiA9PiAoZi5wYXRoIHx8IGYubmFtZSk/LmVuZHNXaXRoKCdwYWNrYWdlLmpzb24nKSk7XHJcbiAgaWYgKHBhY2thZ2VKc29uKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBwa2cgPSBKU09OLnBhcnNlKHBhY2thZ2VKc29uLmNvbnRlbnQpO1xyXG4gICAgICBtYW5pZmVzdHMucHVzaCh7XHJcbiAgICAgICAgbGFuZ3VhZ2U6ICdub2RlJyxcclxuICAgICAgICBmaWxlOiBwYWNrYWdlSnNvbi5wYXRoIHx8IHBhY2thZ2VKc29uLm5hbWUgfHwgJ3BhY2thZ2UuanNvbicsXHJcbiAgICAgICAgZGVwZW5kZW5jaWVzOiBwa2cuZGVwZW5kZW5jaWVzLFxyXG4gICAgICAgIGRldkRlcGVuZGVuY2llczogcGtnLmRldkRlcGVuZGVuY2llcyxcclxuICAgICAgICBwZWVyRGVwZW5kZW5jaWVzOiBwa2cucGVlckRlcGVuZGVuY2llcyxcclxuICAgICAgICBvcHRpb25hbERlcGVuZGVuY2llczogcGtnLm9wdGlvbmFsRGVwZW5kZW5jaWVzLFxyXG4gICAgICB9KTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybihgRmFpbGVkIHRvIHBhcnNlIHBhY2thZ2UuanNvbjogJHtlcnJvcn1gKTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgLy8gTG9vayBmb3IgcmVxdWlyZW1lbnRzLnR4dCAoUHl0aG9uKVxyXG4gIGNvbnN0IHJlcXVpcmVtZW50c1R4dCA9IGZpbGVzLmZpbmQoZiA9PiAoZi5wYXRoIHx8IGYubmFtZSk/LmVuZHNXaXRoKCdyZXF1aXJlbWVudHMudHh0JykpO1xyXG4gIGlmIChyZXF1aXJlbWVudHNUeHQpIHtcclxuICAgIG1hbmlmZXN0cy5wdXNoKHtcclxuICAgICAgbGFuZ3VhZ2U6ICdweXRob24nLFxyXG4gICAgICAgIGZpbGU6IHJlcXVpcmVtZW50c1R4dC5wYXRoIHx8IHJlcXVpcmVtZW50c1R4dC5uYW1lIHx8ICdyZXF1aXJlbWVudHMudHh0JyxcclxuICAgICAgZGVwZW5kZW5jaWVzOiBwYXJzZVJlcXVpcmVtZW50c1R4dChyZXF1aXJlbWVudHNUeHQuY29udGVudCksXHJcbiAgICB9KTtcclxuICB9XHJcbiAgXHJcbiAgLy8gTG9vayBmb3IgcHlwcm9qZWN0LnRvbWwgKFB5dGhvbilcclxuICBjb25zdCBweXByb2plY3RUb21sID0gZmlsZXMuZmluZChmID0+IChmLnBhdGggfHwgZi5uYW1lKT8uZW5kc1dpdGgoJ3B5cHJvamVjdC50b21sJykpO1xyXG4gIGlmIChweXByb2plY3RUb21sKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBkZXBzID0gcGFyc2VQeXByb2plY3RUb21sKHB5cHJvamVjdFRvbWwuY29udGVudCk7XHJcbiAgICAgIGlmIChkZXBzKSB7XHJcbiAgICAgICAgbWFuaWZlc3RzLnB1c2goe1xyXG4gICAgICAgICAgbGFuZ3VhZ2U6ICdweXRob24nLFxyXG4gICAgICAgICAgZmlsZTogcHlwcm9qZWN0VG9tbC5wYXRoIHx8IHB5cHJvamVjdFRvbWwubmFtZSB8fCAncHlwcm9qZWN0LnRvbWwnLFxyXG4gICAgICAgICAgZGVwZW5kZW5jaWVzOiBkZXBzLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLndhcm4oYEZhaWxlZCB0byBwYXJzZSBweXByb2plY3QudG9tbDogJHtlcnJvcn1gKTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgLy8gTG9vayBmb3IgcG9tLnhtbCAoSmF2YSBNYXZlbilcclxuICBjb25zdCBwb21YbWwgPSBmaWxlcy5maW5kKGYgPT4gKGYucGF0aCB8fCBmLm5hbWUpPy5lbmRzV2l0aCgncG9tLnhtbCcpKTtcclxuICBpZiAocG9tWG1sKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBkZXBzID0gcGFyc2VQb21YbWwocG9tWG1sLmNvbnRlbnQpO1xyXG4gICAgICBpZiAoZGVwcykge1xyXG4gICAgICAgIG1hbmlmZXN0cy5wdXNoKHtcclxuICAgICAgICAgIGxhbmd1YWdlOiAnamF2YScsXHJcbiAgICAgICAgICBmaWxlOiBwb21YbWwucGF0aCB8fCBwb21YbWwubmFtZSB8fCAncG9tLnhtbCcsXHJcbiAgICAgICAgICBkZXBlbmRlbmNpZXM6IGRlcHMsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybihgRmFpbGVkIHRvIHBhcnNlIHBvbS54bWw6ICR7ZXJyb3J9YCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIC8vIExvb2sgZm9yIGJ1aWxkLmdyYWRsZSAoSmF2YSBHcmFkbGUpXHJcbiAgY29uc3QgYnVpbGRHcmFkbGUgPSBmaWxlcy5maW5kKGYgPT4ge1xyXG4gICAgY29uc3QgcGF0aCA9IGYucGF0aCB8fCBmLm5hbWU7XHJcbiAgICByZXR1cm4gcGF0aD8uZW5kc1dpdGgoJ2J1aWxkLmdyYWRsZScpIHx8IHBhdGg/LmVuZHNXaXRoKCdidWlsZC5ncmFkbGUua3RzJyk7XHJcbiAgfSk7XHJcbiAgaWYgKGJ1aWxkR3JhZGxlKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBkZXBzID0gcGFyc2VCdWlsZEdyYWRsZShidWlsZEdyYWRsZS5jb250ZW50KTtcclxuICAgICAgaWYgKGRlcHMpIHtcclxuICAgICAgICBtYW5pZmVzdHMucHVzaCh7XHJcbiAgICAgICAgICBsYW5ndWFnZTogJ2phdmEnLFxyXG4gICAgICAgICAgZmlsZTogYnVpbGRHcmFkbGUucGF0aCB8fCBidWlsZEdyYWRsZS5uYW1lIHx8ICdidWlsZC5ncmFkbGUnLFxyXG4gICAgICAgICAgZGVwZW5kZW5jaWVzOiBkZXBzLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLndhcm4oYEZhaWxlZCB0byBwYXJzZSBidWlsZC5ncmFkbGU6ICR7ZXJyb3J9YCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIC8vIExvb2sgZm9yIGdvLm1vZCAoR28pXHJcbiAgY29uc3QgZ29Nb2QgPSBmaWxlcy5maW5kKGYgPT4gKGYucGF0aCB8fCBmLm5hbWUpPy5lbmRzV2l0aCgnZ28ubW9kJykpO1xyXG4gIGlmIChnb01vZCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgZGVwcyA9IHBhcnNlR29Nb2QoZ29Nb2QuY29udGVudCk7XHJcbiAgICAgIGlmIChkZXBzKSB7XHJcbiAgICAgICAgbWFuaWZlc3RzLnB1c2goe1xyXG4gICAgICAgICAgbGFuZ3VhZ2U6ICdnbycsXHJcbiAgICAgICAgICBmaWxlOiBnb01vZC5wYXRoIHx8IGdvTW9kLm5hbWUgfHwgJ2dvLm1vZCcsXHJcbiAgICAgICAgICBkZXBlbmRlbmNpZXM6IGRlcHMsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybihgRmFpbGVkIHRvIHBhcnNlIGdvLm1vZDogJHtlcnJvcn1gKTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgLy8gTG9vayBmb3IgLmNzcHJvaiBmaWxlcyAoLk5FVClcclxuICBjb25zdCBjc3Byb2pGaWxlcyA9IGZpbGVzLmZpbHRlcihmID0+IChmLnBhdGggfHwgZi5uYW1lKT8uZW5kc1dpdGgoJy5jc3Byb2onKSk7XHJcbiAgZm9yIChjb25zdCBjc3Byb2ogb2YgY3Nwcm9qRmlsZXMpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IGRlcHMgPSBwYXJzZUNzcHJvaihjc3Byb2ouY29udGVudCk7XHJcbiAgICAgIGlmIChkZXBzKSB7XHJcbiAgICAgICAgbWFuaWZlc3RzLnB1c2goe1xyXG4gICAgICAgICAgbGFuZ3VhZ2U6ICdkb3RuZXQnLFxyXG4gICAgICAgICAgZmlsZTogY3Nwcm9qLnBhdGggfHwgY3Nwcm9qLm5hbWUgfHwgJ3Byb2plY3QuY3Nwcm9qJyxcclxuICAgICAgICAgIGRlcGVuZGVuY2llczogZGVwcyxcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS53YXJuKGBGYWlsZWQgdG8gcGFyc2UgJHtjc3Byb2oucGF0aCB8fCBjc3Byb2oubmFtZSB8fCAncHJvamVjdC5jc3Byb2onfTogJHtlcnJvcn1gKTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIG1hbmlmZXN0cztcclxufVxyXG5cclxuLyoqXHJcbiAqIFBhcnNlIHJlcXVpcmVtZW50cy50eHQgY29udGVudFxyXG4gKiBAcGFyYW0gY29udGVudCByZXF1aXJlbWVudHMudHh0IGNvbnRlbnRcclxuICogQHJldHVybnMgRGVwZW5kZW5jaWVzIG9iamVjdFxyXG4gKi9cclxuZnVuY3Rpb24gcGFyc2VSZXF1aXJlbWVudHNUeHQoY29udGVudDogc3RyaW5nKTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB7XHJcbiAgY29uc3QgZGVwczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xyXG4gIGNvbnN0IGxpbmVzID0gY29udGVudC5zcGxpdCgnXFxuJyk7XHJcbiAgXHJcbiAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVzKSB7XHJcbiAgICBjb25zdCB0cmltbWVkID0gbGluZS50cmltKCk7XHJcbiAgICBpZiAoIXRyaW1tZWQgfHwgdHJpbW1lZC5zdGFydHNXaXRoKCcjJykpIGNvbnRpbnVlO1xyXG4gICAgXHJcbiAgICAvLyBIYW5kbGUgdmFyaW91cyByZXF1aXJlbWVudCBmb3JtYXRzXHJcbiAgICAvLyBwYWNrYWdlPT0xLjAuMFxyXG4gICAgLy8gcGFja2FnZT49MS4wLjBcclxuICAgIC8vIHBhY2thZ2V+PTEuMC4wXHJcbiAgICAvLyBwYWNrYWdlXHJcbiAgICBjb25zdCBtYXRjaCA9IHRyaW1tZWQubWF0Y2goL14oW2EtekEtWjAtOV8tXSspKC4qKSQvKTtcclxuICAgIGlmIChtYXRjaCkge1xyXG4gICAgICBjb25zdCBbLCBuYW1lLCB2ZXJzaW9uXSA9IG1hdGNoO1xyXG4gICAgICBkZXBzW25hbWVdID0gdmVyc2lvbiB8fCAnKic7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIHJldHVybiBkZXBzO1xyXG59XHJcblxyXG4vKipcclxuICogUGFyc2UgcHlwcm9qZWN0LnRvbWwgY29udGVudCAoYmFzaWMgcGFyc2luZylcclxuICogQHBhcmFtIGNvbnRlbnQgcHlwcm9qZWN0LnRvbWwgY29udGVudFxyXG4gKiBAcmV0dXJucyBEZXBlbmRlbmNpZXMgb2JqZWN0IG9yIG51bGxcclxuICovXHJcbmZ1bmN0aW9uIHBhcnNlUHlwcm9qZWN0VG9tbChjb250ZW50OiBzdHJpbmcpOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHwgbnVsbCB7XHJcbiAgY29uc3QgZGVwczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xyXG4gIFxyXG4gIC8vIFNpbXBsZSBUT01MIHBhcnNpbmcgZm9yIGRlcGVuZGVuY2llc1xyXG4gIGNvbnN0IGxpbmVzID0gY29udGVudC5zcGxpdCgnXFxuJyk7XHJcbiAgbGV0IGluRGVwZW5kZW5jaWVzID0gZmFsc2U7XHJcbiAgXHJcbiAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVzKSB7XHJcbiAgICBjb25zdCB0cmltbWVkID0gbGluZS50cmltKCk7XHJcbiAgICBcclxuICAgIGlmICh0cmltbWVkLnN0YXJ0c1dpdGgoJ1t0b29sLnBvZXRyeS5kZXBlbmRlbmNpZXNdJykgfHwgXHJcbiAgICAgICAgdHJpbW1lZC5zdGFydHNXaXRoKCdbcHJvamVjdC5kZXBlbmRlbmNpZXNdJykgfHxcclxuICAgICAgICB0cmltbWVkLnN0YXJ0c1dpdGgoJ1tkZXBlbmRlbmNpZXNdJykpIHtcclxuICAgICAgaW5EZXBlbmRlbmNpZXMgPSB0cnVlO1xyXG4gICAgICBjb250aW51ZTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKHRyaW1tZWQuc3RhcnRzV2l0aCgnWycpICYmIGluRGVwZW5kZW5jaWVzKSB7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZiAoaW5EZXBlbmRlbmNpZXMgJiYgdHJpbW1lZCAmJiAhdHJpbW1lZC5zdGFydHNXaXRoKCcjJykpIHtcclxuICAgICAgY29uc3QgbWF0Y2ggPSB0cmltbWVkLm1hdGNoKC9eKFthLXpBLVowLTlfLV0rKVxccyo9XFxzKltcIiddPyhbXlwiJ10rKVtcIiddPy8pO1xyXG4gICAgICBpZiAobWF0Y2gpIHtcclxuICAgICAgICBjb25zdCBbLCBuYW1lLCB2ZXJzaW9uXSA9IG1hdGNoO1xyXG4gICAgICAgIGRlcHNbbmFtZV0gPSB2ZXJzaW9uO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIHJldHVybiBPYmplY3Qua2V5cyhkZXBzKS5sZW5ndGggPiAwID8gZGVwcyA6IG51bGw7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQYXJzZSBwb20ueG1sIGNvbnRlbnQgKGJhc2ljIFhNTCBwYXJzaW5nKVxyXG4gKiBAcGFyYW0gY29udGVudCBwb20ueG1sIGNvbnRlbnRcclxuICogQHJldHVybnMgRGVwZW5kZW5jaWVzIG9iamVjdCBvciBudWxsXHJcbiAqL1xyXG5mdW5jdGlvbiBwYXJzZVBvbVhtbChjb250ZW50OiBzdHJpbmcpOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHwgbnVsbCB7XHJcbiAgY29uc3QgZGVwczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xyXG4gIFxyXG4gIC8vIFNpbXBsZSBYTUwgcGFyc2luZyBmb3IgZGVwZW5kZW5jaWVzXHJcbiAgY29uc3QgZGVwZW5kZW5jeVJlZ2V4ID0gLzxkZXBlbmRlbmN5Plxccyo8Z3JvdXBJZD4oW148XSspPFxcL2dyb3VwSWQ+XFxzKjxhcnRpZmFjdElkPihbXjxdKyk8XFwvYXJ0aWZhY3RJZD5cXHMqPHZlcnNpb24+KFtePF0rKTxcXC92ZXJzaW9uPi9nO1xyXG4gIGxldCBtYXRjaDtcclxuICBcclxuICB3aGlsZSAoKG1hdGNoID0gZGVwZW5kZW5jeVJlZ2V4LmV4ZWMoY29udGVudCkpICE9PSBudWxsKSB7XHJcbiAgICBjb25zdCBbLCBncm91cElkLCBhcnRpZmFjdElkLCB2ZXJzaW9uXSA9IG1hdGNoO1xyXG4gICAgY29uc3QgZnVsbE5hbWUgPSBgJHtncm91cElkfToke2FydGlmYWN0SWR9YDtcclxuICAgIGRlcHNbZnVsbE5hbWVdID0gdmVyc2lvbjtcclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGRlcHMpLmxlbmd0aCA+IDAgPyBkZXBzIDogbnVsbDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFBhcnNlIGJ1aWxkLmdyYWRsZSBjb250ZW50IChiYXNpYyBwYXJzaW5nKVxyXG4gKiBAcGFyYW0gY29udGVudCBidWlsZC5ncmFkbGUgY29udGVudFxyXG4gKiBAcmV0dXJucyBEZXBlbmRlbmNpZXMgb2JqZWN0IG9yIG51bGxcclxuICovXHJcbmZ1bmN0aW9uIHBhcnNlQnVpbGRHcmFkbGUoY29udGVudDogc3RyaW5nKTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB8IG51bGwge1xyXG4gIGNvbnN0IGRlcHM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcclxuICBcclxuICAvLyBTaW1wbGUgR3JhZGxlIHBhcnNpbmcgZm9yIGRlcGVuZGVuY2llc1xyXG4gIGNvbnN0IGxpbmVzID0gY29udGVudC5zcGxpdCgnXFxuJyk7XHJcbiAgbGV0IGluRGVwZW5kZW5jaWVzID0gZmFsc2U7XHJcbiAgXHJcbiAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVzKSB7XHJcbiAgICBjb25zdCB0cmltbWVkID0gbGluZS50cmltKCk7XHJcbiAgICBcclxuICAgIGlmICh0cmltbWVkLmluY2x1ZGVzKCdkZXBlbmRlbmNpZXMnKSAmJiB0cmltbWVkLmluY2x1ZGVzKCd7JykpIHtcclxuICAgICAgaW5EZXBlbmRlbmNpZXMgPSB0cnVlO1xyXG4gICAgICBjb250aW51ZTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKHRyaW1tZWQgPT09ICd9JyAmJiBpbkRlcGVuZGVuY2llcykge1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKGluRGVwZW5kZW5jaWVzICYmIHRyaW1tZWQuaW5jbHVkZXMoJ2ltcGxlbWVudGF0aW9uJykgfHwgdHJpbW1lZC5pbmNsdWRlcygnY29tcGlsZScpKSB7XHJcbiAgICAgIC8vIGltcGxlbWVudGF0aW9uICdncm91cDphcnRpZmFjdDp2ZXJzaW9uJ1xyXG4gICAgICAvLyBpbXBsZW1lbnRhdGlvbihcImdyb3VwOmFydGlmYWN0OnZlcnNpb25cIilcclxuICAgICAgY29uc3QgbWF0Y2ggPSB0cmltbWVkLm1hdGNoKC8oPzppbXBsZW1lbnRhdGlvbnxjb21waWxlKVxccypbKFwiXT8oW146KV0rKTooW146KV0rKTooW146KV0rKS8pO1xyXG4gICAgICBpZiAobWF0Y2gpIHtcclxuICAgICAgICBjb25zdCBbLCBncm91cCwgYXJ0aWZhY3QsIHZlcnNpb25dID0gbWF0Y2g7XHJcbiAgICAgICAgY29uc3QgZnVsbE5hbWUgPSBgJHtncm91cH06JHthcnRpZmFjdH1gO1xyXG4gICAgICAgIGRlcHNbZnVsbE5hbWVdID0gdmVyc2lvbjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICByZXR1cm4gT2JqZWN0LmtleXMoZGVwcykubGVuZ3RoID4gMCA/IGRlcHMgOiBudWxsO1xyXG59XHJcblxyXG4vKipcclxuICogUGFyc2UgZ28ubW9kIGNvbnRlbnRcclxuICogQHBhcmFtIGNvbnRlbnQgZ28ubW9kIGNvbnRlbnRcclxuICogQHJldHVybnMgRGVwZW5kZW5jaWVzIG9iamVjdCBvciBudWxsXHJcbiAqL1xyXG5mdW5jdGlvbiBwYXJzZUdvTW9kKGNvbnRlbnQ6IHN0cmluZyk6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gfCBudWxsIHtcclxuICBjb25zdCBkZXBzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge307XHJcbiAgY29uc3QgbGluZXMgPSBjb250ZW50LnNwbGl0KCdcXG4nKTtcclxuICBcclxuICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZXMpIHtcclxuICAgIGNvbnN0IHRyaW1tZWQgPSBsaW5lLnRyaW0oKTtcclxuICAgIGlmICh0cmltbWVkLnN0YXJ0c1dpdGgoJ3JlcXVpcmUnKSkge1xyXG4gICAgICAvLyByZXF1aXJlIChcclxuICAgICAgLy8gICBtb2R1bGUgdjEuMC4wXHJcbiAgICAgIC8vIClcclxuICAgICAgY29udGludWU7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmICh0cmltbWVkLnN0YXJ0c1dpdGgoJ3JlcXVpcmUgJykpIHtcclxuICAgICAgLy8gcmVxdWlyZSBtb2R1bGUgdjEuMC4wXHJcbiAgICAgIGNvbnN0IG1hdGNoID0gdHJpbW1lZC5tYXRjaCgvcmVxdWlyZVxccysoW15cXHNdKylcXHMrKFteXFxzXSspLyk7XHJcbiAgICAgIGlmIChtYXRjaCkge1xyXG4gICAgICAgIGNvbnN0IFssIG1vZHVsZSwgdmVyc2lvbl0gPSBtYXRjaDtcclxuICAgICAgICBkZXBzW21vZHVsZV0gPSB2ZXJzaW9uO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHRyaW1tZWQgJiYgIXRyaW1tZWQuc3RhcnRzV2l0aCgnZ28gJykgJiYgIXRyaW1tZWQuc3RhcnRzV2l0aCgnbW9kdWxlICcpICYmICF0cmltbWVkLnN0YXJ0c1dpdGgoJy8vJykpIHtcclxuICAgICAgLy8gTW9kdWxlIHZlcnNpb24gbGluZVxyXG4gICAgICBjb25zdCBtYXRjaCA9IHRyaW1tZWQubWF0Y2goL14oW15cXHNdKylcXHMrKFteXFxzXSspLyk7XHJcbiAgICAgIGlmIChtYXRjaCkge1xyXG4gICAgICAgIGNvbnN0IFssIG1vZHVsZSwgdmVyc2lvbl0gPSBtYXRjaDtcclxuICAgICAgICBkZXBzW21vZHVsZV0gPSB2ZXJzaW9uO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIHJldHVybiBPYmplY3Qua2V5cyhkZXBzKS5sZW5ndGggPiAwID8gZGVwcyA6IG51bGw7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQYXJzZSAuY3Nwcm9qIGNvbnRlbnQgKGJhc2ljIFhNTCBwYXJzaW5nKVxyXG4gKiBAcGFyYW0gY29udGVudCAuY3Nwcm9qIGNvbnRlbnRcclxuICogQHJldHVybnMgRGVwZW5kZW5jaWVzIG9iamVjdCBvciBudWxsXHJcbiAqL1xyXG5mdW5jdGlvbiBwYXJzZUNzcHJvaihjb250ZW50OiBzdHJpbmcpOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHwgbnVsbCB7XHJcbiAgY29uc3QgZGVwczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xyXG4gIFxyXG4gIC8vIFNpbXBsZSBYTUwgcGFyc2luZyBmb3IgUGFja2FnZVJlZmVyZW5jZVxyXG4gIGNvbnN0IHBhY2thZ2VSZWZSZWdleCA9IC88UGFja2FnZVJlZmVyZW5jZVxccytJbmNsdWRlPVwiKFteXCJdKylcIlxccytWZXJzaW9uPVwiKFteXCJdKylcIlxccypcXC8/Pi9nO1xyXG4gIGxldCBtYXRjaDtcclxuICBcclxuICB3aGlsZSAoKG1hdGNoID0gcGFja2FnZVJlZlJlZ2V4LmV4ZWMoY29udGVudCkpICE9PSBudWxsKSB7XHJcbiAgICBjb25zdCBbLCBwYWNrYWdlTmFtZSwgdmVyc2lvbl0gPSBtYXRjaDtcclxuICAgIGRlcHNbcGFja2FnZU5hbWVdID0gdmVyc2lvbjtcclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGRlcHMpLmxlbmd0aCA+IDAgPyBkZXBzIDogbnVsbDtcclxufVxyXG5cclxuLyoqXHJcbiAqIERldGVjdCBsYW5ndWFnZXMgZnJvbSBmaWxlIGV4dGVuc2lvbnNcclxuICogQHBhcmFtIGZpbGVzIEFycmF5IG9mIGV4dHJhY3RlZCBmaWxlc1xyXG4gKiBAcmV0dXJucyBBcnJheSBvZiBkZXRlY3RlZCBsYW5ndWFnZXNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkZXRlY3RMYW5ndWFnZXNGcm9tRmlsZXMoZmlsZXM6IHsgcGF0aD86IHN0cmluZzsgbmFtZT86IHN0cmluZyB9W10pOiBMYW5ndWFnZVtdIHtcclxuICBjb25zdCBsYW5ndWFnZU1hcDogUmVjb3JkPHN0cmluZywgTGFuZ3VhZ2U+ID0ge1xyXG4gICAgJy5qcyc6ICdub2RlJyxcclxuICAgICcuanN4JzogJ25vZGUnLFxyXG4gICAgJy50cyc6ICdub2RlJyxcclxuICAgICcudHN4JzogJ25vZGUnLFxyXG4gICAgJy5weSc6ICdweXRob24nLFxyXG4gICAgJy5qYXZhJzogJ2phdmEnLFxyXG4gICAgJy5nbyc6ICdnbycsXHJcbiAgICAnLmNzJzogJ2RvdG5ldCcsXHJcbiAgICAnLmZzJzogJ2RvdG5ldCcsXHJcbiAgICAnLnZiJzogJ2RvdG5ldCcsXHJcbiAgfTtcclxuICBcclxuICBjb25zdCBkZXRlY3RlZExhbmd1YWdlcyA9IG5ldyBTZXQ8TGFuZ3VhZ2U+KCk7XHJcbiAgXHJcbiAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7XHJcbiAgICBjb25zdCBmaWxlUGF0aCA9IGZpbGUucGF0aCB8fCBmaWxlLm5hbWU7XHJcbiAgICBpZiAoZmlsZVBhdGgpIHtcclxuICAgICAgY29uc3QgZXh0ID0gZ2V0RmlsZUV4dGVuc2lvbihmaWxlUGF0aCk7XHJcbiAgICAgIGNvbnN0IGxhbmd1YWdlID0gbGFuZ3VhZ2VNYXBbZXh0XTtcclxuICAgICAgaWYgKGxhbmd1YWdlKSB7XHJcbiAgICAgICAgZGV0ZWN0ZWRMYW5ndWFnZXMuYWRkKGxhbmd1YWdlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICByZXR1cm4gQXJyYXkuZnJvbShkZXRlY3RlZExhbmd1YWdlcyk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgZmlsZSBleHRlbnNpb24gZnJvbSBwYXRoXHJcbiAqIEBwYXJhbSBmaWxlUGF0aCBGaWxlIHBhdGhcclxuICogQHJldHVybnMgRmlsZSBleHRlbnNpb24gd2l0aCBkb3RcclxuICovXHJcbmZ1bmN0aW9uIGdldEZpbGVFeHRlbnNpb24oZmlsZVBhdGg6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgY29uc3QgbGFzdERvdCA9IGZpbGVQYXRoLmxhc3RJbmRleE9mKCcuJyk7XHJcbiAgaWYgKGxhc3REb3QgPT09IC0xKSByZXR1cm4gJyc7XHJcbiAgcmV0dXJuIGZpbGVQYXRoLnN1YnN0cmluZyhsYXN0RG90KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCBwcmltYXJ5IGxhbmd1YWdlIGZyb20gbWFuaWZlc3RzXHJcbiAqIEBwYXJhbSBtYW5pZmVzdHMgQXJyYXkgb2YgcHJvamVjdCBtYW5pZmVzdHNcclxuICogQHJldHVybnMgUHJpbWFyeSBsYW5ndWFnZSBvciBudWxsXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJpbWFyeUxhbmd1YWdlKG1hbmlmZXN0czogUHJvamVjdE1hbmlmZXN0W10pOiBMYW5ndWFnZSB8IG51bGwge1xyXG4gIGlmIChtYW5pZmVzdHMubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbDtcclxuICBcclxuICAvLyBQcmlvcml0eSBvcmRlcjogbm9kZSwgcHl0aG9uLCBqYXZhLCBnbywgZG90bmV0XHJcbiAgY29uc3QgcHJpb3JpdHk6IExhbmd1YWdlW10gPSBbJ25vZGUnLCAncHl0aG9uJywgJ2phdmEnLCAnZ28nLCAnZG90bmV0J107XHJcbiAgXHJcbiAgZm9yIChjb25zdCBsYW5nIG9mIHByaW9yaXR5KSB7XHJcbiAgICBpZiAobWFuaWZlc3RzLnNvbWUobSA9PiBtLmxhbmd1YWdlID09PSBsYW5nKSkge1xyXG4gICAgICByZXR1cm4gbGFuZztcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgcmV0dXJuIG1hbmlmZXN0c1swXS5sYW5ndWFnZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIGEgZmlsZSBpcyBhIG1hbmlmZXN0IGZpbGVcclxuICogQHBhcmFtIGZpbGVQYXRoIEZpbGUgcGF0aFxyXG4gKiBAcmV0dXJucyBUcnVlIGlmIGl0J3MgYSBtYW5pZmVzdCBmaWxlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNNYW5pZmVzdEZpbGUoZmlsZVBhdGg6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gIGNvbnN0IG1hbmlmZXN0RmlsZXMgPSBbXHJcbiAgICAncGFja2FnZS5qc29uJyxcclxuICAgICdyZXF1aXJlbWVudHMudHh0JyxcclxuICAgICdweXByb2plY3QudG9tbCcsXHJcbiAgICAncG9tLnhtbCcsXHJcbiAgICAnYnVpbGQuZ3JhZGxlJyxcclxuICAgICdidWlsZC5ncmFkbGUua3RzJyxcclxuICAgICdnby5tb2QnLFxyXG4gICAgJy5jc3Byb2onLFxyXG4gIF07XHJcbiAgXHJcbiAgcmV0dXJuIG1hbmlmZXN0RmlsZXMuc29tZShtYW5pZmVzdCA9PiBmaWxlUGF0aC5lbmRzV2l0aChtYW5pZmVzdCkpO1xyXG59XHJcblxyXG4vKipcclxuICogR2V0IG1hbmlmZXN0IGZpbGUgdHlwZSBmcm9tIHBhdGhcclxuICogQHBhcmFtIGZpbGVQYXRoIEZpbGUgcGF0aFxyXG4gKiBAcmV0dXJucyBNYW5pZmVzdCB0eXBlIG9yIG51bGxcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRNYW5pZmVzdFR5cGUoZmlsZVBhdGg6IHN0cmluZyk6IHsgbGFuZ3VhZ2U6IExhbmd1YWdlOyB0eXBlOiBzdHJpbmcgfSB8IG51bGwge1xyXG4gIGlmIChmaWxlUGF0aC5lbmRzV2l0aCgncGFja2FnZS5qc29uJykpIHtcclxuICAgIHJldHVybiB7IGxhbmd1YWdlOiAnbm9kZScsIHR5cGU6ICdwYWNrYWdlLmpzb24nIH07XHJcbiAgfVxyXG4gIGlmIChmaWxlUGF0aC5lbmRzV2l0aCgncmVxdWlyZW1lbnRzLnR4dCcpKSB7XHJcbiAgICByZXR1cm4geyBsYW5ndWFnZTogJ3B5dGhvbicsIHR5cGU6ICdyZXF1aXJlbWVudHMudHh0JyB9O1xyXG4gIH1cclxuICBpZiAoZmlsZVBhdGguZW5kc1dpdGgoJ3B5cHJvamVjdC50b21sJykpIHtcclxuICAgIHJldHVybiB7IGxhbmd1YWdlOiAncHl0aG9uJywgdHlwZTogJ3B5cHJvamVjdC50b21sJyB9O1xyXG4gIH1cclxuICBpZiAoZmlsZVBhdGguZW5kc1dpdGgoJ3BvbS54bWwnKSkge1xyXG4gICAgcmV0dXJuIHsgbGFuZ3VhZ2U6ICdqYXZhJywgdHlwZTogJ3BvbS54bWwnIH07XHJcbiAgfVxyXG4gIGlmIChmaWxlUGF0aC5lbmRzV2l0aCgnYnVpbGQuZ3JhZGxlJykgfHwgZmlsZVBhdGguZW5kc1dpdGgoJ2J1aWxkLmdyYWRsZS5rdHMnKSkge1xyXG4gICAgcmV0dXJuIHsgbGFuZ3VhZ2U6ICdqYXZhJywgdHlwZTogJ2J1aWxkLmdyYWRsZScgfTtcclxuICB9XHJcbiAgaWYgKGZpbGVQYXRoLmVuZHNXaXRoKCdnby5tb2QnKSkge1xyXG4gICAgcmV0dXJuIHsgbGFuZ3VhZ2U6ICdnbycsIHR5cGU6ICdnby5tb2QnIH07XHJcbiAgfVxyXG4gIGlmIChmaWxlUGF0aC5lbmRzV2l0aCgnLmNzcHJvaicpKSB7XHJcbiAgICByZXR1cm4geyBsYW5ndWFnZTogJ2RvdG5ldCcsIHR5cGU6ICcuY3Nwcm9qJyB9O1xyXG4gIH1cclxuICBcclxuICByZXR1cm4gbnVsbDtcclxufVxyXG4iXSwibmFtZXMiOlsiZGV0ZWN0UHJvamVjdE1hbmlmZXN0cyIsImZpbGVzIiwibWFuaWZlc3RzIiwicGFja2FnZUpzb24iLCJmaW5kIiwiZiIsInBhdGgiLCJuYW1lIiwiZW5kc1dpdGgiLCJwa2ciLCJKU09OIiwicGFyc2UiLCJjb250ZW50IiwicHVzaCIsImxhbmd1YWdlIiwiZmlsZSIsImRlcGVuZGVuY2llcyIsImRldkRlcGVuZGVuY2llcyIsInBlZXJEZXBlbmRlbmNpZXMiLCJvcHRpb25hbERlcGVuZGVuY2llcyIsImVycm9yIiwiY29uc29sZSIsIndhcm4iLCJyZXF1aXJlbWVudHNUeHQiLCJwYXJzZVJlcXVpcmVtZW50c1R4dCIsInB5cHJvamVjdFRvbWwiLCJkZXBzIiwicGFyc2VQeXByb2plY3RUb21sIiwicG9tWG1sIiwicGFyc2VQb21YbWwiLCJidWlsZEdyYWRsZSIsInBhcnNlQnVpbGRHcmFkbGUiLCJnb01vZCIsInBhcnNlR29Nb2QiLCJjc3Byb2pGaWxlcyIsImZpbHRlciIsImNzcHJvaiIsInBhcnNlQ3Nwcm9qIiwibGluZXMiLCJzcGxpdCIsImxpbmUiLCJ0cmltbWVkIiwidHJpbSIsInN0YXJ0c1dpdGgiLCJtYXRjaCIsInZlcnNpb24iLCJpbkRlcGVuZGVuY2llcyIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJkZXBlbmRlbmN5UmVnZXgiLCJleGVjIiwiZ3JvdXBJZCIsImFydGlmYWN0SWQiLCJmdWxsTmFtZSIsImluY2x1ZGVzIiwiZ3JvdXAiLCJhcnRpZmFjdCIsIm1vZHVsZSIsInBhY2thZ2VSZWZSZWdleCIsInBhY2thZ2VOYW1lIiwiZGV0ZWN0TGFuZ3VhZ2VzRnJvbUZpbGVzIiwibGFuZ3VhZ2VNYXAiLCJkZXRlY3RlZExhbmd1YWdlcyIsIlNldCIsImZpbGVQYXRoIiwiZXh0IiwiZ2V0RmlsZUV4dGVuc2lvbiIsImFkZCIsIkFycmF5IiwiZnJvbSIsImxhc3REb3QiLCJsYXN0SW5kZXhPZiIsInN1YnN0cmluZyIsImdldFByaW1hcnlMYW5ndWFnZSIsInByaW9yaXR5IiwibGFuZyIsInNvbWUiLCJtIiwiaXNNYW5pZmVzdEZpbGUiLCJtYW5pZmVzdEZpbGVzIiwibWFuaWZlc3QiLCJnZXRNYW5pZmVzdFR5cGUiLCJ0eXBlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/analysis/detect.ts\n");

/***/ }),

/***/ "(rsc)/./lib/analysis/run.ts":
/*!*****************************!*\
  !*** ./lib/analysis/run.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkAnalysisFeasibility: () => (/* binding */ checkAnalysisFeasibility),\n/* harmony export */   estimateAnalysisTime: () => (/* binding */ estimateAnalysisTime),\n/* harmony export */   getAnalysisProgress: () => (/* binding */ getAnalysisProgress),\n/* harmony export */   runAnalysisOnFiles: () => (/* binding */ runAnalysisOnFiles),\n/* harmony export */   runBaselineAnalysis: () => (/* binding */ runBaselineAnalysis),\n/* harmony export */   validateAnalysisOptions: () => (/* binding */ validateAnalysisOptions)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _baseline_loader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./baseline.loader */ \"(rsc)/./lib/analysis/baseline.loader.ts\");\n/* harmony import */ var _detect__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./detect */ \"(rsc)/./lib/analysis/detect.ts\");\n/* harmony import */ var _deps__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./deps */ \"(rsc)/./lib/analysis/deps.ts\");\n/* harmony import */ var _scan__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./scan */ \"(rsc)/./lib/analysis/scan.ts\");\n/* harmony import */ var _files_unzip__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../files/unzip */ \"(rsc)/./lib/files/unzip.ts\");\n/* harmony import */ var _files_single_file__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../files/single-file */ \"(rsc)/./lib/files/single-file.ts\");\n/* harmony import */ var _files_store__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../files/store */ \"(rsc)/./lib/files/store.ts\");\n\n\n\n\n\n\n\n\n/**\n * Run complete baseline analysis on a ZIP file\n * @param zipPath Path to ZIP file\n * @param options Analysis options\n * @returns Analysis result with report and artifacts\n */ async function analyzeWithGroq(files, projectType, dependencies) {\n    const results = [];\n    // Skip Groq analysis if no GROQ_API_KEY is available\n    if (!process.env.GROQ_API_KEY) {\n        console.log('Skipping Groq analysis: GROQ_API_KEY not configured');\n        return results;\n    }\n    // Analyze up to 5 key files to avoid rate limits\n    const keyFiles = files.filter((file)=>{\n        const fileName = file.name || file.path || 'unknown';\n        const ext = fileName.split('.').pop()?.toLowerCase();\n        return [\n            'js',\n            'ts',\n            'jsx',\n            'tsx',\n            'css',\n            'html',\n            'vue',\n            'svelte',\n            'py',\n            'java',\n            'go',\n            'cs'\n        ].includes(ext || '');\n    }).slice(0, 5);\n    for (const file of keyFiles){\n        try {\n            // Use absolute URL for server-side fetch\n            const baseUrl = process.env.PUBLIC_URL || 'http://localhost:3000';\n            const response = await fetch(`${baseUrl}/api/analyze/groq`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    code: file.content,\n                    filename: file.name || file.path || 'unknown',\n                    projectType,\n                    dependencies\n                })\n            });\n            if (response.ok) {\n                const result = await response.json();\n                results.push(result);\n            } else {\n                console.error(`Groq analysis failed for ${file.name || file.path}: ${response.status} ${response.statusText}`);\n            }\n        } catch (error) {\n            console.error(`Groq analysis failed for ${file.name || file.path}:`, error);\n        }\n    }\n    return results;\n}\nasync function runBaselineAnalysis(filePath, options = {}) {\n    const { maxFiles = 50000, maxFileSize = 2 * 1024 * 1024, allowedExtensions = [\n        '.html',\n        '.htm',\n        '.css',\n        '.js',\n        '.mjs',\n        '.ts',\n        '.svg',\n        '.wasm',\n        '.json',\n        '.webmanifest'\n    ], ignorePaths = [\n        '/node_modules/',\n        '/.venv/',\n        '/venv/',\n        '/dist/',\n        '/build/',\n        '/.git/',\n        '/.next/'\n    ], storeResults = true, publicUrl = 'http://localhost:3000' } = options;\n    const analysisId = (0,crypto__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n    const startTime = Date.now();\n    try {\n        // Load baseline rules\n        const rules = await (0,_baseline_loader__WEBPACK_IMPORTED_MODULE_1__.loadBaselineRules)();\n        // Determine if file is ZIP or single file\n        const isZipFile = filePath.toLowerCase().endsWith('.zip');\n        let extractResult;\n        if (isZipFile) {\n            // Extract ZIP file\n            extractResult = await (0,_files_unzip__WEBPACK_IMPORTED_MODULE_5__.extractZipToMemory)(filePath, {\n                maxFiles,\n                maxFileSize,\n                allowedExtensions,\n                ignorePaths\n            });\n            if (extractResult.errors.length > 0) {\n                console.warn('Extraction warnings:', extractResult.errors);\n            }\n        } else {\n            // Process single file\n            const fs = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 23));\n            const content = fs.readFileSync(filePath, 'utf8');\n            if (!(0,_files_single_file__WEBPACK_IMPORTED_MODULE_6__.shouldAnalyzeFile)(filePath)) {\n                throw new Error(`File type not supported for analysis: ${filePath}`);\n            }\n            extractResult = (0,_files_single_file__WEBPACK_IMPORTED_MODULE_6__.processSingleFile)(filePath, content, maxFileSize);\n        }\n        // Detect project manifests and languages\n        const manifests = (0,_detect__WEBPACK_IMPORTED_MODULE_2__.detectProjectManifests)(extractResult.files);\n        const detectedLanguages = (0,_detect__WEBPACK_IMPORTED_MODULE_2__.detectLanguagesFromFiles)(extractResult.files);\n        // Create analysis context\n        const context = {\n            rules,\n            extractedFiles: extractResult.files,\n            manifests,\n            detectedLanguages\n        };\n        // Run analysis\n        const findings = await runAnalysis(context);\n        // Add additional analysis findings\n        const additionalFindings = await runAdditionalAnalysis(context);\n        findings.push(...additionalFindings);\n        // Generate summary\n        const summary = generateSummary(findings, detectedLanguages);\n        // Run Groq AI analysis\n        const groqResults = await analyzeWithGroq(extractResult.files, detectedLanguages.join(', '), context.manifests.flatMap((m)=>Object.keys(m.dependencies || {})));\n        // Create report\n        const report = {\n            findings,\n            summary,\n            metadata: {\n                analysisId,\n                timestamp: new Date().toISOString(),\n                projectName: getProjectName(filePath),\n                detectedLanguages,\n                totalFiles: extractResult.totalFiles,\n                scannedFiles: extractResult.files.length,\n                skippedFiles: extractResult.skippedFiles,\n                groqAnalysis: groqResults\n            }\n        };\n        // Store results if requested\n        let artifacts;\n        if (storeResults) {\n            artifacts = (0,_files_store__WEBPACK_IMPORTED_MODULE_7__.storeAnalysisResults)(report, {\n                publicUrl\n            });\n        }\n        const endTime = Date.now();\n        console.log(`Analysis completed in ${endTime - startTime}ms`);\n        return {\n            report,\n            artifacts\n        };\n    } catch (error) {\n        console.error('Analysis failed:', error);\n        throw new Error(`Analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n}\n/**\n * Run analysis on extracted files and manifests\n * @param context Analysis context\n * @returns Array of findings\n */ async function runAnalysis(context) {\n    const findings = [];\n    // Analyze dependencies\n    const dependencyFindings = (0,_deps__WEBPACK_IMPORTED_MODULE_3__.analyzeDependencies)(context.manifests, context.rules);\n    findings.push(...dependencyFindings);\n    // Scan source files for deprecated patterns\n    const patternFindings = (0,_scan__WEBPACK_IMPORTED_MODULE_4__.scanSourceFiles)(context.extractedFiles, context.rules);\n    findings.push(...patternFindings);\n    return findings;\n}\n/**\n * Run additional analysis for enhanced detection\n * @param context Analysis context\n * @returns Array of additional findings\n */ async function runAdditionalAnalysis(context) {\n    const findings = [];\n    // Analyze code quality and best practices\n    const qualityFindings = analyzeCodeQuality(context.extractedFiles);\n    findings.push(...qualityFindings);\n    // Analyze security vulnerabilities\n    const securityFindings = analyzeSecurityVulnerabilities(context.extractedFiles);\n    findings.push(...securityFindings);\n    // Analyze performance issues\n    const performanceFindings = analyzePerformanceIssues(context.extractedFiles);\n    findings.push(...performanceFindings);\n    return findings;\n}\n/**\n * Analyze code quality and best practices\n * @param files Array of extracted files\n * @returns Array of quality findings\n */ function analyzeCodeQuality(files) {\n    const findings = [];\n    for (const file of files){\n        const filePath = file.path || file.name || 'unknown';\n        const extension = getFileExtension(filePath);\n        const language = detectLanguageFromExtension(extension);\n        if (!language) continue;\n        const lines = file.content.split('\\n');\n        // Check for code quality issues\n        for(let lineIndex = 0; lineIndex < lines.length; lineIndex++){\n            const line = lines[lineIndex];\n            const lineNumber = lineIndex + 1;\n            // Skip empty lines and comments\n            if (isCommentLine(line, language) || line.trim() === '') {\n                continue;\n            }\n            // Check for long lines\n            if (line.length > 120) {\n                findings.push({\n                    kind: 'pattern',\n                    lang: language,\n                    file: filePath,\n                    line: lineNumber,\n                    status: 'affected',\n                    reason: 'code-quality',\n                    issue: 'Line is too long (>120 characters)',\n                    pattern: 'long-line',\n                    quickFix: 'Break long lines for better readability'\n                });\n            }\n            // Check for trailing whitespace\n            if (line.endsWith(' ') || line.endsWith('\\t')) {\n                findings.push({\n                    kind: 'pattern',\n                    lang: language,\n                    file: filePath,\n                    line: lineNumber,\n                    status: 'affected',\n                    reason: 'code-quality',\n                    issue: 'Trailing whitespace detected',\n                    pattern: 'trailing-whitespace',\n                    quickFix: 'Remove trailing whitespace'\n                });\n            }\n            // Check for mixed tabs and spaces\n            if (line.includes('\\t') && line.includes(' ')) {\n                findings.push({\n                    kind: 'pattern',\n                    lang: language,\n                    file: filePath,\n                    line: lineNumber,\n                    status: 'affected',\n                    reason: 'code-quality',\n                    issue: 'Mixed tabs and spaces for indentation',\n                    pattern: 'mixed-indentation',\n                    quickFix: 'Use consistent indentation (prefer spaces)'\n                });\n            }\n            // Check for TODO/FIXME comments\n            if (line.toLowerCase().includes('todo') || line.toLowerCase().includes('fixme')) {\n                findings.push({\n                    kind: 'pattern',\n                    lang: language,\n                    file: filePath,\n                    line: lineNumber,\n                    status: 'affected',\n                    reason: 'code-quality',\n                    issue: 'TODO/FIXME comment found',\n                    pattern: 'todo-comment',\n                    quickFix: 'Address TODO/FIXME items before production'\n                });\n            }\n            // Check for console.log in production code\n            if (language === 'node' && line.includes('console.log')) {\n                findings.push({\n                    kind: 'pattern',\n                    lang: language,\n                    file: filePath,\n                    line: lineNumber,\n                    status: 'affected',\n                    reason: 'code-quality',\n                    issue: 'console.log should be removed in production',\n                    pattern: 'console-log',\n                    quickFix: 'Use proper logging library or remove debug statements'\n                });\n            }\n            // Check for print statements in Python\n            if (language === 'python' && line.includes('print(')) {\n                findings.push({\n                    kind: 'pattern',\n                    lang: language,\n                    file: filePath,\n                    line: lineNumber,\n                    status: 'affected',\n                    reason: 'code-quality',\n                    issue: 'print() should be removed in production',\n                    pattern: 'print-statement',\n                    quickFix: 'Use proper logging library or remove debug statements'\n                });\n            }\n        }\n    }\n    return findings;\n}\n/**\n * Analyze security vulnerabilities\n * @param files Array of extracted files\n * @returns Array of security findings\n */ function analyzeSecurityVulnerabilities(files) {\n    const findings = [];\n    for (const file of files){\n        const filePath = file.path || file.name || 'unknown';\n        const extension = getFileExtension(filePath);\n        const language = detectLanguageFromExtension(extension);\n        if (!language) continue;\n        const lines = file.content.split('\\n');\n        // Check for security vulnerabilities\n        for(let lineIndex = 0; lineIndex < lines.length; lineIndex++){\n            const line = lines[lineIndex];\n            const lineNumber = lineIndex + 1;\n            // Skip empty lines and comments\n            if (isCommentLine(line, language) || line.trim() === '') {\n                continue;\n            }\n            // Check for hardcoded passwords\n            if (line.toLowerCase().includes('password') && line.includes('=') && !line.includes('input(')) {\n                findings.push({\n                    kind: 'pattern',\n                    lang: language,\n                    file: filePath,\n                    line: lineNumber,\n                    status: 'affected',\n                    reason: 'security',\n                    issue: 'Potential hardcoded password detected',\n                    pattern: 'hardcoded-password',\n                    quickFix: 'Use environment variables or secure credential storage'\n                });\n            }\n            // Check for hardcoded API keys\n            if (line.toLowerCase().includes('api') && line.toLowerCase().includes('key') && line.includes('=')) {\n                findings.push({\n                    kind: 'pattern',\n                    lang: language,\n                    file: filePath,\n                    line: lineNumber,\n                    status: 'affected',\n                    reason: 'security',\n                    issue: 'Potential hardcoded API key detected',\n                    pattern: 'hardcoded-api-key',\n                    quickFix: 'Use environment variables or secure credential storage'\n                });\n            }\n            // Check for SQL injection vulnerabilities\n            if (line.includes('SELECT') || line.includes('INSERT') || line.includes('UPDATE') || line.includes('DELETE')) {\n                if (line.includes('+') || line.includes('${') || line.includes('%s')) {\n                    findings.push({\n                        kind: 'pattern',\n                        lang: language,\n                        file: filePath,\n                        line: lineNumber,\n                        status: 'affected',\n                        reason: 'security',\n                        issue: 'Potential SQL injection vulnerability',\n                        pattern: 'sql-injection',\n                        quickFix: 'Use parameterized queries or prepared statements'\n                    });\n                }\n            }\n            // Check for XSS vulnerabilities\n            if (line.includes('innerHTML') || line.includes('outerHTML') || line.includes('document.write')) {\n                findings.push({\n                    kind: 'pattern',\n                    lang: language,\n                    file: filePath,\n                    line: lineNumber,\n                    status: 'affected',\n                    reason: 'security',\n                    issue: 'Potential XSS vulnerability',\n                    pattern: 'xss-vulnerability',\n                    quickFix: 'Use textContent or sanitize HTML content'\n                });\n            }\n            // Check for unsafe deserialization\n            if (line.includes('pickle.load') || line.includes('unpickle') || line.includes('deserialize')) {\n                findings.push({\n                    kind: 'pattern',\n                    lang: language,\n                    file: filePath,\n                    line: lineNumber,\n                    status: 'affected',\n                    reason: 'security',\n                    issue: 'Unsafe deserialization detected',\n                    pattern: 'unsafe-deserialization',\n                    quickFix: 'Use safe serialization formats like JSON'\n                });\n            }\n        }\n    }\n    return findings;\n}\n/**\n * Analyze performance issues\n * @param files Array of extracted files\n * @returns Array of performance findings\n */ function analyzePerformanceIssues(files) {\n    const findings = [];\n    for (const file of files){\n        const filePath = file.path || file.name || 'unknown';\n        const extension = getFileExtension(filePath);\n        const language = detectLanguageFromExtension(extension);\n        if (!language) continue;\n        const lines = file.content.split('\\n');\n        // Check for performance issues\n        for(let lineIndex = 0; lineIndex < lines.length; lineIndex++){\n            const line = lines[lineIndex];\n            const lineNumber = lineIndex + 1;\n            // Skip empty lines and comments\n            if (isCommentLine(line, language) || line.trim() === '') {\n                continue;\n            }\n            // Check for synchronous file operations\n            if (language === 'node' && (line.includes('fs.readFileSync') || line.includes('fs.writeFileSync'))) {\n                findings.push({\n                    kind: 'pattern',\n                    lang: language,\n                    file: filePath,\n                    line: lineNumber,\n                    status: 'affected',\n                    reason: 'performance',\n                    issue: 'Synchronous file operation can block the event loop',\n                    pattern: 'sync-file-operation',\n                    quickFix: 'Use asynchronous file operations (fs.promises)'\n                });\n            }\n            // Check for blocking operations\n            if (line.includes('sleep(') || line.includes('time.sleep(')) {\n                findings.push({\n                    kind: 'pattern',\n                    lang: language,\n                    file: filePath,\n                    line: lineNumber,\n                    status: 'affected',\n                    reason: 'performance',\n                    issue: 'Blocking sleep operation detected',\n                    pattern: 'blocking-sleep',\n                    quickFix: 'Use asynchronous alternatives or reduce sleep time'\n                });\n            }\n            // Check for inefficient loops\n            if (line.includes('for') && line.includes('in') && line.includes('range(')) {\n                if (line.includes('len(') || line.includes('.length')) {\n                    findings.push({\n                        kind: 'pattern',\n                        lang: language,\n                        file: filePath,\n                        line: lineNumber,\n                        status: 'affected',\n                        reason: 'performance',\n                        issue: 'Inefficient loop with len()/length call',\n                        pattern: 'inefficient-loop',\n                        quickFix: 'Cache length or use enumerate()/entries()'\n                    });\n                }\n            }\n            // Check for string concatenation in loops\n            if (line.includes('+=') && line.includes('str') || line.includes('+=') && line.includes('string')) {\n                findings.push({\n                    kind: 'pattern',\n                    lang: language,\n                    file: filePath,\n                    line: lineNumber,\n                    status: 'affected',\n                    reason: 'performance',\n                    issue: 'String concatenation in loop is inefficient',\n                    pattern: 'string-concatenation',\n                    quickFix: 'Use join() or StringBuilder for better performance'\n                });\n            }\n        }\n    }\n    return findings;\n}\n/**\n * Get file extension from path\n * @param filePath File path\n * @returns File extension with dot\n */ function getFileExtension(filePath) {\n    const lastDot = filePath.lastIndexOf('.');\n    if (lastDot === -1) return '';\n    return filePath.substring(lastDot);\n}\n/**\n * Detect language from file extension\n * @param extension File extension\n * @returns Language or null\n */ function detectLanguageFromExtension(extension) {\n    const languageMap = {\n        '.html': 'node',\n        '.htm': 'node',\n        '.css': 'node',\n        '.js': 'node',\n        '.jsx': 'node',\n        '.mjs': 'node',\n        '.ts': 'node',\n        '.tsx': 'node',\n        '.svg': 'node',\n        '.wasm': 'node',\n        '.json': 'node',\n        '.webmanifest': 'node',\n        '.py': 'python',\n        '.java': 'java',\n        '.go': 'go',\n        '.cs': 'dotnet',\n        '.fs': 'dotnet',\n        '.vb': 'dotnet'\n    };\n    return languageMap[extension] || null;\n}\n/**\n * Check if a line is a comment\n * @param line Line content\n * @param language Language context\n * @returns True if comment line\n */ function isCommentLine(line, language) {\n    const trimmed = line.trim();\n    switch(language){\n        case 'node':\n        case 'java':\n        case 'go':\n        case 'dotnet':\n            return trimmed.startsWith('//') || trimmed.startsWith('/*') || trimmed.startsWith('*') || trimmed.startsWith('<!--');\n        case 'python':\n            return trimmed.startsWith('#');\n        default:\n            return false;\n    }\n}\n/**\n * Generate summary from findings\n * @param findings Array of findings\n * @param detectedLanguages Array of detected languages\n * @returns Report summary\n */ function generateSummary(findings, detectedLanguages) {\n    const summary = {\n        ok: 0,\n        affected: 0,\n        unknown: 0,\n        byLanguage: {}\n    };\n    // Initialize language summaries\n    for (const language of detectedLanguages){\n        summary.byLanguage[language] = {\n            ok: 0,\n            affected: 0,\n            unknown: 0\n        };\n    }\n    // Count findings by status and language\n    for (const finding of findings){\n        if (finding.kind === 'dependency') {\n            summary[finding.status]++;\n            if (summary.byLanguage[finding.lang]) {\n                summary.byLanguage[finding.lang][finding.status]++;\n            }\n        } else if (finding.kind === 'pattern') {\n            summary.affected++;\n            if (summary.byLanguage[finding.lang]) {\n                summary.byLanguage[finding.lang].affected++;\n            }\n        }\n    }\n    return summary;\n}\n/**\n * Get project name from ZIP path\n * @param zipPath ZIP file path\n * @returns Project name\n */ function getProjectName(zipPath) {\n    const pathParts = zipPath.split('/');\n    const fileName = pathParts[pathParts.length - 1];\n    return fileName.replace(/\\.zip$/i, '');\n}\n/**\n * Run analysis on extracted files (for testing)\n * @param files Array of extracted files\n * @param manifests Array of project manifests\n * @param rules Baseline rules\n * @returns Analysis result\n */ async function runAnalysisOnFiles(files, manifests, rules) {\n    const analysisId = (0,crypto__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n    const detectedLanguages = (0,_detect__WEBPACK_IMPORTED_MODULE_2__.detectLanguagesFromFiles)(files);\n    const context = {\n        rules,\n        extractedFiles: files,\n        manifests,\n        detectedLanguages\n    };\n    const findings = await runAnalysis(context);\n    const summary = generateSummary(findings, detectedLanguages);\n    const report = {\n        findings,\n        summary,\n        metadata: {\n            analysisId,\n            timestamp: new Date().toISOString(),\n            projectName: 'test-project',\n            detectedLanguages,\n            totalFiles: files.length,\n            scannedFiles: files.length,\n            skippedFiles: 0\n        }\n    };\n    return {\n        report\n    };\n}\n/**\n * Validate analysis options\n * @param options Analysis options\n * @returns Validated options\n */ function validateAnalysisOptions(options) {\n    return {\n        maxFiles: Math.min(options.maxFiles || 50000, 100000),\n        maxFileSize: Math.min(options.maxFileSize || 2 * 1024 * 1024, 10 * 1024 * 1024),\n        allowedExtensions: options.allowedExtensions || [\n            '.html',\n            '.htm',\n            '.css',\n            '.js',\n            '.mjs',\n            '.ts',\n            '.svg',\n            '.wasm',\n            '.json',\n            '.webmanifest'\n        ],\n        ignorePaths: options.ignorePaths || [\n            '/node_modules/',\n            '/.venv/',\n            '/venv/',\n            '/dist/',\n            '/build/',\n            '/.git/',\n            '/.next/'\n        ],\n        storeResults: options.storeResults !== false,\n        publicUrl: options.publicUrl || 'http://localhost:3000'\n    };\n}\n/**\n * Get analysis progress (for long-running analyses)\n * @param context Analysis context\n * @param currentStep Current step\n * @param totalSteps Total steps\n * @returns Progress information\n */ function getAnalysisProgress(context, currentStep, totalSteps) {\n    const steps = [\n        'Loading baseline rules',\n        'Extracting ZIP file',\n        'Detecting project manifests',\n        'Analyzing dependencies',\n        'Scanning source files',\n        'Generating report'\n    ];\n    const step = steps[currentStep] || 'Unknown';\n    const progress = currentStep / totalSteps * 100;\n    let details = '';\n    if (currentStep === 1) {\n        details = `Extracted ${context.extractedFiles.length} files`;\n    } else if (currentStep === 2) {\n        details = `Found ${context.manifests.length} manifests, ${context.detectedLanguages.length} languages`;\n    } else if (currentStep === 3) {\n        details = `Analyzing ${context.manifests.length} dependency manifests`;\n    } else if (currentStep === 4) {\n        details = `Scanning ${context.extractedFiles.length} source files`;\n    }\n    return {\n        step,\n        progress,\n        details\n    };\n}\n/**\n * Estimate analysis time\n * @param fileCount Number of files\n * @param manifestCount Number of manifests\n * @returns Estimated time in milliseconds\n */ function estimateAnalysisTime(fileCount, manifestCount) {\n    // Base time: 1 second\n    let estimated = 1000;\n    // Add time for file processing: 10ms per file\n    estimated += fileCount * 10;\n    // Add time for manifest processing: 50ms per manifest\n    estimated += manifestCount * 50;\n    // Add time for pattern scanning: 5ms per file\n    estimated += fileCount * 5;\n    return Math.min(estimated, 30000); // Cap at 30 seconds\n}\n/**\n * Check if analysis is feasible\n * @param fileCount Number of files\n * @param totalSize Total size in bytes\n * @returns Feasibility check result\n */ function checkAnalysisFeasibility(fileCount, totalSize) {\n    const warnings = [];\n    let feasible = true;\n    // Check file count\n    if (fileCount > 50000) {\n        feasible = false;\n        warnings.push(`Too many files: ${fileCount} (limit: 50,000)`);\n    } else if (fileCount > 10000) {\n        warnings.push(`Large number of files: ${fileCount} (analysis may take longer)`);\n    }\n    // Check total size\n    if (totalSize > 100 * 1024 * 1024) {\n        feasible = false;\n        warnings.push(`Archive too large: ${Math.round(totalSize / 1024 / 1024)}MB (limit: 100MB)`);\n    } else if (totalSize > 50 * 1024 * 1024) {\n        warnings.push(`Large archive: ${Math.round(totalSize / 1024 / 1024)}MB (analysis may take longer)`);\n    }\n    const estimatedTimeMs = estimateAnalysisTime(fileCount, Math.min(fileCount / 100, 50));\n    const estimatedTime = `${Math.round(estimatedTimeMs / 1000)}s`;\n    return {\n        feasible,\n        warnings,\n        estimatedTime\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/analysis/run.ts\n");

/***/ }),

/***/ "(rsc)/./lib/analysis/scan.ts":
/*!******************************!*\
  !*** ./lib/analysis/scan.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fileHasDeprecatedPatterns: () => (/* binding */ fileHasDeprecatedPatterns),\n/* harmony export */   filterPatternFindingsByFile: () => (/* binding */ filterPatternFindingsByFile),\n/* harmony export */   filterPatternFindingsByLanguage: () => (/* binding */ filterPatternFindingsByLanguage),\n/* harmony export */   getDeprecatedPatternLines: () => (/* binding */ getDeprecatedPatternLines),\n/* harmony export */   getFilesWithDeprecatedPatterns: () => (/* binding */ getFilesWithDeprecatedPatterns),\n/* harmony export */   getMostCommonPatterns: () => (/* binding */ getMostCommonPatterns),\n/* harmony export */   getPatternFrequency: () => (/* binding */ getPatternFrequency),\n/* harmony export */   getPatternQuickFix: () => (/* binding */ getPatternQuickFix),\n/* harmony export */   getPatternSummary: () => (/* binding */ getPatternSummary),\n/* harmony export */   getUniquePatterns: () => (/* binding */ getUniquePatterns),\n/* harmony export */   groupPatternFindingsByFile: () => (/* binding */ groupPatternFindingsByFile),\n/* harmony export */   groupPatternFindingsByLanguage: () => (/* binding */ groupPatternFindingsByLanguage),\n/* harmony export */   scanSourceFiles: () => (/* binding */ scanSourceFiles),\n/* harmony export */   sortPatternFindings: () => (/* binding */ sortPatternFindings)\n/* harmony export */ });\n/* harmony import */ var _baseline_loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseline.loader */ \"(rsc)/./lib/analysis/baseline.loader.ts\");\n\n/**\n * Scan source files for deprecated patterns\n * @param files Array of extracted files\n * @param rules Baseline rules\n * @returns Array of pattern findings\n */ function scanSourceFiles(files, rules) {\n    const findings = [];\n    for (const file of files){\n        // Skip files that are too large\n        if (file.size > rules.max_file_size) {\n            console.warn(`Skipping large file: ${file.path || file.name} (${file.size} bytes)`);\n            continue;\n        }\n        // Skip ignored paths\n        const filePath = file.path || file.name || 'unknown';\n        if ((0,_baseline_loader__WEBPACK_IMPORTED_MODULE_0__.shouldIgnorePath)(rules, filePath)) {\n            continue;\n        }\n        // Skip files that shouldn't be scanned\n        const extension = getFileExtension(filePath);\n        if (!(0,_baseline_loader__WEBPACK_IMPORTED_MODULE_0__.shouldScanFile)(rules, extension)) {\n            continue;\n        }\n        // Detect language from file extension\n        const language = detectLanguageFromExtension(extension);\n        if (!language) {\n            continue;\n        }\n        // Get deprecated patterns for this language\n        const patterns = rules.deprecated_patterns[language] || [];\n        if (patterns.length === 0) {\n            continue;\n        }\n        // Scan file content\n        const fileFindings = scanFileContent(file, language, patterns);\n        findings.push(...fileFindings);\n        // Add additional analysis for specific file types\n        if (language === 'node' && (extension === '.js' || extension === '.ts' || extension === '.jsx' || extension === '.tsx')) {\n            const jsFindings = analyzeJavaScriptPatterns(file, language);\n            findings.push(...jsFindings);\n        }\n        if (language === 'python' && extension === '.py') {\n            const pyFindings = analyzePythonPatterns(file, language);\n            findings.push(...pyFindings);\n        }\n    }\n    return findings;\n}\n/**\n * Scan a single file for deprecated patterns\n * @param file File to scan\n * @param language Language of the file\n * @param patterns Deprecated patterns to look for\n * @param rules Baseline rules\n * @returns Array of pattern findings\n */ function scanFileContent(file, language, patterns) {\n    const findings = [];\n    const lines = file.content.split('\\n');\n    const filePath = file.path || file.name || 'unknown';\n    for(let lineIndex = 0; lineIndex < lines.length; lineIndex++){\n        const line = lines[lineIndex];\n        const lineNumber = lineIndex + 1;\n        // Skip empty lines and comments\n        if (isCommentLine(line, language) || line.trim() === '') {\n            continue;\n        }\n        // Check each pattern\n        for (const pattern of patterns){\n            try {\n                const regex = new RegExp(pattern.pattern, 'g');\n                let match;\n                while((match = regex.exec(line)) !== null){\n                    // Avoid infinite loops with zero-length matches\n                    if (match.index === regex.lastIndex) {\n                        regex.lastIndex++;\n                    }\n                    findings.push({\n                        kind: 'pattern',\n                        lang: language,\n                        file: filePath,\n                        line: lineNumber,\n                        status: 'affected',\n                        reason: 'deprecated-api',\n                        issue: pattern.message,\n                        pattern: pattern.pattern,\n                        quickFix: pattern.alternative\n                    });\n                }\n            } catch (error) {\n                console.warn(`Invalid regex pattern: ${pattern.pattern} - ${error}`);\n            }\n        }\n    }\n    return findings;\n}\n/**\n * Get file extension from path\n * @param filePath File path\n * @returns File extension with dot\n */ function getFileExtension(filePath) {\n    const lastDot = filePath.lastIndexOf('.');\n    if (lastDot === -1) return '';\n    return filePath.substring(lastDot);\n}\n/**\n * Detect language from file extension\n * @param extension File extension\n * @returns Language or null\n */ function detectLanguageFromExtension(extension) {\n    const languageMap = {\n        '.js': 'node',\n        '.jsx': 'node',\n        '.ts': 'node',\n        '.tsx': 'node',\n        '.py': 'python',\n        '.java': 'java',\n        '.go': 'go',\n        '.cs': 'dotnet',\n        '.fs': 'dotnet',\n        '.vb': 'dotnet'\n    };\n    return languageMap[extension] || null;\n}\n/**\n * Check if a line is a comment\n * @param line Line content\n * @param language Language context\n * @returns True if comment line\n */ function isCommentLine(line, language) {\n    const trimmed = line.trim();\n    switch(language){\n        case 'node':\n        case 'java':\n        case 'go':\n        case 'dotnet':\n            return trimmed.startsWith('//') || trimmed.startsWith('/*') || trimmed.startsWith('*');\n        case 'python':\n            return trimmed.startsWith('#');\n        default:\n            return false;\n    }\n}\n/**\n * Get quick fix for pattern replacement\n * @param rules Baseline rules\n * @param language Language\n * @param pattern Pattern to replace\n * @returns Quick fix suggestion or undefined\n */ function getPatternQuickFix(rules, language, pattern) {\n    return rules.quick_fixes.pattern_replacement[language]?.[pattern];\n}\n/**\n * Group pattern findings by file\n * @param findings Pattern findings\n * @returns Grouped findings by file\n */ function groupPatternFindingsByFile(findings) {\n    const grouped = {};\n    for (const finding of findings){\n        if (!grouped[finding.file]) {\n            grouped[finding.file] = [];\n        }\n        grouped[finding.file].push(finding);\n    }\n    return grouped;\n}\n/**\n * Group pattern findings by language\n * @param findings Pattern findings\n * @returns Grouped findings by language\n */ function groupPatternFindingsByLanguage(findings) {\n    const grouped = {\n        python: [],\n        node: [],\n        java: [],\n        go: [],\n        dotnet: []\n    };\n    for (const finding of findings){\n        if (!grouped[finding.lang]) {\n            grouped[finding.lang] = [];\n        }\n        grouped[finding.lang].push(finding);\n    }\n    return grouped;\n}\n/**\n * Get pattern summary statistics\n * @param findings Pattern findings\n * @returns Summary statistics\n */ function getPatternSummary(findings) {\n    const total = findings.length;\n    const byLanguage = groupPatternFindingsByLanguage(findings);\n    const byFile = groupPatternFindingsByFile(findings);\n    return {\n        total,\n        affectedFiles: Object.keys(byFile).length,\n        byLanguage: Object.fromEntries(Object.entries(byLanguage).map(([lang, findings])=>[\n                lang,\n                {\n                    count: findings.length,\n                    files: new Set(findings.map((f)=>f.file)).size\n                }\n            ]))\n    };\n}\n/**\n * Filter pattern findings by language\n * @param findings Pattern findings\n * @param language Language to filter by\n * @returns Filtered findings\n */ function filterPatternFindingsByLanguage(findings, language) {\n    return findings.filter((f)=>f.lang === language);\n}\n/**\n * Filter pattern findings by file\n * @param findings Pattern findings\n * @param filePath File path to filter by\n * @returns Filtered findings\n */ function filterPatternFindingsByFile(findings, filePath) {\n    return findings.filter((f)=>f.file === filePath);\n}\n/**\n * Sort pattern findings by file and line\n * @param findings Pattern findings\n * @returns Sorted findings\n */ function sortPatternFindings(findings) {\n    return [\n        ...findings\n    ].sort((a, b)=>{\n        // First by file path\n        const fileDiff = a.file.localeCompare(b.file);\n        if (fileDiff !== 0) return fileDiff;\n        // Then by line number\n        return a.line - b.line;\n    });\n}\n/**\n * Get unique patterns found\n * @param findings Pattern findings\n * @returns Array of unique patterns\n */ function getUniquePatterns(findings) {\n    const patterns = new Set();\n    for (const finding of findings){\n        patterns.add(finding.pattern);\n    }\n    return Array.from(patterns);\n}\n/**\n * Get pattern frequency\n * @param findings Pattern findings\n * @returns Pattern frequency map\n */ function getPatternFrequency(findings) {\n    const frequency = {};\n    for (const finding of findings){\n        frequency[finding.pattern] = (frequency[finding.pattern] || 0) + 1;\n    }\n    return frequency;\n}\n/**\n * Get most common patterns\n * @param findings Pattern findings\n * @param limit Maximum number of patterns to return\n * @returns Array of most common patterns\n */ function getMostCommonPatterns(findings, limit = 10) {\n    const frequency = getPatternFrequency(findings);\n    return Object.entries(frequency).map(([pattern, count])=>({\n            pattern,\n            count\n        })).sort((a, b)=>b.count - a.count).slice(0, limit);\n}\n/**\n * Check if a file contains any deprecated patterns\n * @param filePath File path\n * @param findings Pattern findings\n * @returns True if file has deprecated patterns\n */ function fileHasDeprecatedPatterns(filePath, findings) {\n    return findings.some((f)=>f.file === filePath);\n}\n/**\n * Get files with deprecated patterns\n * @param findings Pattern findings\n * @returns Array of file paths\n */ function getFilesWithDeprecatedPatterns(findings) {\n    const files = new Set();\n    for (const finding of findings){\n        files.add(finding.file);\n    }\n    return Array.from(files);\n}\n/**\n * Analyze JavaScript-specific patterns\n * @param file File to analyze\n * @param language Language context\n * @returns Array of pattern findings\n */ function analyzeJavaScriptPatterns(file, language) {\n    const findings = [];\n    const lines = file.content.split('\\n');\n    const filePath = file.path || file.name || 'unknown';\n    for(let lineIndex = 0; lineIndex < lines.length; lineIndex++){\n        const line = lines[lineIndex];\n        const lineNumber = lineIndex + 1;\n        // Skip empty lines and comments\n        if (isCommentLine(line, language) || line.trim() === '') {\n            continue;\n        }\n        // Check for common JavaScript issues\n        const jsPatterns = [\n            {\n                pattern: /var\\s+\\w+/g,\n                message: \"var is deprecated, use let or const\",\n                alternative: \"Use let for variables that change, const for constants\"\n            },\n            {\n                pattern: /function\\s+\\w+\\s*\\(/g,\n                message: \"Function declarations are less preferred than arrow functions\",\n                alternative: \"Use arrow functions for better scope handling\"\n            },\n            {\n                pattern: /this\\.\\w+\\s*=/g,\n                message: \"Direct this assignment is discouraged\",\n                alternative: \"Use class properties or bind methods properly\"\n            },\n            {\n                pattern: /\\barguments\\b/g,\n                message: \"arguments object is deprecated, use rest parameters\",\n                alternative: \"Use ...args rest parameter syntax\"\n            },\n            {\n                pattern: /==\\s*\\w+|\\w+\\s*==/g,\n                message: \"== can cause type coercion issues\",\n                alternative: \"Use === for strict equality\"\n            },\n            {\n                pattern: /!=\\s*\\w+|\\w+\\s*!=/g,\n                message: \"!= can cause type coercion issues\",\n                alternative: \"Use !== for strict inequality\"\n            },\n            {\n                pattern: /typeof\\s+\\w+\\s*===\\s*['\"]undefined['\"]/g,\n                message: \"typeof undefined check is verbose\",\n                alternative: \"Use === undefined or optional chaining\"\n            },\n            {\n                pattern: /for\\s*\\(\\s*var\\s+/g,\n                message: \"var in for loops can cause scope issues\",\n                alternative: \"Use let in for loops\"\n            },\n            {\n                pattern: /with\\s*\\(/g,\n                message: \"with statement is deprecated and dangerous\",\n                alternative: \"Use explicit variable references\"\n            },\n            {\n                pattern: /eval\\s*\\(/g,\n                message: \"eval() is dangerous and should be avoided\",\n                alternative: \"Use safer alternatives or refactor code\"\n            },\n            {\n                pattern: /new\\s+Function\\s*\\(/g,\n                message: \"new Function() is dangerous\",\n                alternative: \"Use function declarations or arrow functions\"\n            },\n            {\n                pattern: /setTimeout\\s*\\(\\s*['\"]/g,\n                message: \"setTimeout with string is dangerous\",\n                alternative: \"Use function references instead of strings\"\n            },\n            {\n                pattern: /setInterval\\s*\\(\\s*['\"]/g,\n                message: \"setInterval with string is dangerous\",\n                alternative: \"Use function references instead of strings\"\n            },\n            {\n                pattern: /setImmediate\\s*\\(\\s*['\"]/g,\n                message: \"setImmediate with string is dangerous\",\n                alternative: \"Use function references instead of strings\"\n            },\n            {\n                pattern: /process\\.nextTick\\s*\\(\\s*['\"]/g,\n                message: \"process.nextTick with string is dangerous\",\n                alternative: \"Use function references instead of strings\"\n            },\n            {\n                pattern: /require\\s*\\(\\s*['\"]/g,\n                message: \"Dynamic require() can be dangerous\",\n                alternative: \"Use static imports or proper module loading\"\n            },\n            {\n                pattern: /import\\s*\\(\\s*['\"]/g,\n                message: \"Dynamic import() can be dangerous\",\n                alternative: \"Use static imports or proper module loading\"\n            },\n            {\n                pattern: /new\\s+RegExp\\s*\\(\\s*['\"]/g,\n                message: \"new RegExp() with user input is dangerous\",\n                alternative: \"Use literal regex or sanitize input\"\n            },\n            {\n                pattern: /RegExp\\s*\\(\\s*['\"]/g,\n                message: \"RegExp() with user input is dangerous\",\n                alternative: \"Use literal regex or sanitize input\"\n            },\n            {\n                pattern: /JSON\\.parse\\s*\\(\\s*['\"]/g,\n                message: \"JSON.parse() with untrusted data is dangerous\",\n                alternative: \"Validate and sanitize input before parsing\"\n            },\n            {\n                pattern: /JSON\\.stringify\\s*\\(/g,\n                message: \"JSON.stringify() can expose sensitive data\",\n                alternative: \"Filter sensitive properties before stringifying\"\n            },\n            {\n                pattern: /XMLHttpRequest/g,\n                message: \"XMLHttpRequest is deprecated, use fetch()\",\n                alternative: \"Use fetch() API or axios library\"\n            },\n            {\n                pattern: /ActiveXObject/g,\n                message: \"ActiveXObject is deprecated and insecure\",\n                alternative: \"Use modern alternatives\"\n            },\n            {\n                pattern: /attachEvent/g,\n                message: \"attachEvent is deprecated, use addEventListener\",\n                alternative: \"Use addEventListener() method\"\n            },\n            {\n                pattern: /detachEvent/g,\n                message: \"detachEvent is deprecated, use removeEventListener\",\n                alternative: \"Use removeEventListener() method\"\n            },\n            {\n                pattern: /document\\.write\\s*\\(/g,\n                message: \"document.write() is deprecated and dangerous\",\n                alternative: \"Use DOM manipulation methods\"\n            },\n            {\n                pattern: /innerHTML\\s*=/g,\n                message: \"innerHTML assignment can be dangerous\",\n                alternative: \"Use textContent or proper DOM methods\"\n            },\n            {\n                pattern: /outerHTML\\s*=/g,\n                message: \"outerHTML assignment can be dangerous\",\n                alternative: \"Use proper DOM manipulation methods\"\n            },\n            {\n                pattern: /alert\\s*\\(/g,\n                message: \"alert() should not be used in production\",\n                alternative: \"Use proper user interface components or logging\"\n            },\n            {\n                pattern: /confirm\\s*\\(/g,\n                message: \"confirm() should not be used in production\",\n                alternative: \"Use proper user interface components\"\n            },\n            {\n                pattern: /prompt\\s*\\(/g,\n                message: \"prompt() should not be used in production\",\n                alternative: \"Use proper user interface components\"\n            },\n            {\n                pattern: /debugger\\b/g,\n                message: \"debugger statement should be removed in production\",\n                alternative: \"Remove debugger statements or use proper debugging tools\"\n            },\n            {\n                pattern: /console\\.(log|warn|error|info|debug|trace|dir|table|time|timeEnd|count|countReset|group|groupEnd|groupCollapsed|assert|clear|profile|profileEnd|timeStamp|markTimeline|timeline|timelineEnd|memory|exception)\\s*\\(/g,\n                message: \"console methods should be removed in production\",\n                alternative: \"Use proper logging library or remove debug statements\"\n            }\n        ];\n        for (const pattern of jsPatterns){\n            try {\n                const regex = new RegExp(pattern.pattern.source, 'g');\n                let match;\n                while((match = regex.exec(line)) !== null){\n                    // Avoid infinite loops with zero-length matches\n                    if (match.index === regex.lastIndex) {\n                        regex.lastIndex++;\n                    }\n                    findings.push({\n                        kind: 'pattern',\n                        lang: language,\n                        file: filePath,\n                        line: lineNumber,\n                        status: 'affected',\n                        reason: 'deprecated-api',\n                        issue: pattern.message,\n                        pattern: pattern.pattern.source,\n                        quickFix: pattern.alternative\n                    });\n                }\n            } catch (error) {\n                console.warn(`Invalid regex pattern: ${pattern.pattern} - ${error}`);\n            }\n        }\n    }\n    return findings;\n}\n/**\n * Analyze Python-specific patterns\n * @param file File to analyze\n * @param language Language context\n * @returns Array of pattern findings\n */ function analyzePythonPatterns(file, language) {\n    const findings = [];\n    const lines = file.content.split('\\n');\n    const filePath = file.path || file.name || 'unknown';\n    for(let lineIndex = 0; lineIndex < lines.length; lineIndex++){\n        const line = lines[lineIndex];\n        const lineNumber = lineIndex + 1;\n        // Skip empty lines and comments\n        if (isCommentLine(line, language) || line.trim() === '') {\n            continue;\n        }\n        // Check for common Python issues\n        const pyPatterns = [\n            {\n                pattern: /urllib2\\.|urllib\\.request/g,\n                message: \"urllib2 is deprecated in Python 3, use urllib.request\",\n                alternative: \"Use urllib.request or requests library\"\n            },\n            {\n                pattern: /execfile\\s*\\(/g,\n                message: \"execfile() is deprecated in Python 3\",\n                alternative: \"Use exec(open(filename).read())\"\n            },\n            {\n                pattern: /reload\\s*\\(/g,\n                message: \"reload() is deprecated, use importlib.reload()\",\n                alternative: \"Use importlib.reload(module)\"\n            },\n            {\n                pattern: /file\\s*\\(/g,\n                message: \"file() is deprecated, use open()\",\n                alternative: \"Use open() function instead\"\n            },\n            {\n                pattern: /raw_input\\s*\\(/g,\n                message: \"raw_input() is deprecated in Python 3, use input()\",\n                alternative: \"Use input() function\"\n            },\n            {\n                pattern: /xrange\\s*\\(/g,\n                message: \"xrange() is deprecated in Python 3, use range()\",\n                alternative: \"Use range() function\"\n            },\n            {\n                pattern: /basestring/g,\n                message: \"basestring is deprecated in Python 3\",\n                alternative: \"Use str or bytes directly\"\n            },\n            {\n                pattern: /unicode\\s*\\(/g,\n                message: \"unicode() is deprecated in Python 3\",\n                alternative: \"Use str() function\"\n            },\n            {\n                pattern: /long\\s*\\(/g,\n                message: \"long() is deprecated in Python 3\",\n                alternative: \"Use int() function\"\n            },\n            {\n                pattern: /cmp\\s*\\(/g,\n                message: \"cmp() is deprecated in Python 3\",\n                alternative: \"Use (a > b) - (a < b) or operator functions\"\n            },\n            {\n                pattern: /reduce\\s*\\(/g,\n                message: \"reduce() is deprecated, use functools.reduce()\",\n                alternative: \"Import and use functools.reduce()\"\n            },\n            {\n                pattern: /apply\\s*\\(/g,\n                message: \"apply() is deprecated in Python 3\",\n                alternative: \"Use function(*args, **kwargs) syntax\"\n            },\n            {\n                pattern: /coerce\\s*\\(/g,\n                message: \"coerce() is deprecated in Python 3\",\n                alternative: \"Use explicit type conversion\"\n            },\n            {\n                pattern: /intern\\s*\\(/g,\n                message: \"intern() is deprecated in Python 3\",\n                alternative: \"Use sys.intern() if needed\"\n            },\n            {\n                pattern: /unichr\\s*\\(/g,\n                message: \"unichr() is deprecated in Python 3\",\n                alternative: \"Use chr() function\"\n            },\n            {\n                pattern: /buffer\\s*\\(/g,\n                message: \"buffer() is deprecated in Python 3\",\n                alternative: \"Use memoryview() or bytes()\"\n            },\n            {\n                pattern: /StandardError/g,\n                message: \"StandardError is deprecated in Python 3\",\n                alternative: \"Use Exception or specific exception types\"\n            },\n            {\n                pattern: /exec\\s+\\w+\\s+in\\s+\\w+/g,\n                message: \"exec with 'in' syntax is deprecated\",\n                alternative: \"Use exec(code, globals, locals) syntax\"\n            },\n            {\n                pattern: /print\\s+\\w+/g,\n                message: \"print statement is deprecated in Python 3\",\n                alternative: \"Use print() function\"\n            },\n            {\n                pattern: /raise\\s+\\w+,\\s+\\w+/g,\n                message: \"raise with comma syntax is deprecated\",\n                alternative: \"Use raise Exception('message') syntax\"\n            },\n            {\n                pattern: /except\\s+\\w+,\\s+\\w+/g,\n                message: \"except with comma syntax is deprecated\",\n                alternative: \"Use except Exception as e: syntax\"\n            },\n            {\n                pattern: /def\\s+\\w+\\s*\\([^)]*\\):/g,\n                message: \"Check for Python 2 style function definitions\",\n                alternative: \"Ensure Python 3 compatibility\"\n            },\n            {\n                pattern: /from\\s+\\w+\\s+import\\s+\\*/g,\n                message: \"Wildcard imports are discouraged\",\n                alternative: \"Import specific functions or use qualified names\"\n            },\n            {\n                pattern: /eval\\s*\\(/g,\n                message: \"eval() is dangerous and should be avoided\",\n                alternative: \"Use safer alternatives like ast.literal_eval()\"\n            },\n            {\n                pattern: /exec\\s*\\(/g,\n                message: \"exec() is dangerous and should be avoided\",\n                alternative: \"Use safer alternatives or refactor code\"\n            },\n            {\n                pattern: /subprocess\\.call.*shell=True/g,\n                message: \"shell=True in subprocess is dangerous\",\n                alternative: \"Use shell=False and pass arguments as list\"\n            },\n            {\n                pattern: /os\\.system\\s*\\(/g,\n                message: \"os.system() is deprecated, use subprocess\",\n                alternative: \"Use subprocess.run() or subprocess.Popen()\"\n            },\n            {\n                pattern: /pickle\\.loads\\s*\\(/g,\n                message: \"pickle.loads() is unsafe with untrusted data\",\n                alternative: \"Use json.loads() or other safe serialization\"\n            },\n            {\n                pattern: /pickle\\.load\\s*\\(/g,\n                message: \"pickle.load() is unsafe with untrusted data\",\n                alternative: \"Use json.load() or other safe serialization\"\n            },\n            {\n                pattern: /md5\\.|sha1\\./g,\n                message: \"MD5 and SHA1 are cryptographically broken\",\n                alternative: \"Use hashlib.sha256() or hashlib.sha3_256()\"\n            },\n            {\n                pattern: /random\\.random\\s*\\(/g,\n                message: \"random.random() is not cryptographically secure\",\n                alternative: \"Use secrets module for cryptographic randomness\"\n            },\n            {\n                pattern: /time\\.time\\s*\\(/g,\n                message: \"time.time() is not suitable for timing attacks\",\n                alternative: \"Use time.perf_counter() for timing\"\n            },\n            {\n                pattern: /class\\s+\\w+.*:/g,\n                message: \"Check for old-style class definitions\",\n                alternative: \"Ensure all classes inherit from object or use new-style classes\"\n            },\n            {\n                pattern: /def\\s+\\w+\\s*\\(self,\\s*[^)]*\\):/g,\n                message: \"Check for Python 2 style method definitions\",\n                alternative: \"Ensure Python 3 compatibility\"\n            },\n            {\n                pattern: /import\\s+\\w+\\s*$/g,\n                message: \"Check for Python 2 style imports\",\n                alternative: \"Ensure Python 3 compatibility\"\n            }\n        ];\n        for (const pattern of pyPatterns){\n            try {\n                const regex = new RegExp(pattern.pattern.source, 'g');\n                let match;\n                while((match = regex.exec(line)) !== null){\n                    // Avoid infinite loops with zero-length matches\n                    if (match.index === regex.lastIndex) {\n                        regex.lastIndex++;\n                    }\n                    findings.push({\n                        kind: 'pattern',\n                        lang: language,\n                        file: filePath,\n                        line: lineNumber,\n                        status: 'affected',\n                        reason: 'deprecated-api',\n                        issue: pattern.message,\n                        pattern: pattern.pattern.source,\n                        quickFix: pattern.alternative\n                    });\n                }\n            } catch (error) {\n                console.warn(`Invalid regex pattern: ${pattern.pattern} - ${error}`);\n            }\n        }\n    }\n    return findings;\n}\n/**\n * Get line numbers with deprecated patterns for a file\n * @param filePath File path\n * @param findings Pattern findings\n * @returns Array of line numbers\n */ function getDeprecatedPatternLines(filePath, findings) {\n    return findings.filter((f)=>f.file === filePath).map((f)=>f.line).sort((a, b)=>a - b);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/analysis/scan.ts\n");

/***/ }),

/***/ "(rsc)/./lib/files/single-file.ts":
/*!**********************************!*\
  !*** ./lib/files/single-file.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   detectFileType: () => (/* binding */ detectFileType),\n/* harmony export */   processSingleFile: () => (/* binding */ processSingleFile),\n/* harmony export */   shouldAnalyzeFile: () => (/* binding */ shouldAnalyzeFile)\n/* harmony export */ });\n/**\n * Process a single file for analysis\n * @param filePath Path to the file\n * @param content File content\n * @param maxFileSize Maximum file size in bytes\n * @returns Single file result\n */ function processSingleFile(filePath, content, maxFileSize = 2 * 1024 * 1024 // 2MB\n) {\n    // Check file size\n    const fileSize = Buffer.byteLength(content, 'utf8');\n    if (fileSize > maxFileSize) {\n        return {\n            files: [],\n            totalFiles: 1,\n            skippedFiles: 1\n        };\n    }\n    // Create extracted file object\n    const extractedFile = {\n        path: filePath,\n        content: content,\n        size: fileSize\n    };\n    return {\n        files: [\n            extractedFile\n        ],\n        totalFiles: 1,\n        skippedFiles: 0\n    };\n}\n/**\n * Detect file type from extension\n * @param filename File name\n * @returns File type category\n */ function detectFileType(filename) {\n    const ext = filename.split('.').pop()?.toLowerCase();\n    const typeMap = {\n        // Web files\n        'js': 'javascript',\n        'jsx': 'javascript',\n        'ts': 'typescript',\n        'tsx': 'typescript',\n        'html': 'html',\n        'htm': 'html',\n        'css': 'css',\n        'scss': 'css',\n        'sass': 'css',\n        'less': 'css',\n        // Python\n        'py': 'python',\n        'pyw': 'python',\n        // Java\n        'java': 'java',\n        'kt': 'kotlin',\n        'scala': 'scala',\n        // C/C++\n        'c': 'c',\n        'cpp': 'cpp',\n        'cc': 'cpp',\n        'cxx': 'cpp',\n        'h': 'c',\n        'hpp': 'cpp',\n        // C#\n        'cs': 'csharp',\n        'fs': 'fsharp',\n        'vb': 'vbnet',\n        // Go\n        'go': 'go',\n        // Rust\n        'rs': 'rust',\n        // PHP\n        'php': 'php',\n        // Ruby\n        'rb': 'ruby',\n        // Swift\n        'swift': 'swift',\n        // Configuration files\n        'json': 'json',\n        'yaml': 'yaml',\n        'yml': 'yaml',\n        'xml': 'xml',\n        'toml': 'toml',\n        'ini': 'ini',\n        'cfg': 'config',\n        'conf': 'config',\n        // Documentation\n        'md': 'markdown',\n        'txt': 'text',\n        'rst': 'restructuredtext',\n        // Shell scripts\n        'sh': 'shell',\n        'bash': 'shell',\n        'zsh': 'shell',\n        'fish': 'shell',\n        'ps1': 'powershell',\n        'bat': 'batch',\n        'cmd': 'batch',\n        // SQL\n        'sql': 'sql',\n        // Docker\n        'dockerfile': 'dockerfile',\n        'dockerignore': 'dockerignore',\n        // Git\n        'gitignore': 'gitignore',\n        'gitattributes': 'gitattributes',\n        // Package managers\n        'package.json': 'package.json',\n        'requirements.txt': 'requirements.txt',\n        'pom.xml': 'pom.xml',\n        'build.gradle': 'gradle',\n        'go.mod': 'go.mod',\n        'cargo.toml': 'cargo.toml',\n        'composer.json': 'composer.json',\n        'gemfile': 'gemfile',\n        'podfile': 'podfile',\n        'pubspec.yaml': 'pubspec.yaml'\n    };\n    return typeMap[ext || ''] || 'unknown';\n}\n/**\n * Check if file should be analyzed\n * @param filename File name\n * @returns Whether file should be analyzed\n */ function shouldAnalyzeFile(filename) {\n    const ext = filename.split('.').pop()?.toLowerCase();\n    // Only allow web file types\n    const allowedExtensions = [\n        'html',\n        'htm',\n        'css',\n        'js',\n        'mjs',\n        'ts',\n        'svg',\n        'wasm',\n        'json',\n        'webmanifest' // Web manifest files\n    ];\n    return allowedExtensions.includes(ext || '');\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvZmlsZXMvc2luZ2xlLWZpbGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBUUE7Ozs7OztDQU1DLEdBQ00sU0FBU0Esa0JBQ2RDLFFBQWdCLEVBQ2hCQyxPQUFlLEVBQ2ZDLGNBQXNCLElBQUksT0FBTyxLQUFLLE1BQU07QUFBUDtJQUVyQyxrQkFBa0I7SUFDbEIsTUFBTUMsV0FBV0MsT0FBT0MsVUFBVSxDQUFDSixTQUFTO0lBQzVDLElBQUlFLFdBQVdELGFBQWE7UUFDMUIsT0FBTztZQUNMSSxPQUFPLEVBQUU7WUFDVEMsWUFBWTtZQUNaQyxjQUFjO1FBQ2hCO0lBQ0Y7SUFFQSwrQkFBK0I7SUFDL0IsTUFBTUMsZ0JBQStCO1FBQ25DQyxNQUFNVjtRQUNOQyxTQUFTQTtRQUNUVSxNQUFNUjtJQUNSO0lBRUEsT0FBTztRQUNMRyxPQUFPO1lBQUNHO1NBQWM7UUFDdEJGLFlBQVk7UUFDWkMsY0FBYztJQUNoQjtBQUNGO0FBRUE7Ozs7Q0FJQyxHQUNNLFNBQVNJLGVBQWVDLFFBQWdCO0lBQzdDLE1BQU1DLE1BQU1ELFNBQVNFLEtBQUssQ0FBQyxLQUFLQyxHQUFHLElBQUlDO0lBRXZDLE1BQU1DLFVBQWtDO1FBQ3RDLFlBQVk7UUFDWixNQUFNO1FBQ04sT0FBTztRQUNQLE1BQU07UUFDTixPQUFPO1FBQ1AsUUFBUTtRQUNSLE9BQU87UUFDUCxPQUFPO1FBQ1AsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBRVIsU0FBUztRQUNULE1BQU07UUFDTixPQUFPO1FBRVAsT0FBTztRQUNQLFFBQVE7UUFDUixNQUFNO1FBQ04sU0FBUztRQUVULFFBQVE7UUFDUixLQUFLO1FBQ0wsT0FBTztRQUNQLE1BQU07UUFDTixPQUFPO1FBQ1AsS0FBSztRQUNMLE9BQU87UUFFUCxLQUFLO1FBQ0wsTUFBTTtRQUNOLE1BQU07UUFDTixNQUFNO1FBRU4sS0FBSztRQUNMLE1BQU07UUFFTixPQUFPO1FBQ1AsTUFBTTtRQUVOLE1BQU07UUFDTixPQUFPO1FBRVAsT0FBTztRQUNQLE1BQU07UUFFTixRQUFRO1FBQ1IsU0FBUztRQUVULHNCQUFzQjtRQUN0QixRQUFRO1FBQ1IsUUFBUTtRQUNSLE9BQU87UUFDUCxPQUFPO1FBQ1AsUUFBUTtRQUNSLE9BQU87UUFDUCxPQUFPO1FBQ1AsUUFBUTtRQUVSLGdCQUFnQjtRQUNoQixNQUFNO1FBQ04sT0FBTztRQUNQLE9BQU87UUFFUCxnQkFBZ0I7UUFDaEIsTUFBTTtRQUNOLFFBQVE7UUFDUixPQUFPO1FBQ1AsUUFBUTtRQUNSLE9BQU87UUFDUCxPQUFPO1FBQ1AsT0FBTztRQUVQLE1BQU07UUFDTixPQUFPO1FBRVAsU0FBUztRQUNULGNBQWM7UUFDZCxnQkFBZ0I7UUFFaEIsTUFBTTtRQUNOLGFBQWE7UUFDYixpQkFBaUI7UUFFakIsbUJBQW1CO1FBQ25CLGdCQUFnQjtRQUNoQixvQkFBb0I7UUFDcEIsV0FBVztRQUNYLGdCQUFnQjtRQUNoQixVQUFVO1FBQ1YsY0FBYztRQUNkLGlCQUFpQjtRQUNqQixXQUFXO1FBQ1gsV0FBVztRQUNYLGdCQUFnQjtJQUNsQjtJQUVBLE9BQU9BLE9BQU8sQ0FBQ0osT0FBTyxHQUFHLElBQUk7QUFDL0I7QUFFQTs7OztDQUlDLEdBQ00sU0FBU0ssa0JBQWtCTixRQUFnQjtJQUNoRCxNQUFNQyxNQUFNRCxTQUFTRSxLQUFLLENBQUMsS0FBS0MsR0FBRyxJQUFJQztJQUV2Qyw0QkFBNEI7SUFDNUIsTUFBTUcsb0JBQW9CO1FBQ3hCO1FBQVE7UUFDUjtRQUNBO1FBQU07UUFBTztRQUNiO1FBQ0E7UUFDQTtRQUNBLGNBQXlCLHFCQUFxQjtLQUMvQztJQUVELE9BQU9BLGtCQUFrQkMsUUFBUSxDQUFDUCxPQUFPO0FBQzNDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXENraGFkYXJcXERvd25sb2Fkc1xcQUlfQmFzZWxpbmVfTWFwXFxsaWJcXGZpbGVzXFxzaW5nbGUtZmlsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHRyYWN0ZWRGaWxlIH0gZnJvbSAnLi4vYW5hbHlzaXMvYmFzZWxpbmUudHlwZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNpbmdsZUZpbGVSZXN1bHQge1xuICBmaWxlczogRXh0cmFjdGVkRmlsZVtdO1xuICB0b3RhbEZpbGVzOiBudW1iZXI7XG4gIHNraXBwZWRGaWxlczogbnVtYmVyO1xufVxuXG4vKipcbiAqIFByb2Nlc3MgYSBzaW5nbGUgZmlsZSBmb3IgYW5hbHlzaXNcbiAqIEBwYXJhbSBmaWxlUGF0aCBQYXRoIHRvIHRoZSBmaWxlXG4gKiBAcGFyYW0gY29udGVudCBGaWxlIGNvbnRlbnRcbiAqIEBwYXJhbSBtYXhGaWxlU2l6ZSBNYXhpbXVtIGZpbGUgc2l6ZSBpbiBieXRlc1xuICogQHJldHVybnMgU2luZ2xlIGZpbGUgcmVzdWx0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzU2luZ2xlRmlsZShcbiAgZmlsZVBhdGg6IHN0cmluZyxcbiAgY29udGVudDogc3RyaW5nLFxuICBtYXhGaWxlU2l6ZTogbnVtYmVyID0gMiAqIDEwMjQgKiAxMDI0IC8vIDJNQlxuKTogU2luZ2xlRmlsZVJlc3VsdCB7XG4gIC8vIENoZWNrIGZpbGUgc2l6ZVxuICBjb25zdCBmaWxlU2l6ZSA9IEJ1ZmZlci5ieXRlTGVuZ3RoKGNvbnRlbnQsICd1dGY4Jyk7XG4gIGlmIChmaWxlU2l6ZSA+IG1heEZpbGVTaXplKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZpbGVzOiBbXSxcbiAgICAgIHRvdGFsRmlsZXM6IDEsXG4gICAgICBza2lwcGVkRmlsZXM6IDFcbiAgICB9O1xuICB9XG5cbiAgLy8gQ3JlYXRlIGV4dHJhY3RlZCBmaWxlIG9iamVjdFxuICBjb25zdCBleHRyYWN0ZWRGaWxlOiBFeHRyYWN0ZWRGaWxlID0ge1xuICAgIHBhdGg6IGZpbGVQYXRoLFxuICAgIGNvbnRlbnQ6IGNvbnRlbnQsXG4gICAgc2l6ZTogZmlsZVNpemVcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGZpbGVzOiBbZXh0cmFjdGVkRmlsZV0sXG4gICAgdG90YWxGaWxlczogMSxcbiAgICBza2lwcGVkRmlsZXM6IDBcbiAgfTtcbn1cblxuLyoqXG4gKiBEZXRlY3QgZmlsZSB0eXBlIGZyb20gZXh0ZW5zaW9uXG4gKiBAcGFyYW0gZmlsZW5hbWUgRmlsZSBuYW1lXG4gKiBAcmV0dXJucyBGaWxlIHR5cGUgY2F0ZWdvcnlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRldGVjdEZpbGVUeXBlKGZpbGVuYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBleHQgPSBmaWxlbmFtZS5zcGxpdCgnLicpLnBvcCgpPy50b0xvd2VyQ2FzZSgpO1xuICBcbiAgY29uc3QgdHlwZU1hcDogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgICAvLyBXZWIgZmlsZXNcbiAgICAnanMnOiAnamF2YXNjcmlwdCcsXG4gICAgJ2pzeCc6ICdqYXZhc2NyaXB0JyxcbiAgICAndHMnOiAndHlwZXNjcmlwdCcsXG4gICAgJ3RzeCc6ICd0eXBlc2NyaXB0JyxcbiAgICAnaHRtbCc6ICdodG1sJyxcbiAgICAnaHRtJzogJ2h0bWwnLFxuICAgICdjc3MnOiAnY3NzJyxcbiAgICAnc2Nzcyc6ICdjc3MnLFxuICAgICdzYXNzJzogJ2NzcycsXG4gICAgJ2xlc3MnOiAnY3NzJyxcbiAgICBcbiAgICAvLyBQeXRob25cbiAgICAncHknOiAncHl0aG9uJyxcbiAgICAncHl3JzogJ3B5dGhvbicsXG4gICAgXG4gICAgLy8gSmF2YVxuICAgICdqYXZhJzogJ2phdmEnLFxuICAgICdrdCc6ICdrb3RsaW4nLFxuICAgICdzY2FsYSc6ICdzY2FsYScsXG4gICAgXG4gICAgLy8gQy9DKytcbiAgICAnYyc6ICdjJyxcbiAgICAnY3BwJzogJ2NwcCcsXG4gICAgJ2NjJzogJ2NwcCcsXG4gICAgJ2N4eCc6ICdjcHAnLFxuICAgICdoJzogJ2MnLFxuICAgICdocHAnOiAnY3BwJyxcbiAgICBcbiAgICAvLyBDI1xuICAgICdjcyc6ICdjc2hhcnAnLFxuICAgICdmcyc6ICdmc2hhcnAnLFxuICAgICd2Yic6ICd2Ym5ldCcsXG4gICAgXG4gICAgLy8gR29cbiAgICAnZ28nOiAnZ28nLFxuICAgIFxuICAgIC8vIFJ1c3RcbiAgICAncnMnOiAncnVzdCcsXG4gICAgXG4gICAgLy8gUEhQXG4gICAgJ3BocCc6ICdwaHAnLFxuICAgIFxuICAgIC8vIFJ1YnlcbiAgICAncmInOiAncnVieScsXG4gICAgXG4gICAgLy8gU3dpZnRcbiAgICAnc3dpZnQnOiAnc3dpZnQnLFxuICAgIFxuICAgIC8vIENvbmZpZ3VyYXRpb24gZmlsZXNcbiAgICAnanNvbic6ICdqc29uJyxcbiAgICAneWFtbCc6ICd5YW1sJyxcbiAgICAneW1sJzogJ3lhbWwnLFxuICAgICd4bWwnOiAneG1sJyxcbiAgICAndG9tbCc6ICd0b21sJyxcbiAgICAnaW5pJzogJ2luaScsXG4gICAgJ2NmZyc6ICdjb25maWcnLFxuICAgICdjb25mJzogJ2NvbmZpZycsXG4gICAgXG4gICAgLy8gRG9jdW1lbnRhdGlvblxuICAgICdtZCc6ICdtYXJrZG93bicsXG4gICAgJ3R4dCc6ICd0ZXh0JyxcbiAgICAncnN0JzogJ3Jlc3RydWN0dXJlZHRleHQnLFxuICAgIFxuICAgIC8vIFNoZWxsIHNjcmlwdHNcbiAgICAnc2gnOiAnc2hlbGwnLFxuICAgICdiYXNoJzogJ3NoZWxsJyxcbiAgICAnenNoJzogJ3NoZWxsJyxcbiAgICAnZmlzaCc6ICdzaGVsbCcsXG4gICAgJ3BzMSc6ICdwb3dlcnNoZWxsJyxcbiAgICAnYmF0JzogJ2JhdGNoJyxcbiAgICAnY21kJzogJ2JhdGNoJyxcbiAgICBcbiAgICAvLyBTUUxcbiAgICAnc3FsJzogJ3NxbCcsXG4gICAgXG4gICAgLy8gRG9ja2VyXG4gICAgJ2RvY2tlcmZpbGUnOiAnZG9ja2VyZmlsZScsXG4gICAgJ2RvY2tlcmlnbm9yZSc6ICdkb2NrZXJpZ25vcmUnLFxuICAgIFxuICAgIC8vIEdpdFxuICAgICdnaXRpZ25vcmUnOiAnZ2l0aWdub3JlJyxcbiAgICAnZ2l0YXR0cmlidXRlcyc6ICdnaXRhdHRyaWJ1dGVzJyxcbiAgICBcbiAgICAvLyBQYWNrYWdlIG1hbmFnZXJzXG4gICAgJ3BhY2thZ2UuanNvbic6ICdwYWNrYWdlLmpzb24nLFxuICAgICdyZXF1aXJlbWVudHMudHh0JzogJ3JlcXVpcmVtZW50cy50eHQnLFxuICAgICdwb20ueG1sJzogJ3BvbS54bWwnLFxuICAgICdidWlsZC5ncmFkbGUnOiAnZ3JhZGxlJyxcbiAgICAnZ28ubW9kJzogJ2dvLm1vZCcsXG4gICAgJ2NhcmdvLnRvbWwnOiAnY2FyZ28udG9tbCcsXG4gICAgJ2NvbXBvc2VyLmpzb24nOiAnY29tcG9zZXIuanNvbicsXG4gICAgJ2dlbWZpbGUnOiAnZ2VtZmlsZScsXG4gICAgJ3BvZGZpbGUnOiAncG9kZmlsZScsXG4gICAgJ3B1YnNwZWMueWFtbCc6ICdwdWJzcGVjLnlhbWwnXG4gIH07XG5cbiAgcmV0dXJuIHR5cGVNYXBbZXh0IHx8ICcnXSB8fCAndW5rbm93bic7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgZmlsZSBzaG91bGQgYmUgYW5hbHl6ZWRcbiAqIEBwYXJhbSBmaWxlbmFtZSBGaWxlIG5hbWVcbiAqIEByZXR1cm5zIFdoZXRoZXIgZmlsZSBzaG91bGQgYmUgYW5hbHl6ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZEFuYWx5emVGaWxlKGZpbGVuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgY29uc3QgZXh0ID0gZmlsZW5hbWUuc3BsaXQoJy4nKS5wb3AoKT8udG9Mb3dlckNhc2UoKTtcbiAgXG4gIC8vIE9ubHkgYWxsb3cgd2ViIGZpbGUgdHlwZXNcbiAgY29uc3QgYWxsb3dlZEV4dGVuc2lvbnMgPSBbXG4gICAgJ2h0bWwnLCAnaHRtJywgICAgICAgICAgIC8vIEhUTUwgZmlsZXNcbiAgICAnY3NzJywgICAgICAgICAgICAgICAgICAgLy8gQ1NTIGZpbGVzXG4gICAgJ2pzJywgJ21qcycsICd0cycsICAgICAgIC8vIEphdmFTY3JpcHQvVHlwZVNjcmlwdCBmaWxlc1xuICAgICdzdmcnLCAgICAgICAgICAgICAgICAgICAvLyBTVkcgZmlsZXNcbiAgICAnd2FzbScsICAgICAgICAgICAgICAgICAgLy8gV2ViQXNzZW1ibHkgZmlsZXNcbiAgICAnanNvbicsICAgICAgICAgICAgICAgICAgLy8gSlNPTiBmaWxlc1xuICAgICd3ZWJtYW5pZmVzdCcgICAgICAgICAgICAvLyBXZWIgbWFuaWZlc3QgZmlsZXNcbiAgXTtcbiAgXG4gIHJldHVybiBhbGxvd2VkRXh0ZW5zaW9ucy5pbmNsdWRlcyhleHQgfHwgJycpO1xufVxuIl0sIm5hbWVzIjpbInByb2Nlc3NTaW5nbGVGaWxlIiwiZmlsZVBhdGgiLCJjb250ZW50IiwibWF4RmlsZVNpemUiLCJmaWxlU2l6ZSIsIkJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJmaWxlcyIsInRvdGFsRmlsZXMiLCJza2lwcGVkRmlsZXMiLCJleHRyYWN0ZWRGaWxlIiwicGF0aCIsInNpemUiLCJkZXRlY3RGaWxlVHlwZSIsImZpbGVuYW1lIiwiZXh0Iiwic3BsaXQiLCJwb3AiLCJ0b0xvd2VyQ2FzZSIsInR5cGVNYXAiLCJzaG91bGRBbmFseXplRmlsZSIsImFsbG93ZWRFeHRlbnNpb25zIiwiaW5jbHVkZXMiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/files/single-file.ts\n");

/***/ }),

/***/ "(rsc)/./lib/files/store.ts":
/*!****************************!*\
  !*** ./lib/files/store.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analysisExists: () => (/* binding */ analysisExists),\n/* harmony export */   cleanupOldAnalyses: () => (/* binding */ cleanupOldAnalyses),\n/* harmony export */   deleteAnalysis: () => (/* binding */ deleteAnalysis),\n/* harmony export */   getAnalysisMetadata: () => (/* binding */ getAnalysisMetadata),\n/* harmony export */   getStorageStats: () => (/* binding */ getStorageStats),\n/* harmony export */   getStoredAnalysis: () => (/* binding */ getStoredAnalysis),\n/* harmony export */   listStoredAnalyses: () => (/* binding */ listStoredAnalyses),\n/* harmony export */   storeAnalysisResults: () => (/* binding */ storeAnalysisResults)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var papaparse__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! papaparse */ \"(rsc)/./node_modules/papaparse/papaparse.js\");\n/* harmony import */ var papaparse__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(papaparse__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n/**\r\n * Store analysis results and return public URLs\r\n * @param report Analysis report\r\n * @param options Storage options\r\n * @returns Stored artifacts with public URLs\r\n */ function storeAnalysisResults(report, options = {}) {\n    const { baseDir = process.env.VERCEL ? '/tmp/analysis' : (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(process.cwd(), 'tmp', 'analysis'), publicUrl = 'http://localhost:3000', ttl = 24 * 60 * 60 * 1000 } = options;\n    const analysisId = (0,crypto__WEBPACK_IMPORTED_MODULE_2__.randomUUID)();\n    // Ensure base directory exists\n    if (!(0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(baseDir)) {\n        (0,fs__WEBPACK_IMPORTED_MODULE_0__.mkdirSync)(baseDir, {\n            recursive: true\n        });\n    }\n    // Create analysis directory\n    const analysisDir = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(baseDir, analysisId);\n    if (!(0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(analysisDir)) {\n        (0,fs__WEBPACK_IMPORTED_MODULE_0__.mkdirSync)(analysisDir, {\n            recursive: true\n        });\n    }\n    // Store JSON report\n    const jsonPath = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(analysisDir, 'report.json');\n    (0,fs__WEBPACK_IMPORTED_MODULE_0__.writeFileSync)(jsonPath, JSON.stringify(report, null, 2));\n    // Store CSV report\n    const csvPath = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(analysisDir, 'report.csv');\n    const csvContent = generateCSV(report);\n    (0,fs__WEBPACK_IMPORTED_MODULE_0__.writeFileSync)(csvPath, csvContent);\n    // Schedule cleanup\n    scheduleCleanup(analysisDir, ttl);\n    return {\n        jsonUrl: `${publicUrl}/api/analyze/${analysisId}?format=json`,\n        csvUrl: `${publicUrl}/api/analyze/${analysisId}?format=csv`,\n        analysisId\n    };\n}\n/**\r\n * Generate CSV content from report\r\n * @param report Analysis report\r\n * @returns CSV content\r\n */ function generateCSV(report) {\n    const rows = [];\n    for (const finding of report.findings){\n        if (finding.kind === 'dependency') {\n            rows.push({\n                Kind: 'Dependency',\n                Language: finding.lang,\n                Component: finding.component,\n                File: finding.file,\n                Line: '',\n                Status: finding.status,\n                Reason: finding.reason,\n                'Quick Fix': finding.quickFix || '',\n                'Found Version': finding.foundVersion || '',\n                'Required Version': finding.baselineRequired || ''\n            });\n        } else if (finding.kind === 'pattern') {\n            rows.push({\n                Kind: 'Pattern',\n                Language: finding.lang,\n                Component: '',\n                File: finding.file,\n                Line: finding.line.toString(),\n                Status: finding.status,\n                Reason: finding.issue,\n                'Quick Fix': finding.quickFix || '',\n                'Found Version': '',\n                'Required Version': ''\n            });\n        }\n    }\n    return papaparse__WEBPACK_IMPORTED_MODULE_3___default().unparse(rows);\n}\n/**\r\n * Schedule cleanup of analysis files\r\n * @param analysisDir Analysis directory path\r\n * @param ttl Time to live in milliseconds\r\n */ function scheduleCleanup(analysisDir, ttl) {\n    setTimeout(async ()=>{\n        try {\n            if ((0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(analysisDir)) {\n                // Remove directory and all contents\n                const { rmSync } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 23));\n                rmSync(analysisDir, {\n                    recursive: true,\n                    force: true\n                });\n            }\n        } catch (error) {\n            console.warn(`Failed to cleanup analysis directory ${analysisDir}: ${error}`);\n        }\n    }, ttl);\n}\n/**\r\n * Get stored analysis report\r\n * @param analysisId Analysis ID\r\n * @param format Format (json or csv)\r\n * @param baseDir Base directory for storage\r\n * @returns Report content or null if not found\r\n */ async function getStoredAnalysis(analysisId, format = 'json', baseDir = process.env.VERCEL ? '/tmp/analysis' : (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(process.cwd(), 'tmp', 'analysis')) {\n    try {\n        const analysisDir = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(baseDir, analysisId);\n        const filePath = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(analysisDir, `report.${format}`);\n        if (!(0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(filePath)) {\n            return null;\n        }\n        const { readFileSync } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 23));\n        const content = readFileSync(filePath, 'utf8');\n        return content;\n    } catch (error) {\n        console.warn(`Failed to read stored analysis ${analysisId}: ${error}`);\n        return null;\n    }\n}\n/**\r\n * Check if analysis exists\r\n * @param analysisId Analysis ID\r\n * @param baseDir Base directory for storage\r\n * @returns True if analysis exists\r\n */ function analysisExists(analysisId, baseDir = process.env.VERCEL ? '/tmp/analysis' : (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(process.cwd(), 'tmp', 'analysis')) {\n    const analysisDir = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(baseDir, analysisId);\n    return (0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(analysisDir);\n}\n/**\r\n * Clean up old analysis files\r\n * @param baseDir Base directory for storage\r\n * @param maxAge Maximum age in milliseconds\r\n * @returns Number of cleaned up analyses\r\n */ async function cleanupOldAnalyses(baseDir = process.env.VERCEL ? '/tmp/analysis' : (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(process.cwd(), 'tmp', 'analysis'), maxAge = 24 * 60 * 60 * 1000 // 24 hours\n) {\n    let cleanedCount = 0;\n    try {\n        if (!(0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(baseDir)) {\n            return 0;\n        }\n        const { readdirSync, statSync, rmSync } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 23));\n        const entries = readdirSync(baseDir, {\n            withFileTypes: true\n        });\n        for (const entry of entries){\n            if (entry.isDirectory()) {\n                const analysisDir = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(baseDir, entry.name);\n                const stats = statSync(analysisDir);\n                const age = Date.now() - stats.mtime.getTime();\n                if (age > maxAge) {\n                    try {\n                        rmSync(analysisDir, {\n                            recursive: true,\n                            force: true\n                        });\n                        cleanedCount++;\n                    } catch (error) {\n                        console.warn(`Failed to cleanup ${analysisDir}: ${error}`);\n                    }\n                }\n            }\n        }\n    } catch (error) {\n        console.warn(`Failed to cleanup old analyses: ${error}`);\n    }\n    return cleanedCount;\n}\n/**\r\n * Get analysis metadata\r\n * @param analysisId Analysis ID\r\n * @param baseDir Base directory for storage\r\n * @returns Analysis metadata or null\r\n */ async function getAnalysisMetadata(analysisId, baseDir = process.env.VERCEL ? '/tmp/analysis' : (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(process.cwd(), 'tmp', 'analysis')) {\n    try {\n        const analysisDir = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(baseDir, analysisId);\n        if (!(0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(analysisDir)) {\n            return null;\n        }\n        const { statSync } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 23));\n        const stats = statSync(analysisDir);\n        return {\n            createdAt: stats.birthtime,\n            size: stats.size\n        };\n    } catch (error) {\n        console.warn(`Failed to get metadata for ${analysisId}: ${error}`);\n        return null;\n    }\n}\n/**\r\n * List all stored analyses\r\n * @param baseDir Base directory for storage\r\n * @returns Array of analysis IDs\r\n */ async function listStoredAnalyses(baseDir = process.env.VERCEL ? '/tmp/analysis' : (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(process.cwd(), 'tmp', 'analysis')) {\n    try {\n        if (!(0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(baseDir)) {\n            return [];\n        }\n        const { readdirSync } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 23));\n        const entries = readdirSync(baseDir, {\n            withFileTypes: true\n        });\n        return entries.filter((entry)=>entry.isDirectory()).map((entry)=>entry.name);\n    } catch (error) {\n        console.warn(`Failed to list stored analyses: ${error}`);\n        return [];\n    }\n}\n/**\r\n * Delete specific analysis\r\n * @param analysisId Analysis ID\r\n * @param baseDir Base directory for storage\r\n * @returns True if deleted successfully\r\n */ async function deleteAnalysis(analysisId, baseDir = process.env.VERCEL ? '/tmp/analysis' : (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(process.cwd(), 'tmp', 'analysis')) {\n    try {\n        const analysisDir = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(baseDir, analysisId);\n        if (!(0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(analysisDir)) {\n            return false;\n        }\n        const { rmSync } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 23));\n        rmSync(analysisDir, {\n            recursive: true,\n            force: true\n        });\n        return true;\n    } catch (error) {\n        console.warn(`Failed to delete analysis ${analysisId}: ${error}`);\n        return false;\n    }\n}\n/**\r\n * Get storage statistics\r\n * @param baseDir Base directory for storage\r\n * @returns Storage statistics\r\n */ async function getStorageStats(baseDir = process.env.VERCEL ? '/tmp/analysis' : (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(process.cwd(), 'tmp', 'analysis')) {\n    try {\n        if (!(0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(baseDir)) {\n            return {\n                totalAnalyses: 0,\n                totalSize: 0,\n                oldestAnalysis: null,\n                newestAnalysis: null\n            };\n        }\n        const { readdirSync, statSync } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 23));\n        const entries = readdirSync(baseDir, {\n            withFileTypes: true\n        });\n        const analyses = entries.filter((entry)=>entry.isDirectory());\n        let totalSize = 0;\n        let oldestDate = null;\n        let newestDate = null;\n        for (const analysis of analyses){\n            const analysisDir = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(baseDir, analysis.name);\n            const stats = statSync(analysisDir);\n            totalSize += stats.size;\n            if (!oldestDate || stats.birthtime < oldestDate) {\n                oldestDate = stats.birthtime;\n            }\n            if (!newestDate || stats.birthtime > newestDate) {\n                newestDate = stats.birthtime;\n            }\n        }\n        return {\n            totalAnalyses: analyses.length,\n            totalSize,\n            oldestAnalysis: oldestDate,\n            newestAnalysis: newestDate\n        };\n    } catch (error) {\n        console.warn(`Failed to get storage stats: ${error}`);\n        return {\n            totalAnalyses: 0,\n            totalSize: 0,\n            oldestAnalysis: null,\n            newestAnalysis: null\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFNBQVN1RixTQUFTdkIsSUFBSTtZQUMvQyxNQUFNQyxRQUFRTixTQUFTbEQ7WUFFdkJ3RSxhQUFhaEIsTUFBTVMsSUFBSTtZQUV2QixJQUFJLENBQUNXLGNBQWNwQixNQUFNUSxTQUFTLEdBQUdZLFlBQVk7Z0JBQy9DQSxhQUFhcEIsTUFBTVEsU0FBUztZQUM5QjtZQUVBLElBQUksQ0FBQ2EsY0FBY3JCLE1BQU1RLFNBQVMsR0FBR2EsWUFBWTtnQkFDL0NBLGFBQWFyQixNQUFNUSxTQUFTO1lBQzlCO1FBQ0Y7UUFFQSxPQUFPO1lBQ0xPLGVBQWVJLFNBQVNJLE1BQU07WUFDOUJQO1lBQ0FDLGdCQUFnQkc7WUFDaEJGLGdCQUFnQkc7UUFDbEI7SUFDRixFQUFFLE9BQU94QyxPQUFPO1FBQ2RDLFFBQVFDLElBQUksQ0FBQyxDQUFDLDZCQUE2QixFQUFFRixPQUFPO1FBQ3BELE9BQU87WUFDTGtDLGVBQWU7WUFDZkMsV0FBVztZQUNYQyxnQkFBZ0I7WUFDaEJDLGdCQUFnQjtRQUNsQjtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQ2toYWRhclxcRG93bmxvYWRzXFxBSV9CYXNlbGluZV9NYXBcXGxpYlxcZmlsZXNcXHN0b3JlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHdyaXRlRmlsZVN5bmMsIG1rZGlyU3luYywgZXhpc3RzU3luYyB9IGZyb20gJ2ZzJztcclxuaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnO1xyXG5pbXBvcnQgeyByYW5kb21VVUlEIH0gZnJvbSAnY3J5cHRvJztcclxuaW1wb3J0IFBhcGEgZnJvbSAncGFwYXBhcnNlJztcclxuaW1wb3J0IHsgUmVwb3J0LCBDU1ZSb3cgfSBmcm9tICcuLi9hbmFseXNpcy9iYXNlbGluZS50eXBlcyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFN0b3JlZEFydGlmYWN0cyB7XHJcbiAganNvblVybDogc3RyaW5nO1xyXG4gIGNzdlVybDogc3RyaW5nO1xyXG4gIGFuYWx5c2lzSWQ6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTdG9yYWdlT3B0aW9ucyB7XHJcbiAgYmFzZURpcj86IHN0cmluZztcclxuICBwdWJsaWNVcmw/OiBzdHJpbmc7XHJcbiAgdHRsPzogbnVtYmVyOyAvLyBUaW1lIHRvIGxpdmUgaW4gbWlsbGlzZWNvbmRzXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTdG9yZSBhbmFseXNpcyByZXN1bHRzIGFuZCByZXR1cm4gcHVibGljIFVSTHNcclxuICogQHBhcmFtIHJlcG9ydCBBbmFseXNpcyByZXBvcnRcclxuICogQHBhcmFtIG9wdGlvbnMgU3RvcmFnZSBvcHRpb25zXHJcbiAqIEByZXR1cm5zIFN0b3JlZCBhcnRpZmFjdHMgd2l0aCBwdWJsaWMgVVJMc1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHN0b3JlQW5hbHlzaXNSZXN1bHRzKFxyXG4gIHJlcG9ydDogUmVwb3J0LFxyXG4gIG9wdGlvbnM6IFN0b3JhZ2VPcHRpb25zID0ge31cclxuKTogU3RvcmVkQXJ0aWZhY3RzIHtcclxuICBjb25zdCB7XHJcbiAgICBiYXNlRGlyID0gcHJvY2Vzcy5lbnYuVkVSQ0VMID8gJy90bXAvYW5hbHlzaXMnIDogam9pbihwcm9jZXNzLmN3ZCgpLCAndG1wJywgJ2FuYWx5c2lzJyksXHJcbiAgICBwdWJsaWNVcmwgPSAnaHR0cDovL2xvY2FsaG9zdDozMDAwJyxcclxuICAgIHR0bCA9IDI0ICogNjAgKiA2MCAqIDEwMDAsIC8vIDI0IGhvdXJzXHJcbiAgfSA9IG9wdGlvbnM7XHJcblxyXG4gIGNvbnN0IGFuYWx5c2lzSWQgPSByYW5kb21VVUlEKCk7XHJcbiAgXHJcbiAgLy8gRW5zdXJlIGJhc2UgZGlyZWN0b3J5IGV4aXN0c1xyXG4gIGlmICghZXhpc3RzU3luYyhiYXNlRGlyKSkge1xyXG4gICAgbWtkaXJTeW5jKGJhc2VEaXIsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gQ3JlYXRlIGFuYWx5c2lzIGRpcmVjdG9yeVxyXG4gIGNvbnN0IGFuYWx5c2lzRGlyID0gam9pbihiYXNlRGlyLCBhbmFseXNpc0lkKTtcclxuICBpZiAoIWV4aXN0c1N5bmMoYW5hbHlzaXNEaXIpKSB7XHJcbiAgICBta2RpclN5bmMoYW5hbHlzaXNEaXIsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gU3RvcmUgSlNPTiByZXBvcnRcclxuICBjb25zdCBqc29uUGF0aCA9IGpvaW4oYW5hbHlzaXNEaXIsICdyZXBvcnQuanNvbicpO1xyXG4gIHdyaXRlRmlsZVN5bmMoanNvblBhdGgsIEpTT04uc3RyaW5naWZ5KHJlcG9ydCwgbnVsbCwgMikpO1xyXG5cclxuICAvLyBTdG9yZSBDU1YgcmVwb3J0XHJcbiAgY29uc3QgY3N2UGF0aCA9IGpvaW4oYW5hbHlzaXNEaXIsICdyZXBvcnQuY3N2Jyk7XHJcbiAgY29uc3QgY3N2Q29udGVudCA9IGdlbmVyYXRlQ1NWKHJlcG9ydCk7XHJcbiAgd3JpdGVGaWxlU3luYyhjc3ZQYXRoLCBjc3ZDb250ZW50KTtcclxuXHJcbiAgLy8gU2NoZWR1bGUgY2xlYW51cFxyXG4gIHNjaGVkdWxlQ2xlYW51cChhbmFseXNpc0RpciwgdHRsKTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGpzb25Vcmw6IGAke3B1YmxpY1VybH0vYXBpL2FuYWx5emUvJHthbmFseXNpc0lkfT9mb3JtYXQ9anNvbmAsXHJcbiAgICBjc3ZVcmw6IGAke3B1YmxpY1VybH0vYXBpL2FuYWx5emUvJHthbmFseXNpc0lkfT9mb3JtYXQ9Y3N2YCxcclxuICAgIGFuYWx5c2lzSWQsXHJcbiAgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdlbmVyYXRlIENTViBjb250ZW50IGZyb20gcmVwb3J0XHJcbiAqIEBwYXJhbSByZXBvcnQgQW5hbHlzaXMgcmVwb3J0XHJcbiAqIEByZXR1cm5zIENTViBjb250ZW50XHJcbiAqL1xyXG5mdW5jdGlvbiBnZW5lcmF0ZUNTVihyZXBvcnQ6IFJlcG9ydCk6IHN0cmluZyB7XHJcbiAgY29uc3Qgcm93czogQ1NWUm93W10gPSBbXTtcclxuXHJcbiAgZm9yIChjb25zdCBmaW5kaW5nIG9mIHJlcG9ydC5maW5kaW5ncykge1xyXG4gICAgaWYgKGZpbmRpbmcua2luZCA9PT0gJ2RlcGVuZGVuY3knKSB7XHJcbiAgICAgIHJvd3MucHVzaCh7XHJcbiAgICAgICAgS2luZDogJ0RlcGVuZGVuY3knLFxyXG4gICAgICAgIExhbmd1YWdlOiBmaW5kaW5nLmxhbmcsXHJcbiAgICAgICAgQ29tcG9uZW50OiBmaW5kaW5nLmNvbXBvbmVudCxcclxuICAgICAgICBGaWxlOiBmaW5kaW5nLmZpbGUsXHJcbiAgICAgICAgTGluZTogJycsXHJcbiAgICAgICAgU3RhdHVzOiBmaW5kaW5nLnN0YXR1cyxcclxuICAgICAgICBSZWFzb246IGZpbmRpbmcucmVhc29uLFxyXG4gICAgICAgICdRdWljayBGaXgnOiBmaW5kaW5nLnF1aWNrRml4IHx8ICcnLFxyXG4gICAgICAgICdGb3VuZCBWZXJzaW9uJzogZmluZGluZy5mb3VuZFZlcnNpb24gfHwgJycsXHJcbiAgICAgICAgJ1JlcXVpcmVkIFZlcnNpb24nOiBmaW5kaW5nLmJhc2VsaW5lUmVxdWlyZWQgfHwgJycsXHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIGlmIChmaW5kaW5nLmtpbmQgPT09ICdwYXR0ZXJuJykge1xyXG4gICAgICByb3dzLnB1c2goe1xyXG4gICAgICAgIEtpbmQ6ICdQYXR0ZXJuJyxcclxuICAgICAgICBMYW5ndWFnZTogZmluZGluZy5sYW5nLFxyXG4gICAgICAgIENvbXBvbmVudDogJycsXHJcbiAgICAgICAgRmlsZTogZmluZGluZy5maWxlLFxyXG4gICAgICAgIExpbmU6IGZpbmRpbmcubGluZS50b1N0cmluZygpLFxyXG4gICAgICAgIFN0YXR1czogZmluZGluZy5zdGF0dXMsXHJcbiAgICAgICAgUmVhc29uOiBmaW5kaW5nLmlzc3VlLFxyXG4gICAgICAgICdRdWljayBGaXgnOiBmaW5kaW5nLnF1aWNrRml4IHx8ICcnLFxyXG4gICAgICAgICdGb3VuZCBWZXJzaW9uJzogJycsXHJcbiAgICAgICAgJ1JlcXVpcmVkIFZlcnNpb24nOiAnJyxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gUGFwYS51bnBhcnNlKHJvd3MpO1xyXG59XHJcblxyXG4vKipcclxuICogU2NoZWR1bGUgY2xlYW51cCBvZiBhbmFseXNpcyBmaWxlc1xyXG4gKiBAcGFyYW0gYW5hbHlzaXNEaXIgQW5hbHlzaXMgZGlyZWN0b3J5IHBhdGhcclxuICogQHBhcmFtIHR0bCBUaW1lIHRvIGxpdmUgaW4gbWlsbGlzZWNvbmRzXHJcbiAqL1xyXG5mdW5jdGlvbiBzY2hlZHVsZUNsZWFudXAoYW5hbHlzaXNEaXI6IHN0cmluZywgdHRsOiBudW1iZXIpOiB2b2lkIHtcclxuICBzZXRUaW1lb3V0KGFzeW5jICgpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGlmIChleGlzdHNTeW5jKGFuYWx5c2lzRGlyKSkge1xyXG4gICAgICAgIC8vIFJlbW92ZSBkaXJlY3RvcnkgYW5kIGFsbCBjb250ZW50c1xyXG4gICAgICAgIGNvbnN0IHsgcm1TeW5jIH0gPSBhd2FpdCBpbXBvcnQoJ2ZzJyk7XHJcbiAgICAgICAgcm1TeW5jKGFuYWx5c2lzRGlyLCB7IHJlY3Vyc2l2ZTogdHJ1ZSwgZm9yY2U6IHRydWUgfSk7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybihgRmFpbGVkIHRvIGNsZWFudXAgYW5hbHlzaXMgZGlyZWN0b3J5ICR7YW5hbHlzaXNEaXJ9OiAke2Vycm9yfWApO1xyXG4gICAgfVxyXG4gIH0sIHR0bCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgc3RvcmVkIGFuYWx5c2lzIHJlcG9ydFxyXG4gKiBAcGFyYW0gYW5hbHlzaXNJZCBBbmFseXNpcyBJRFxyXG4gKiBAcGFyYW0gZm9ybWF0IEZvcm1hdCAoanNvbiBvciBjc3YpXHJcbiAqIEBwYXJhbSBiYXNlRGlyIEJhc2UgZGlyZWN0b3J5IGZvciBzdG9yYWdlXHJcbiAqIEByZXR1cm5zIFJlcG9ydCBjb250ZW50IG9yIG51bGwgaWYgbm90IGZvdW5kXHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U3RvcmVkQW5hbHlzaXMoXHJcbiAgYW5hbHlzaXNJZDogc3RyaW5nLFxyXG4gIGZvcm1hdDogJ2pzb24nIHwgJ2NzdicgPSAnanNvbicsXHJcbiAgYmFzZURpcjogc3RyaW5nID0gcHJvY2Vzcy5lbnYuVkVSQ0VMID8gJy90bXAvYW5hbHlzaXMnIDogam9pbihwcm9jZXNzLmN3ZCgpLCAndG1wJywgJ2FuYWx5c2lzJylcclxuKTogUHJvbWlzZTxzdHJpbmcgfCBudWxsPiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGFuYWx5c2lzRGlyID0gam9pbihiYXNlRGlyLCBhbmFseXNpc0lkKTtcclxuICAgIGNvbnN0IGZpbGVQYXRoID0gam9pbihhbmFseXNpc0RpciwgYHJlcG9ydC4ke2Zvcm1hdH1gKTtcclxuICAgIFxyXG4gICAgaWYgKCFleGlzdHNTeW5jKGZpbGVQYXRoKSkge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB7IHJlYWRGaWxlU3luYyB9ID0gYXdhaXQgaW1wb3J0KCdmcycpO1xyXG4gICAgY29uc3QgY29udGVudCA9IHJlYWRGaWxlU3luYyhmaWxlUGF0aCwgJ3V0ZjgnKTtcclxuICAgIHJldHVybiBjb250ZW50O1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLndhcm4oYEZhaWxlZCB0byByZWFkIHN0b3JlZCBhbmFseXNpcyAke2FuYWx5c2lzSWR9OiAke2Vycm9yfWApO1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgYW5hbHlzaXMgZXhpc3RzXHJcbiAqIEBwYXJhbSBhbmFseXNpc0lkIEFuYWx5c2lzIElEXHJcbiAqIEBwYXJhbSBiYXNlRGlyIEJhc2UgZGlyZWN0b3J5IGZvciBzdG9yYWdlXHJcbiAqIEByZXR1cm5zIFRydWUgaWYgYW5hbHlzaXMgZXhpc3RzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYW5hbHlzaXNFeGlzdHMoXHJcbiAgYW5hbHlzaXNJZDogc3RyaW5nLFxyXG4gIGJhc2VEaXI6IHN0cmluZyA9IHByb2Nlc3MuZW52LlZFUkNFTCA/ICcvdG1wL2FuYWx5c2lzJyA6IGpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3RtcCcsICdhbmFseXNpcycpXHJcbik6IGJvb2xlYW4ge1xyXG4gIGNvbnN0IGFuYWx5c2lzRGlyID0gam9pbihiYXNlRGlyLCBhbmFseXNpc0lkKTtcclxuICByZXR1cm4gZXhpc3RzU3luYyhhbmFseXNpc0Rpcik7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDbGVhbiB1cCBvbGQgYW5hbHlzaXMgZmlsZXNcclxuICogQHBhcmFtIGJhc2VEaXIgQmFzZSBkaXJlY3RvcnkgZm9yIHN0b3JhZ2VcclxuICogQHBhcmFtIG1heEFnZSBNYXhpbXVtIGFnZSBpbiBtaWxsaXNlY29uZHNcclxuICogQHJldHVybnMgTnVtYmVyIG9mIGNsZWFuZWQgdXAgYW5hbHlzZXNcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjbGVhbnVwT2xkQW5hbHlzZXMoXHJcbiAgYmFzZURpcjogc3RyaW5nID0gcHJvY2Vzcy5lbnYuVkVSQ0VMID8gJy90bXAvYW5hbHlzaXMnIDogam9pbihwcm9jZXNzLmN3ZCgpLCAndG1wJywgJ2FuYWx5c2lzJyksXHJcbiAgbWF4QWdlOiBudW1iZXIgPSAyNCAqIDYwICogNjAgKiAxMDAwIC8vIDI0IGhvdXJzXHJcbik6IFByb21pc2U8bnVtYmVyPiB7XHJcbiAgbGV0IGNsZWFuZWRDb3VudCA9IDA7XHJcblxyXG4gIHRyeSB7XHJcbiAgICBpZiAoIWV4aXN0c1N5bmMoYmFzZURpcikpIHtcclxuICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgeyByZWFkZGlyU3luYywgc3RhdFN5bmMsIHJtU3luYyB9ID0gYXdhaXQgaW1wb3J0KCdmcycpO1xyXG4gICAgY29uc3QgZW50cmllcyA9IHJlYWRkaXJTeW5jKGJhc2VEaXIsIHsgd2l0aEZpbGVUeXBlczogdHJ1ZSB9KTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpIHtcclxuICAgICAgaWYgKGVudHJ5LmlzRGlyZWN0b3J5KCkpIHtcclxuICAgICAgICBjb25zdCBhbmFseXNpc0RpciA9IGpvaW4oYmFzZURpciwgZW50cnkubmFtZSk7XHJcbiAgICAgICAgY29uc3Qgc3RhdHMgPSBzdGF0U3luYyhhbmFseXNpc0Rpcik7XHJcbiAgICAgICAgY29uc3QgYWdlID0gRGF0ZS5ub3coKSAtIHN0YXRzLm10aW1lLmdldFRpbWUoKTtcclxuXHJcbiAgICAgICAgaWYgKGFnZSA+IG1heEFnZSkge1xyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcm1TeW5jKGFuYWx5c2lzRGlyLCB7IHJlY3Vyc2l2ZTogdHJ1ZSwgZm9yY2U6IHRydWUgfSk7XHJcbiAgICAgICAgICAgIGNsZWFuZWRDb3VudCsrO1xyXG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKGBGYWlsZWQgdG8gY2xlYW51cCAke2FuYWx5c2lzRGlyfTogJHtlcnJvcn1gKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS53YXJuKGBGYWlsZWQgdG8gY2xlYW51cCBvbGQgYW5hbHlzZXM6ICR7ZXJyb3J9YCk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gY2xlYW5lZENvdW50O1xyXG59XHJcblxyXG4vKipcclxuICogR2V0IGFuYWx5c2lzIG1ldGFkYXRhXHJcbiAqIEBwYXJhbSBhbmFseXNpc0lkIEFuYWx5c2lzIElEXHJcbiAqIEBwYXJhbSBiYXNlRGlyIEJhc2UgZGlyZWN0b3J5IGZvciBzdG9yYWdlXHJcbiAqIEByZXR1cm5zIEFuYWx5c2lzIG1ldGFkYXRhIG9yIG51bGxcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBbmFseXNpc01ldGFkYXRhKFxyXG4gIGFuYWx5c2lzSWQ6IHN0cmluZyxcclxuICBiYXNlRGlyOiBzdHJpbmcgPSBwcm9jZXNzLmVudi5WRVJDRUwgPyAnL3RtcC9hbmFseXNpcycgOiBqb2luKHByb2Nlc3MuY3dkKCksICd0bXAnLCAnYW5hbHlzaXMnKVxyXG4pOiBQcm9taXNlPHsgY3JlYXRlZEF0OiBEYXRlOyBzaXplOiBudW1iZXIgfSB8IG51bGw+IHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgYW5hbHlzaXNEaXIgPSBqb2luKGJhc2VEaXIsIGFuYWx5c2lzSWQpO1xyXG4gICAgXHJcbiAgICBpZiAoIWV4aXN0c1N5bmMoYW5hbHlzaXNEaXIpKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHsgc3RhdFN5bmMgfSA9IGF3YWl0IGltcG9ydCgnZnMnKTtcclxuICAgIGNvbnN0IHN0YXRzID0gc3RhdFN5bmMoYW5hbHlzaXNEaXIpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGNyZWF0ZWRBdDogc3RhdHMuYmlydGh0aW1lLFxyXG4gICAgICBzaXplOiBzdGF0cy5zaXplLFxyXG4gICAgfTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS53YXJuKGBGYWlsZWQgdG8gZ2V0IG1ldGFkYXRhIGZvciAke2FuYWx5c2lzSWR9OiAke2Vycm9yfWApO1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogTGlzdCBhbGwgc3RvcmVkIGFuYWx5c2VzXHJcbiAqIEBwYXJhbSBiYXNlRGlyIEJhc2UgZGlyZWN0b3J5IGZvciBzdG9yYWdlXHJcbiAqIEByZXR1cm5zIEFycmF5IG9mIGFuYWx5c2lzIElEc1xyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxpc3RTdG9yZWRBbmFseXNlcyhcclxuICBiYXNlRGlyOiBzdHJpbmcgPSBwcm9jZXNzLmVudi5WRVJDRUwgPyAnL3RtcC9hbmFseXNpcycgOiBqb2luKHByb2Nlc3MuY3dkKCksICd0bXAnLCAnYW5hbHlzaXMnKVxyXG4pOiBQcm9taXNlPHN0cmluZ1tdPiB7XHJcbiAgdHJ5IHtcclxuICAgIGlmICghZXhpc3RzU3luYyhiYXNlRGlyKSkge1xyXG4gICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgeyByZWFkZGlyU3luYyB9ID0gYXdhaXQgaW1wb3J0KCdmcycpO1xyXG4gICAgY29uc3QgZW50cmllcyA9IHJlYWRkaXJTeW5jKGJhc2VEaXIsIHsgd2l0aEZpbGVUeXBlczogdHJ1ZSB9KTtcclxuXHJcbiAgICByZXR1cm4gZW50cmllc1xyXG4gICAgICAuZmlsdGVyKGVudHJ5ID0+IGVudHJ5LmlzRGlyZWN0b3J5KCkpXHJcbiAgICAgIC5tYXAoZW50cnkgPT4gZW50cnkubmFtZSk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUud2FybihgRmFpbGVkIHRvIGxpc3Qgc3RvcmVkIGFuYWx5c2VzOiAke2Vycm9yfWApO1xyXG4gICAgcmV0dXJuIFtdO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIERlbGV0ZSBzcGVjaWZpYyBhbmFseXNpc1xyXG4gKiBAcGFyYW0gYW5hbHlzaXNJZCBBbmFseXNpcyBJRFxyXG4gKiBAcGFyYW0gYmFzZURpciBCYXNlIGRpcmVjdG9yeSBmb3Igc3RvcmFnZVxyXG4gKiBAcmV0dXJucyBUcnVlIGlmIGRlbGV0ZWQgc3VjY2Vzc2Z1bGx5XHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVsZXRlQW5hbHlzaXMoXHJcbiAgYW5hbHlzaXNJZDogc3RyaW5nLFxyXG4gIGJhc2VEaXI6IHN0cmluZyA9IHByb2Nlc3MuZW52LlZFUkNFTCA/ICcvdG1wL2FuYWx5c2lzJyA6IGpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3RtcCcsICdhbmFseXNpcycpXHJcbik6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBhbmFseXNpc0RpciA9IGpvaW4oYmFzZURpciwgYW5hbHlzaXNJZCk7XHJcbiAgICBcclxuICAgIGlmICghZXhpc3RzU3luYyhhbmFseXNpc0RpcikpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHsgcm1TeW5jIH0gPSBhd2FpdCBpbXBvcnQoJ2ZzJyk7XHJcbiAgICBybVN5bmMoYW5hbHlzaXNEaXIsIHsgcmVjdXJzaXZlOiB0cnVlLCBmb3JjZTogdHJ1ZSB9KTtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLndhcm4oYEZhaWxlZCB0byBkZWxldGUgYW5hbHlzaXMgJHthbmFseXNpc0lkfTogJHtlcnJvcn1gKTtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgc3RvcmFnZSBzdGF0aXN0aWNzXHJcbiAqIEBwYXJhbSBiYXNlRGlyIEJhc2UgZGlyZWN0b3J5IGZvciBzdG9yYWdlXHJcbiAqIEByZXR1cm5zIFN0b3JhZ2Ugc3RhdGlzdGljc1xyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFN0b3JhZ2VTdGF0cyhcclxuICBiYXNlRGlyOiBzdHJpbmcgPSBwcm9jZXNzLmVudi5WRVJDRUwgPyAnL3RtcC9hbmFseXNpcycgOiBqb2luKHByb2Nlc3MuY3dkKCksICd0bXAnLCAnYW5hbHlzaXMnKVxyXG4pOiBQcm9taXNlPHtcclxuICB0b3RhbEFuYWx5c2VzOiBudW1iZXI7XHJcbiAgdG90YWxTaXplOiBudW1iZXI7XHJcbiAgb2xkZXN0QW5hbHlzaXM6IERhdGUgfCBudWxsO1xyXG4gIG5ld2VzdEFuYWx5c2lzOiBEYXRlIHwgbnVsbDtcclxufT4ge1xyXG4gIHRyeSB7XHJcbiAgICBpZiAoIWV4aXN0c1N5bmMoYmFzZURpcikpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICB0b3RhbEFuYWx5c2VzOiAwLFxyXG4gICAgICAgIHRvdGFsU2l6ZTogMCxcclxuICAgICAgICBvbGRlc3RBbmFseXNpczogbnVsbCxcclxuICAgICAgICBuZXdlc3RBbmFseXNpczogbnVsbCxcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB7IHJlYWRkaXJTeW5jLCBzdGF0U3luYyB9ID0gYXdhaXQgaW1wb3J0KCdmcycpO1xyXG4gICAgY29uc3QgZW50cmllcyA9IHJlYWRkaXJTeW5jKGJhc2VEaXIsIHsgd2l0aEZpbGVUeXBlczogdHJ1ZSB9KTtcclxuICAgIGNvbnN0IGFuYWx5c2VzID0gZW50cmllcy5maWx0ZXIoZW50cnkgPT4gZW50cnkuaXNEaXJlY3RvcnkoKSk7XHJcblxyXG4gICAgbGV0IHRvdGFsU2l6ZSA9IDA7XHJcbiAgICBsZXQgb2xkZXN0RGF0ZTogRGF0ZSB8IG51bGwgPSBudWxsO1xyXG4gICAgbGV0IG5ld2VzdERhdGU6IERhdGUgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGFuYWx5c2lzIG9mIGFuYWx5c2VzKSB7XHJcbiAgICAgIGNvbnN0IGFuYWx5c2lzRGlyID0gam9pbihiYXNlRGlyLCBhbmFseXNpcy5uYW1lKTtcclxuICAgICAgY29uc3Qgc3RhdHMgPSBzdGF0U3luYyhhbmFseXNpc0Rpcik7XHJcbiAgICAgIFxyXG4gICAgICB0b3RhbFNpemUgKz0gc3RhdHMuc2l6ZTtcclxuICAgICAgXHJcbiAgICAgIGlmICghb2xkZXN0RGF0ZSB8fCBzdGF0cy5iaXJ0aHRpbWUgPCBvbGRlc3REYXRlKSB7XHJcbiAgICAgICAgb2xkZXN0RGF0ZSA9IHN0YXRzLmJpcnRodGltZTtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYgKCFuZXdlc3REYXRlIHx8IHN0YXRzLmJpcnRodGltZSA+IG5ld2VzdERhdGUpIHtcclxuICAgICAgICBuZXdlc3REYXRlID0gc3RhdHMuYmlydGh0aW1lO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdG90YWxBbmFseXNlczogYW5hbHlzZXMubGVuZ3RoLFxyXG4gICAgICB0b3RhbFNpemUsXHJcbiAgICAgIG9sZGVzdEFuYWx5c2lzOiBvbGRlc3REYXRlLFxyXG4gICAgICBuZXdlc3RBbmFseXNpczogbmV3ZXN0RGF0ZSxcclxuICAgIH07XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUud2FybihgRmFpbGVkIHRvIGdldCBzdG9yYWdlIHN0YXRzOiAke2Vycm9yfWApO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdG90YWxBbmFseXNlczogMCxcclxuICAgICAgdG90YWxTaXplOiAwLFxyXG4gICAgICBvbGRlc3RBbmFseXNpczogbnVsbCxcclxuICAgICAgbmV3ZXN0QW5hbHlzaXM6IG51bGwsXHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOlsid3JpdGVGaWxlU3luYyIsIm1rZGlyU3luYyIsImV4aXN0c1N5bmMiLCJqb2luIiwicmFuZG9tVVVJRCIsIlBhcGEiLCJzdG9yZUFuYWx5c2lzUmVzdWx0cyIsInJlcG9ydCIsIm9wdGlvbnMiLCJiYXNlRGlyIiwicHJvY2VzcyIsImVudiIsIlZFUkNFTCIsImN3ZCIsInB1YmxpY1VybCIsInR0bCIsImFuYWx5c2lzSWQiLCJyZWN1cnNpdmUiLCJhbmFseXNpc0RpciIsImpzb25QYXRoIiwiSlNPTiIsInN0cmluZ2lmeSIsImNzdlBhdGgiLCJjc3ZDb250ZW50IiwiZ2VuZXJhdGVDU1YiLCJzY2hlZHVsZUNsZWFudXAiLCJqc29uVXJsIiwiY3N2VXJsIiwicm93cyIsImZpbmRpbmciLCJmaW5kaW5ncyIsImtpbmQiLCJwdXNoIiwiS2luZCIsIkxhbmd1YWdlIiwibGFuZyIsIkNvbXBvbmVudCIsImNvbXBvbmVudCIsIkZpbGUiLCJmaWxlIiwiTGluZSIsIlN0YXR1cyIsInN0YXR1cyIsIlJlYXNvbiIsInJlYXNvbiIsInF1aWNrRml4IiwiZm91bmRWZXJzaW9uIiwiYmFzZWxpbmVSZXF1aXJlZCIsImxpbmUiLCJ0b1N0cmluZyIsImlzc3VlIiwidW5wYXJzZSIsInNldFRpbWVvdXQiLCJybVN5bmMiLCJmb3JjZSIsImVycm9yIiwiY29uc29sZSIsIndhcm4iLCJnZXRTdG9yZWRBbmFseXNpcyIsImZvcm1hdCIsImZpbGVQYXRoIiwicmVhZEZpbGVTeW5jIiwiY29udGVudCIsImFuYWx5c2lzRXhpc3RzIiwiY2xlYW51cE9sZEFuYWx5c2VzIiwibWF4QWdlIiwiY2xlYW5lZENvdW50IiwicmVhZGRpclN5bmMiLCJzdGF0U3luYyIsImVudHJpZXMiLCJ3aXRoRmlsZVR5cGVzIiwiZW50cnkiLCJpc0RpcmVjdG9yeSIsIm5hbWUiLCJzdGF0cyIsImFnZSIsIkRhdGUiLCJub3ciLCJtdGltZSIsImdldFRpbWUiLCJnZXRBbmFseXNpc01ldGFkYXRhIiwiY3JlYXRlZEF0IiwiYmlydGh0aW1lIiwic2l6ZSIsImxpc3RTdG9yZWRBbmFseXNlcyIsImZpbHRlciIsIm1hcCIsImRlbGV0ZUFuYWx5c2lzIiwiZ2V0U3RvcmFnZVN0YXRzIiwidG90YWxBbmFseXNlcyIsInRvdGFsU2l6ZSIsIm9sZGVzdEFuYWx5c2lzIiwibmV3ZXN0QW5hbHlzaXMiLCJhbmFseXNlcyIsIm9sZGVzdERhdGUiLCJuZXdlc3REYXRlIiwiYW5hbHlzaXMiLCJsZW5ndGgiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/files/store.ts\n");

/***/ }),

/***/ "(rsc)/./lib/files/unzip.ts":
/*!****************************!*\
  !*** ./lib/files/unzip.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractZip: () => (/* binding */ extractZip),\n/* harmony export */   extractZipToMemory: () => (/* binding */ extractZipToMemory),\n/* harmony export */   getZipInfo: () => (/* binding */ getZipInfo),\n/* harmony export */   validateZip: () => (/* binding */ validateZip)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var stream_promises__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! stream/promises */ \"stream/promises\");\n/* harmony import */ var stream_promises__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(stream_promises__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var unzipper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! unzipper */ \"(rsc)/./node_modules/unzipper/unzip.js\");\n\n\n\n\n/**\r\n * Securely extract ZIP file contents\r\n * @param zipPath Path to ZIP file\r\n * @param extractPath Path to extract to\r\n * @param options Extraction options\r\n * @returns Extraction result\r\n */ async function extractZip(zipPath, extractPath, options = {}) {\n    const { maxFiles = 50000, maxFileSize = 10 * 1024 * 1024, allowedExtensions = [\n        '.py',\n        '.js',\n        '.ts',\n        '.tsx',\n        '.jsx',\n        '.java',\n        '.go',\n        '.cs',\n        '.fs',\n        '.vb'\n    ], ignorePaths = [\n        '/node_modules/',\n        '/.venv/',\n        '/venv/',\n        '/dist/',\n        '/build/',\n        '/.git/',\n        '/.next/'\n    ] } = options;\n    const files = [];\n    const errors = [];\n    let totalFiles = 0;\n    let skippedFiles = 0;\n    try {\n        // Create extract directory\n        if (!(0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(extractPath)) {\n            (0,fs__WEBPACK_IMPORTED_MODULE_0__.mkdirSync)(extractPath, {\n                recursive: true\n            });\n        }\n        // Open ZIP file\n        const zip = unzipper__WEBPACK_IMPORTED_MODULE_3__.Open.file(zipPath);\n        const directory = await zip;\n        // Process each entry\n        for (const entry of directory.files){\n            totalFiles++;\n            // Check file count limit\n            if (totalFiles > maxFiles) {\n                errors.push(`Too many files in archive (limit: ${maxFiles})`);\n                break;\n            }\n            // Skip directories\n            if (entry.type === 'Directory') {\n                continue;\n            }\n            // Validate file path\n            const filePath = (0,path__WEBPACK_IMPORTED_MODULE_1__.normalize)(entry.path);\n            if (!isValidPath(filePath, extractPath)) {\n                errors.push(`Invalid file path: ${filePath}`);\n                skippedFiles++;\n                continue;\n            }\n            // Check if path should be ignored\n            if (shouldIgnorePath(filePath, ignorePaths)) {\n                skippedFiles++;\n                continue;\n            }\n            // Check file extension\n            const extension = getFileExtension(filePath);\n            if (allowedExtensions.length > 0 && !allowedExtensions.includes(extension)) {\n                skippedFiles++;\n                continue;\n            }\n            // Check file size\n            if (entry.uncompressedSize > maxFileSize) {\n                errors.push(`File too large: ${filePath} (${entry.uncompressedSize} bytes)`);\n                skippedFiles++;\n                continue;\n            }\n            try {\n                // Extract file\n                const fullPath = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(extractPath, filePath);\n                const dir = (0,path__WEBPACK_IMPORTED_MODULE_1__.dirname)(fullPath);\n                if (!(0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(dir)) {\n                    (0,fs__WEBPACK_IMPORTED_MODULE_0__.mkdirSync)(dir, {\n                        recursive: true\n                    });\n                }\n                await (0,stream_promises__WEBPACK_IMPORTED_MODULE_2__.pipeline)(entry.stream(), (0,fs__WEBPACK_IMPORTED_MODULE_0__.createWriteStream)(fullPath));\n                // Read file content for analysis\n                const content = await readFileContent(fullPath);\n                if (content !== null) {\n                    files.push({\n                        path: filePath,\n                        content,\n                        size: content.length,\n                        language: detectLanguageFromExtension(extension)\n                    });\n                }\n            } catch (error) {\n                errors.push(`Failed to extract ${filePath}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n                skippedFiles++;\n            }\n        }\n    } catch (error) {\n        errors.push(`Failed to open ZIP file: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n    return {\n        files,\n        totalFiles,\n        skippedFiles,\n        errors\n    };\n}\n/**\r\n * Validate file path for security\r\n * @param filePath File path\r\n * @param extractPath Base extraction path\r\n * @returns True if path is valid\r\n */ function isValidPath(filePath, extractPath) {\n    try {\n        // Normalize path\n        const normalized = (0,path__WEBPACK_IMPORTED_MODULE_1__.normalize)(filePath);\n        // Check for path traversal\n        if (normalized.includes('..') || normalized.startsWith('/')) {\n            return false;\n        }\n        // Check if path is within extract directory\n        const fullPath = (0,path__WEBPACK_IMPORTED_MODULE_1__.resolve)(extractPath, normalized);\n        const basePath = (0,path__WEBPACK_IMPORTED_MODULE_1__.resolve)(extractPath);\n        return fullPath.startsWith(basePath);\n    } catch  {\n        return false;\n    }\n}\n/**\r\n * Check if path should be ignored\r\n * @param filePath File path\r\n * @param ignorePaths Array of paths to ignore\r\n * @returns True if should be ignored\r\n */ function shouldIgnorePath(filePath, ignorePaths) {\n    return ignorePaths.some((ignorePath)=>filePath.includes(ignorePath) || filePath.startsWith(ignorePath));\n}\n/**\r\n * Get file extension from path\r\n * @param filePath File path\r\n * @returns File extension with dot\r\n */ function getFileExtension(filePath) {\n    const lastDot = filePath.lastIndexOf('.');\n    if (lastDot === -1) return '';\n    return filePath.substring(lastDot);\n}\n/**\r\n * Detect language from file extension\r\n * @param extension File extension\r\n * @returns Language or undefined\r\n */ function detectLanguageFromExtension(extension) {\n    const languageMap = {\n        '.js': 'node',\n        '.jsx': 'node',\n        '.ts': 'node',\n        '.tsx': 'node',\n        '.py': 'python',\n        '.java': 'java',\n        '.go': 'go',\n        '.cs': 'dotnet',\n        '.fs': 'dotnet',\n        '.vb': 'dotnet'\n    };\n    return languageMap[extension];\n}\n/**\r\n * Read file content safely\r\n * @param filePath File path\r\n * @returns File content or null if error\r\n */ async function readFileContent(filePath) {\n    try {\n        const stats = (0,fs__WEBPACK_IMPORTED_MODULE_0__.statSync)(filePath);\n        // Skip very large files\n        if (stats.size > 2 * 1024 * 1024) {\n            return null;\n        }\n        // Read file content\n        const content = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 23)).then((fs)=>fs.promises.readFile(filePath, 'utf8'));\n        return content;\n    } catch (error) {\n        console.warn(`Failed to read file ${filePath}: ${error}`);\n        return null;\n    }\n}\n/**\r\n * Extract ZIP to memory (for small archives)\r\n * @param zipPath Path to ZIP file\r\n * @param options Extraction options\r\n * @returns Extraction result\r\n */ async function extractZipToMemory(zipPath, options = {}) {\n    const { maxFiles = 50000, maxFileSize = 2 * 1024 * 1024, allowedExtensions = [\n        '.py',\n        '.js',\n        '.ts',\n        '.tsx',\n        '.jsx',\n        '.java',\n        '.go',\n        '.cs',\n        '.fs',\n        '.vb'\n    ], ignorePaths = [\n        '/node_modules/',\n        '/.venv/',\n        '/venv/',\n        '/dist/',\n        '/build/',\n        '/.git/',\n        '/.next/'\n    ] } = options;\n    const files = [];\n    const errors = [];\n    let totalFiles = 0;\n    let skippedFiles = 0;\n    try {\n        // Open ZIP file\n        const zip = unzipper__WEBPACK_IMPORTED_MODULE_3__.Open.file(zipPath);\n        const directory = await zip;\n        // Process each entry\n        for (const entry of directory.files){\n            totalFiles++;\n            // Check file count limit\n            if (totalFiles > maxFiles) {\n                errors.push(`Too many files in archive (limit: ${maxFiles})`);\n                break;\n            }\n            // Skip directories\n            if (entry.type === 'Directory') {\n                continue;\n            }\n            // Validate file path\n            const filePath = (0,path__WEBPACK_IMPORTED_MODULE_1__.normalize)(entry.path);\n            if (!isValidPath(filePath, '/')) {\n                errors.push(`Invalid file path: ${filePath}`);\n                skippedFiles++;\n                continue;\n            }\n            // Check if path should be ignored\n            if (shouldIgnorePath(filePath, ignorePaths)) {\n                skippedFiles++;\n                continue;\n            }\n            // Check file extension\n            const extension = getFileExtension(filePath);\n            if (allowedExtensions.length > 0 && !allowedExtensions.includes(extension)) {\n                skippedFiles++;\n                continue;\n            }\n            // Check file size\n            if (entry.uncompressedSize > maxFileSize) {\n                errors.push(`File too large: ${filePath} (${entry.uncompressedSize} bytes)`);\n                skippedFiles++;\n                continue;\n            }\n            try {\n                // Read file content\n                const content = await entry.buffer();\n                const contentString = content.toString('utf8');\n                files.push({\n                    path: filePath,\n                    content: contentString,\n                    size: contentString.length,\n                    language: detectLanguageFromExtension(extension)\n                });\n            } catch (error) {\n                errors.push(`Failed to read ${filePath}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n                skippedFiles++;\n            }\n        }\n    } catch (error) {\n        errors.push(`Failed to open ZIP file: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n    return {\n        files,\n        totalFiles,\n        skippedFiles,\n        errors\n    };\n}\n/**\r\n * Get ZIP file information\r\n * @param zipPath Path to ZIP file\r\n * @returns ZIP file info\r\n */ async function getZipInfo(zipPath) {\n    try {\n        const zip = unzipper__WEBPACK_IMPORTED_MODULE_3__.Open.file(zipPath);\n        const directory = await zip;\n        let totalSize = 0;\n        let compressedSize = 0;\n        const files = [];\n        for (const entry of directory.files){\n            if (entry.type !== 'Directory') {\n                totalSize += entry.uncompressedSize;\n                compressedSize += entry.compressedSize;\n                files.push({\n                    path: entry.path,\n                    size: entry.uncompressedSize,\n                    compressedSize: entry.compressedSize\n                });\n            }\n        }\n        return {\n            totalFiles: files.length,\n            totalSize,\n            compressedSize,\n            files\n        };\n    } catch (error) {\n        throw new Error(`Failed to read ZIP info: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n}\n/**\r\n * Validate ZIP file\r\n * @param zipPath Path to ZIP file\r\n * @returns True if valid ZIP\r\n */ async function validateZip(zipPath) {\n    try {\n        const zip = unzipper__WEBPACK_IMPORTED_MODULE_3__.Open.file(zipPath);\n        await zip;\n        return true;\n    } catch  {\n        return false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/files/unzip.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=C%3A%5CUsers%5CCkhadar%5CDownloads%5CAI_Baseline_Map%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CCkhadar%5CDownloads%5CAI_Baseline_Map&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=C%3A%5CUsers%5CCkhadar%5CDownloads%5CAI_Baseline_Map%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CCkhadar%5CDownloads%5CAI_Baseline_Map&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var C_Users_Ckhadar_Downloads_AI_Baseline_Map_app_api_analyze_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./app/api/analyze/route.ts */ \"(rsc)/./app/api/analyze/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/analyze/route\",\n        pathname: \"/api/analyze\",\n        filename: \"route\",\n        bundlePath: \"app/api/analyze/route\"\n    },\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || '',\n    resolvedPagePath: \"C:\\\\Users\\\\Ckhadar\\\\Downloads\\\\AI_Baseline_Map\\\\app\\\\api\\\\analyze\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_Ckhadar_Downloads_AI_Baseline_Map_app_api_analyze_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/analyze/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = false;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        if (!(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=C%3A%5CUsers%5CCkhadar%5CDownloads%5CAI_Baseline_Map%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CCkhadar%5CDownloads%5CAI_Baseline_Map&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "constants":
/*!****************************!*\
  !*** external "constants" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("constants");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "process":
/*!**************************!*\
  !*** external "process" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("process");

/***/ }),

/***/ "rimraf":
/*!*************************!*\
  !*** external "rimraf" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("rimraf");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "stream/promises":
/*!**********************************!*\
  !*** external "stream/promises" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream/promises");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/zod","vendor-chunks/papaparse","vendor-chunks/yaml","vendor-chunks/semver","vendor-chunks/bluebird","vendor-chunks/fstream","vendor-chunks/unzipper","vendor-chunks/readable-stream","vendor-chunks/graceful-fs","vendor-chunks/string_decoder","vendor-chunks/inherits","vendor-chunks/buffer-indexof-polyfill","vendor-chunks/binary","vendor-chunks/util-deprecate","vendor-chunks/traverse","vendor-chunks/process-nextick-args","vendor-chunks/mkdirp","vendor-chunks/listenercount","vendor-chunks/isarray","vendor-chunks/duplexer2","vendor-chunks/core-util-is","vendor-chunks/chainsaw","vendor-chunks/buffers","vendor-chunks/big-integer"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=C%3A%5CUsers%5CCkhadar%5CDownloads%5CAI_Baseline_Map%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CCkhadar%5CDownloads%5CAI_Baseline_Map&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();