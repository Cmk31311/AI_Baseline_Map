/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/analyze/route";
exports.ids = ["app/api/analyze/route"];
exports.modules = {

/***/ "(rsc)/./app/api/analyze/route.ts":
/*!**********************************!*\
  !*** ./app/api/analyze/route.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   dynamic: () => (/* binding */ dynamic),\n/* harmony export */   runtime: () => (/* binding */ runtime)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _lib_analysis_run__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../lib/analysis/run */ \"(rsc)/./lib/analysis/run.ts\");\n/* harmony import */ var _lib_files_single_file__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../lib/files/single-file */ \"(rsc)/./lib/files/single-file.ts\");\n\n\n\n\n\n// ZIP imports removed as per new requirements\n\n// Initialize tempReports if not exists\nif (!global.tempReports) {\n    global.tempReports = new Map();\n}\nconst runtime = \"nodejs\";\nconst dynamic = \"force-dynamic\";\nasync function POST(request) {\n    console.log('Analyze API called with method: POST');\n    let tempPath;\n    try {\n        // Parse form data using Next.js built-in FormData\n        const formData = await request.formData();\n        const file = formData.get('file');\n        if (!file) {\n            console.error('No file found in request');\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'No file provided'\n            }, {\n                status: 400\n            });\n        }\n        console.log('File found:', {\n            name: file.name,\n            type: file.type,\n            size: file.size\n        });\n        // Create temporary directory - use /tmp for Vercel serverless\n        const tempDir = process.env.VERCEL ? '/tmp/analyzer' : path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), 'tmp', 'analyzer');\n        await fs__WEBPACK_IMPORTED_MODULE_1__.promises.mkdir(tempDir, {\n            recursive: true\n        });\n        // Save uploaded file\n        const analysisId = (0,crypto__WEBPACK_IMPORTED_MODULE_3__.randomUUID)();\n        const originalName = file.name || 'uploaded-file';\n        tempPath = path__WEBPACK_IMPORTED_MODULE_2___default().join(tempDir, `${analysisId}-${originalName}`);\n        // Convert File to Buffer and write to disk\n        const bytes = await file.arrayBuffer();\n        const buffer = Buffer.from(bytes);\n        await fs__WEBPACK_IMPORTED_MODULE_1__.promises.writeFile(tempPath, buffer);\n        console.log('File saved successfully');\n        try {\n            // Check if file should be analyzed (early exit for unsupported types)\n            if (!(0,_lib_files_single_file__WEBPACK_IMPORTED_MODULE_5__.shouldAnalyzeFile)(originalName)) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'File type not supported for analysis',\n                    details: {\n                        filename: originalName\n                    }\n                }, {\n                    status: 400\n                });\n            }\n            // Check file size\n            const stats = await fs__WEBPACK_IMPORTED_MODULE_1__.promises.stat(tempPath);\n            if (stats.size > 5 * 1024 * 1024) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    error: 'File too large',\n                    details: {\n                        size: stats.size,\n                        maxSize: 5 * 1024 * 1024\n                    }\n                }, {\n                    status: 400\n                });\n            }\n            // Run analysis\n            console.log('Starting analysis for:', originalName);\n            // Determine public URL - use request headers if on Vercel\n            let publicUrl;\n            if (process.env.VERCEL) {\n                const host = request.headers.get('host');\n                const protocol = request.headers.get('x-forwarded-proto') || 'https';\n                publicUrl = `${protocol}://${host}`;\n                console.log('Constructed Vercel URL from headers:', publicUrl);\n            } else {\n                publicUrl = 'http://localhost:3000';\n            }\n            const analysisOptions = (0,_lib_analysis_run__WEBPACK_IMPORTED_MODULE_4__.validateAnalysisOptions)({\n                maxFiles: 50000,\n                maxFileSize: 5 * 1024 * 1024,\n                allowedExtensions: [\n                    '.html',\n                    '.htm',\n                    '.js',\n                    '.mjs',\n                    '.ts',\n                    '.json',\n                    '.webmanifest',\n                    '.wasm'\n                ],\n                storeResults: true,\n                publicUrl\n            });\n            console.log('Analysis options:', analysisOptions);\n            const result = await (0,_lib_analysis_run__WEBPACK_IMPORTED_MODULE_4__.runBaselineAnalysis)(tempPath, analysisOptions);\n            console.log('Analysis completed successfully');\n            console.log('Is Vercel:', !!process.env.VERCEL);\n            console.log('Public URL:', publicUrl);\n            // For Vercel deployment, include the full report directly in the response\n            let response;\n            if (process.env.VERCEL) {\n                // On Vercel, return the report directly since file storage is not persistent\n                const analysisId = result.artifacts?.analysisId || (0,crypto__WEBPACK_IMPORTED_MODULE_3__.randomUUID)();\n                response = {\n                    analysisId,\n                    summary: result.report.summary,\n                    artifacts: {\n                        jsonUrl: `${publicUrl}/api/analyze/${analysisId}?format=json`,\n                        csvUrl: `${publicUrl}/api/analyze/${analysisId}?format=csv`\n                    },\n                    report: result.report\n                };\n                // Store the report temporarily for the download endpoints\n                try {\n                    global.tempReports.set(analysisId, result.report);\n                    console.log(`Stored report ${analysisId} in temp storage`);\n                } catch (error) {\n                    console.error('Failed to store report in temp storage:', error);\n                // Don't fail the request, but log the error\n                }\n            } else {\n                // On local development, use file storage\n                if (!result.artifacts) {\n                    throw new Error('Failed to store analysis results');\n                }\n                response = {\n                    analysisId: result.artifacts.analysisId,\n                    summary: result.report.summary,\n                    artifacts: {\n                        jsonUrl: result.artifacts.jsonUrl,\n                        csvUrl: result.artifacts.csvUrl\n                    },\n                    report: result.report\n                };\n            }\n            console.log('Analysis response:', {\n                analysisId: response.analysisId,\n                jsonUrl: response.artifacts.jsonUrl,\n                csvUrl: response.artifacts.csvUrl,\n                isVercel: !!process.env.VERCEL\n            });\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(response);\n        } finally{\n            // Clean up temporary file\n            try {\n                await fs__WEBPACK_IMPORTED_MODULE_1__.promises.unlink(tempPath);\n            } catch (error) {\n                console.warn(`Failed to cleanup temp file ${tempPath}: ${error}`);\n            }\n        }\n    } catch (error) {\n        console.error('Analysis API error:', error);\n        // Clean up temporary file on error\n        try {\n            if (typeof tempPath !== 'undefined') {\n                await fs__WEBPACK_IMPORTED_MODULE_1__.promises.unlink(tempPath);\n            }\n        } catch (cleanupError) {\n            console.warn(`Failed to cleanup temp file on error: ${cleanupError}`);\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Analysis failed',\n            message: error instanceof Error ? error.message : 'Unknown error',\n            details: error instanceof Error ? error.stack : undefined\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/analyze/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/analysis/baseline.loader.ts":
/*!*****************************************!*\
  !*** ./lib/analysis/baseline.loader.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearRulesCache: () => (/* binding */ clearRulesCache),\n/* harmony export */   getCachedBaselineRules: () => (/* binding */ getCachedBaselineRules),\n/* harmony export */   getDefaultBaselineRules: () => (/* binding */ getDefaultBaselineRules),\n/* harmony export */   getDependencyUpgradeTemplate: () => (/* binding */ getDependencyUpgradeTemplate),\n/* harmony export */   getLanguageRules: () => (/* binding */ getLanguageRules),\n/* harmony export */   getPatternQuickFix: () => (/* binding */ getPatternQuickFix),\n/* harmony export */   isRulesCacheValid: () => (/* binding */ isRulesCacheValid),\n/* harmony export */   loadBaselineRules: () => (/* binding */ loadBaselineRules),\n/* harmony export */   loadBaselineRulesWithFallback: () => (/* binding */ loadBaselineRulesWithFallback),\n/* harmony export */   shouldIgnorePath: () => (/* binding */ shouldIgnorePath),\n/* harmony export */   shouldScanFile: () => (/* binding */ shouldScanFile),\n/* harmony export */   validateRulesStructure: () => (/* binding */ validateRulesStructure)\n/* harmony export */ });\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var yaml__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! yaml */ \"(rsc)/./node_modules/yaml/dist/index.js\");\n/* harmony import */ var _baseline_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./baseline.types */ \"(rsc)/./lib/analysis/baseline.types.ts\");\n// readFileSync imported dynamically\n\n\n\n// Use process.cwd() for Node.js environment\n// Cache for loaded rules\nlet rulesCache = null;\nlet rulesCacheTimestamp = 0;\n/**\r\n * Load baseline rules from YAML configuration file\r\n * @param configPath Optional path to config file, defaults to config/baseline.rules.yaml\r\n * @returns Parsed and validated baseline rules\r\n */ async function loadBaselineRules(configPath) {\n    const defaultPath = (0,path__WEBPACK_IMPORTED_MODULE_0__.join)(process.cwd(), 'config', 'baseline.rules.yaml');\n    const path = configPath || defaultPath;\n    try {\n        // Check if we have cached rules and they're still valid\n        const { statSync } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 23));\n        const stats = statSync(path);\n        const mtime = stats.mtime.getTime();\n        if (rulesCache && mtime <= rulesCacheTimestamp) {\n            return rulesCache;\n        }\n        // Read and parse YAML file\n        const { readFileSync } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 23));\n        const yamlContent = readFileSync(path, 'utf8');\n        const rawRules = yaml__WEBPACK_IMPORTED_MODULE_1__.parse(yamlContent);\n        // Validate and parse rules\n        const rules = (0,_baseline_types__WEBPACK_IMPORTED_MODULE_2__.validateBaselineRules)(rawRules);\n        // Update cache\n        rulesCache = rules;\n        rulesCacheTimestamp = mtime;\n        return rules;\n    } catch (error) {\n        throw new Error(`Failed to load baseline rules from ${path}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n}\n/**\r\n * Get cached baseline rules without file system access\r\n * @returns Cached rules or throws if not loaded\r\n */ function getCachedBaselineRules() {\n    if (!rulesCache) {\n        throw new Error('Baseline rules not loaded. Call loadBaselineRules() first.');\n    }\n    return rulesCache;\n}\n/**\r\n * Clear the rules cache (useful for testing)\r\n */ function clearRulesCache() {\n    rulesCache = null;\n    rulesCacheTimestamp = 0;\n}\n/**\r\n * Check if rules are cached and up to date\r\n * @param configPath Optional path to config file\r\n * @returns True if cached rules are valid\r\n */ async function isRulesCacheValid(configPath) {\n    if (!rulesCache) return false;\n    try {\n        const defaultPath = (0,path__WEBPACK_IMPORTED_MODULE_0__.join)(process.cwd(), 'config', 'baseline.rules.yaml');\n        const path = configPath || defaultPath;\n        const { statSync } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 23));\n        const stats = statSync(path);\n        const mtime = stats.mtime.getTime();\n        return mtime <= rulesCacheTimestamp;\n    } catch  {\n        return false;\n    }\n}\n/**\r\n * Get default baseline rules (fallback if file loading fails)\r\n * @returns Minimal default rules\r\n */ function getDefaultBaselineRules() {\n    return {\n        language_runtimes: {\n            node: '>=18.0.0',\n            python: '>=3.10.0',\n            java: '>=17.0.0',\n            go: '>=1.21.0',\n            dotnet: '>=6.0.0'\n        },\n        package_mins: {\n            node: {\n                react: '>=18.0.0',\n                next: '>=13.0.0',\n                express: '>=4.18.0'\n            },\n            python: {\n                numpy: '>=1.22.0',\n                pandas: '>=1.4.0',\n                torch: '>=2.0.0'\n            },\n            java: {},\n            go: {},\n            dotnet: {}\n        },\n        deprecated_patterns: {\n            node: [\n                {\n                    pattern: 'fs\\\\.exists\\\\(',\n                    message: 'fs.exists() is deprecated, use fs.access() or fs.stat()',\n                    alternative: 'Use fs.access() or fs.promises.access()'\n                }\n            ],\n            python: [\n                {\n                    pattern: 'numpy\\\\.asscalar',\n                    message: 'numpy.asscalar is deprecated, use item() instead',\n                    alternative: 'Use numpy.item() or direct array indexing'\n                }\n            ],\n            java: [],\n            go: [],\n            dotnet: []\n        },\n        scan_file_exts: [\n            '.py',\n            '.js',\n            '.ts',\n            '.tsx',\n            '.jsx',\n            '.java',\n            '.go',\n            '.cs'\n        ],\n        ignore_paths: [\n            '/node_modules/',\n            '/.venv/',\n            '/venv/',\n            '/dist/',\n            '/build/',\n            '/.git/'\n        ],\n        max_file_size: 2097152,\n        max_files: 50000,\n        quick_fixes: {\n            dependency_upgrade: {\n                node: 'npm install {package}@{version}',\n                python: 'pip install \\'{package}>={version}\\'',\n                java: 'Update {package} to version {version} in pom.xml or build.gradle',\n                go: 'go get {package}@{version}',\n                dotnet: 'dotnet add package {package} --version {version}'\n            },\n            pattern_replacement: {\n                node: {\n                    'fs.exists(': 'Use fs.access() or fs.promises.access()'\n                },\n                python: {\n                    'numpy.asscalar': 'Use .item() method instead'\n                },\n                java: {},\n                go: {},\n                dotnet: {}\n            }\n        }\n    };\n}\n/**\r\n * Load baseline rules with fallback to defaults\r\n * @param configPath Optional path to config file\r\n * @returns Baseline rules (loaded or default)\r\n */ async function loadBaselineRulesWithFallback(configPath) {\n    try {\n        return await loadBaselineRules(configPath);\n    } catch (error) {\n        console.warn(`Failed to load baseline rules: ${error instanceof Error ? error.message : 'Unknown error'}`);\n        console.warn('Using default baseline rules');\n        return getDefaultBaselineRules();\n    }\n}\n/**\r\n * Validate that a rules object has all required fields\r\n * @param rules Rules object to validate\r\n * @returns True if valid\r\n */ async function validateRulesStructure(rules) {\n    try {\n        (0,_baseline_types__WEBPACK_IMPORTED_MODULE_2__.validateBaselineRules)(rules);\n        return true;\n    } catch  {\n        return false;\n    }\n}\n/**\r\n * Get rules for a specific language\r\n * @param rules Baseline rules\r\n * @param language Language to get rules for\r\n * @returns Rules specific to the language\r\n */ function getLanguageRules(rules, language) {\n    return {\n        packageMins: rules.package_mins[language] || {},\n        deprecatedPatterns: rules.deprecated_patterns[language] || [],\n        runtime: rules.language_runtimes[language]\n    };\n}\n/**\r\n * Check if a file extension should be scanned\r\n * @param rules Baseline rules\r\n * @param extension File extension (with or without dot)\r\n * @returns True if should be scanned\r\n */ function shouldScanFile(rules, extension) {\n    const ext = extension.startsWith('.') ? extension : `.${extension}`;\n    return rules.scan_file_exts.includes(ext);\n}\n/**\r\n * Check if a path should be ignored\r\n * @param rules Baseline rules\r\n * @param filePath File path to check\r\n * @returns True if should be ignored\r\n */ function shouldIgnorePath(rules, filePath) {\n    if (!filePath || !rules.ignore_paths) {\n        return false;\n    }\n    return rules.ignore_paths.some((ignorePath)=>filePath.includes(ignorePath) || filePath.startsWith(ignorePath));\n}\n/**\r\n * Get quick fix template for dependency upgrade\r\n * @param rules Baseline rules\r\n * @param language Language\r\n * @returns Template string\r\n */ function getDependencyUpgradeTemplate(rules, language) {\n    return rules.quick_fixes.dependency_upgrade[language] || 'Update {package} to {version}';\n}\n/**\r\n * Get quick fix for pattern replacement\r\n * @param rules Baseline rules\r\n * @param language Language\r\n * @param pattern Pattern to replace\r\n * @returns Quick fix suggestion or undefined\r\n */ function getPatternQuickFix(rules, language, pattern) {\n    return rules.quick_fixes.pattern_replacement[language]?.[pattern];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/analysis/baseline.loader.ts\n");

/***/ }),

/***/ "(rsc)/./lib/analysis/baseline.types.ts":
/*!****************************************!*\
  !*** ./lib/analysis/baseline.types.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnalysisContextSchema: () => (/* binding */ AnalysisContextSchema),\n/* harmony export */   AnalysisErrorSchema: () => (/* binding */ AnalysisErrorSchema),\n/* harmony export */   AnalyzeResponseSchema: () => (/* binding */ AnalyzeResponseSchema),\n/* harmony export */   BaselineRulesSchema: () => (/* binding */ BaselineRulesSchema),\n/* harmony export */   DependencyFindingSchema: () => (/* binding */ DependencyFindingSchema),\n/* harmony export */   DeprecatedPatternSchema: () => (/* binding */ DeprecatedPatternSchema),\n/* harmony export */   ExtractedFileSchema: () => (/* binding */ ExtractedFileSchema),\n/* harmony export */   FindingSchema: () => (/* binding */ FindingSchema),\n/* harmony export */   LanguageRuntimesSchema: () => (/* binding */ LanguageRuntimesSchema),\n/* harmony export */   LanguageSchema: () => (/* binding */ LanguageSchema),\n/* harmony export */   LanguageSummarySchema: () => (/* binding */ LanguageSummarySchema),\n/* harmony export */   PackageMinsSchema: () => (/* binding */ PackageMinsSchema),\n/* harmony export */   PatternFindingSchema: () => (/* binding */ PatternFindingSchema),\n/* harmony export */   ProjectManifestSchema: () => (/* binding */ ProjectManifestSchema),\n/* harmony export */   QuickFixesSchema: () => (/* binding */ QuickFixesSchema),\n/* harmony export */   ReportSchema: () => (/* binding */ ReportSchema),\n/* harmony export */   ReportSummarySchema: () => (/* binding */ ReportSummarySchema),\n/* harmony export */   StatusSchema: () => (/* binding */ StatusSchema),\n/* harmony export */   getStatusBadgeClass: () => (/* binding */ getStatusBadgeClass),\n/* harmony export */   getStatusColor: () => (/* binding */ getStatusColor),\n/* harmony export */   getStatusIcon: () => (/* binding */ getStatusIcon),\n/* harmony export */   isDependencyFinding: () => (/* binding */ isDependencyFinding),\n/* harmony export */   isPatternFinding: () => (/* binding */ isPatternFinding),\n/* harmony export */   validateAnalyzeResponse: () => (/* binding */ validateAnalyzeResponse),\n/* harmony export */   validateBaselineRules: () => (/* binding */ validateBaselineRules),\n/* harmony export */   validateFinding: () => (/* binding */ validateFinding),\n/* harmony export */   validateReport: () => (/* binding */ validateReport)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n\n// Language types\nconst LanguageSchema = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n    'python',\n    'node',\n    'java',\n    'go',\n    'dotnet'\n]);\n// Status types\nconst StatusSchema = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n    'ok',\n    'affected',\n    'unknown'\n]);\n// Finding types\nconst DependencyFindingSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    kind: zod__WEBPACK_IMPORTED_MODULE_0__.literal('dependency'),\n    lang: LanguageSchema,\n    component: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    foundVersion: zod__WEBPACK_IMPORTED_MODULE_0__.string().nullable(),\n    baselineRequired: zod__WEBPACK_IMPORTED_MODULE_0__.string().nullable(),\n    status: StatusSchema,\n    reason: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    file: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    quickFix: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\nconst PatternFindingSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    kind: zod__WEBPACK_IMPORTED_MODULE_0__.literal('pattern'),\n    lang: LanguageSchema,\n    file: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    line: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n    status: zod__WEBPACK_IMPORTED_MODULE_0__.literal('affected'),\n    reason: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n        'deprecated-api',\n        'code-quality',\n        'security',\n        'performance'\n    ]),\n    issue: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    pattern: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    quickFix: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional()\n});\nconst FindingSchema = zod__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion('kind', [\n    DependencyFindingSchema,\n    PatternFindingSchema\n]);\n// Summary types\nconst LanguageSummarySchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    ok: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n    affected: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n    unknown: zod__WEBPACK_IMPORTED_MODULE_0__.number()\n});\nconst ReportSummarySchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    ok: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n    affected: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n    unknown: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n    byLanguage: zod__WEBPACK_IMPORTED_MODULE_0__.record(LanguageSchema, LanguageSummarySchema)\n});\n// Report type\nconst ReportSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    findings: zod__WEBPACK_IMPORTED_MODULE_0__.array(FindingSchema),\n    summary: ReportSummarySchema,\n    metadata: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        analysisId: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        projectName: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n        detectedLanguages: zod__WEBPACK_IMPORTED_MODULE_0__.array(LanguageSchema),\n        totalFiles: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n        scannedFiles: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n        skippedFiles: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n        groqAnalysis: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.object({\n            analysis: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            filename: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            timestamp: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n        })).optional()\n    })\n});\n// Rules configuration types\nconst DeprecatedPatternSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    pattern: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    message: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    alternative: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nconst PackageMinsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.record(LanguageSchema, zod__WEBPACK_IMPORTED_MODULE_0__.record(zod__WEBPACK_IMPORTED_MODULE_0__.string(), zod__WEBPACK_IMPORTED_MODULE_0__.string()));\nconst LanguageRuntimesSchema = zod__WEBPACK_IMPORTED_MODULE_0__.record(LanguageSchema, zod__WEBPACK_IMPORTED_MODULE_0__.string());\nconst QuickFixesSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    dependency_upgrade: zod__WEBPACK_IMPORTED_MODULE_0__.record(LanguageSchema, zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    pattern_replacement: zod__WEBPACK_IMPORTED_MODULE_0__.record(LanguageSchema, zod__WEBPACK_IMPORTED_MODULE_0__.record(zod__WEBPACK_IMPORTED_MODULE_0__.string(), zod__WEBPACK_IMPORTED_MODULE_0__.string()))\n});\nconst BaselineRulesSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    language_runtimes: LanguageRuntimesSchema,\n    package_mins: PackageMinsSchema,\n    deprecated_patterns: zod__WEBPACK_IMPORTED_MODULE_0__.record(LanguageSchema, zod__WEBPACK_IMPORTED_MODULE_0__.array(DeprecatedPatternSchema)),\n    scan_file_exts: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    ignore_paths: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    max_file_size: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n    max_files: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n    quick_fixes: QuickFixesSchema\n});\n// API types\nconst AnalyzeResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    analysisId: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    summary: ReportSummarySchema,\n    artifacts: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        jsonUrl: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        csvUrl: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n    }),\n    report: ReportSchema.optional()\n});\n// Project detection types\nconst ProjectManifestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    language: LanguageSchema,\n    file: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    dependencies: zod__WEBPACK_IMPORTED_MODULE_0__.record(zod__WEBPACK_IMPORTED_MODULE_0__.string(), zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    devDependencies: zod__WEBPACK_IMPORTED_MODULE_0__.record(zod__WEBPACK_IMPORTED_MODULE_0__.string(), zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    peerDependencies: zod__WEBPACK_IMPORTED_MODULE_0__.record(zod__WEBPACK_IMPORTED_MODULE_0__.string(), zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    optionalDependencies: zod__WEBPACK_IMPORTED_MODULE_0__.record(zod__WEBPACK_IMPORTED_MODULE_0__.string(), zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional()\n});\n// File processing types\nconst ExtractedFileSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    path: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    content: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    size: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n    language: LanguageSchema.optional()\n});\n// Analysis context types\nconst AnalysisContextSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    rules: BaselineRulesSchema,\n    extractedFiles: zod__WEBPACK_IMPORTED_MODULE_0__.array(ExtractedFileSchema),\n    manifests: zod__WEBPACK_IMPORTED_MODULE_0__.array(ProjectManifestSchema),\n    detectedLanguages: zod__WEBPACK_IMPORTED_MODULE_0__.array(LanguageSchema)\n});\n// Error types\nconst AnalysisErrorSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    code: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    message: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    details: zod__WEBPACK_IMPORTED_MODULE_0__.any().optional()\n});\n// Validation helpers\nfunction validateFinding(finding) {\n    return FindingSchema.parse(finding);\n}\nfunction validateReport(report) {\n    return ReportSchema.parse(report);\n}\nfunction validateBaselineRules(rules) {\n    return BaselineRulesSchema.parse(rules);\n}\nfunction validateAnalyzeResponse(response) {\n    return AnalyzeResponseSchema.parse(response);\n}\n// Type guards\nfunction isDependencyFinding(finding) {\n    return finding.kind === 'dependency';\n}\nfunction isPatternFinding(finding) {\n    return finding.kind === 'pattern';\n}\n// Status helpers\nfunction getStatusIcon(status) {\n    switch(status){\n        case 'ok':\n            return '✅';\n        case 'affected':\n            return '⚠️';\n        case 'unknown':\n            return '❓';\n        default:\n            return '❓';\n    }\n}\nfunction getStatusColor(status) {\n    switch(status){\n        case 'ok':\n            return 'text-green-600';\n        case 'affected':\n            return 'text-yellow-600';\n        case 'unknown':\n            return 'text-gray-600';\n        default:\n            return 'text-gray-600';\n    }\n}\nfunction getStatusBadgeClass(status) {\n    switch(status){\n        case 'ok':\n            return 'bg-green-100 text-green-800';\n        case 'affected':\n            return 'bg-yellow-100 text-yellow-800';\n        case 'unknown':\n            return 'bg-gray-100 text-gray-800';\n        default:\n            return 'bg-gray-100 text-gray-800';\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/analysis/baseline.types.ts\n");

/***/ }),

/***/ "(rsc)/./lib/analysis/compare.ts":
/*!*********************************!*\
  !*** ./lib/analysis/compare.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compareVersions: () => (/* binding */ compareVersions),\n/* harmony export */   getLatestStableVersion: () => (/* binding */ getLatestStableVersion),\n/* harmony export */   getVersionDifference: () => (/* binding */ getVersionDifference),\n/* harmony export */   isPreRelease: () => (/* binding */ isPreRelease),\n/* harmony export */   parseVersion: () => (/* binding */ parseVersion),\n/* harmony export */   satisfiesRequirement: () => (/* binding */ satisfiesRequirement)\n/* harmony export */ });\n/* harmony import */ var semver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! semver */ \"(rsc)/./node_modules/semver/index.js\");\n/* harmony import */ var semver__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(semver__WEBPACK_IMPORTED_MODULE_0__);\n\n/**\r\n * Compare two version strings\r\n * @param version1 First version\r\n * @param version2 Second version (baseline)\r\n * @param language Language context for parsing\r\n * @returns Comparison result\r\n */ function compareVersions(version1, version2, language) {\n    try {\n        const v1 = parseVersion(version1, language);\n        const v2 = parseVersion(version2, language);\n        if (!v1 || !v2) {\n            return 'unknown';\n        }\n        // Use semver for Node.js packages\n        if (language === 'node') {\n            return compareWithSemver(v1, v2);\n        }\n        // Use custom comparison for other languages\n        return compareVersionsCustom(v1, v2, language);\n    } catch (error) {\n        console.warn(`Version comparison failed: ${error}`);\n        return 'unknown';\n    }\n}\n/**\r\n * Compare versions using semver (for Node.js)\r\n * @param version1 First version\r\n * @param version2 Second version\r\n * @returns Comparison result\r\n */ function compareWithSemver(version1, version2) {\n    try {\n        // Clean versions for semver\n        const v1 = cleanVersionForSemver(version1);\n        const v2 = cleanVersionForSemver(version2);\n        if (!semver__WEBPACK_IMPORTED_MODULE_0___default().valid(v1) || !semver__WEBPACK_IMPORTED_MODULE_0___default().valid(v2)) {\n            return 'unknown';\n        }\n        const result = semver__WEBPACK_IMPORTED_MODULE_0___default().compare(v1, v2);\n        if (result > 0) return 'greater';\n        if (result < 0) return 'less';\n        return 'equal';\n    } catch  {\n        return 'unknown';\n    }\n}\n/**\r\n * Clean version string for semver parsing\r\n * @param version Version string\r\n * @returns Cleaned version\r\n */ function cleanVersionForSemver(version) {\n    // Remove common prefixes and suffixes\n    let cleaned = version.replace(/^v/, '') // Remove v prefix\n    .replace(/^[~^>=<!=]+/, '') // Remove operators\n    .trim();\n    // Handle pre-release versions\n    if (cleaned.includes('-')) {\n        const parts = cleaned.split('-');\n        cleaned = parts[0];\n    }\n    // Handle build metadata\n    if (cleaned.includes('+')) {\n        const parts = cleaned.split('+');\n        cleaned = parts[0];\n    }\n    return cleaned;\n}\n/**\r\n * Custom version comparison for non-Node.js languages\r\n * @param version1 First version\r\n * @param version2 Second version\r\n * @param language Language context\r\n * @returns Comparison result\r\n */ function compareVersionsCustom(version1, version2, language) {\n    try {\n        const v1Parts = parseVersionParts(version1, language);\n        const v2Parts = parseVersionParts(version2, language);\n        if (!v1Parts || !v2Parts) {\n            return 'unknown';\n        }\n        // Compare major, minor, patch\n        for(let i = 0; i < Math.max(v1Parts.length, v2Parts.length); i++){\n            const v1Part = v1Parts[i] || 0;\n            const v2Part = v2Parts[i] || 0;\n            if (v1Part > v2Part) return 'greater';\n            if (v1Part < v2Part) return 'less';\n        }\n        return 'equal';\n    } catch  {\n        return 'unknown';\n    }\n}\n/**\r\n * Parse version into numeric parts\r\n * @param version Version string\r\n * @param language Language context\r\n * @returns Array of numeric parts\r\n */ function parseVersionParts(version, language) {\n    try {\n        // Clean version\n        let cleaned = version.replace(/^v/, '').replace(/^[~^>=<!=]+/, '').trim();\n        // Handle different version formats\n        if (language === 'python') {\n            // Python: 1.2.3, 1.2, 1.2.3a1, 1.2.3b1, 1.2.3rc1\n            cleaned = cleaned.replace(/[a-zA-Z].*$/, ''); // Remove pre-release info\n        } else if (language === 'java') {\n            // Java: 1.8.0, 11, 17.0.1\n            cleaned = cleaned.replace(/[a-zA-Z].*$/, ''); // Remove pre-release info\n        } else if (language === 'go') {\n            // Go: v1.21.0, 1.21.0\n            cleaned = cleaned.replace(/[a-zA-Z].*$/, ''); // Remove pre-release info\n        } else if (language === 'dotnet') {\n            // .NET: 6.0.0, 7.0.0-preview.1\n            cleaned = cleaned.replace(/[a-zA-Z].*$/, ''); // Remove pre-release info\n        }\n        // Split by dots and convert to numbers\n        const parts = cleaned.split('.').map((part)=>{\n            const num = parseInt(part, 10);\n            return isNaN(num) ? 0 : num;\n        });\n        return parts.length > 0 ? parts : null;\n    } catch  {\n        return null;\n    }\n}\n/**\r\n * Parse version string and extract version number\r\n * @param versionString Version string (may contain operators)\r\n * @param language Language context\r\n * @returns Clean version string\r\n */ function parseVersion(versionString, language) {\n    if (!versionString || versionString === '*') {\n        return '0.0.0';\n    }\n    // Remove common operators and prefixes\n    let clean = versionString.replace(/^[~^>=<!=]+/, '') // Remove operators\n    .replace(/^v/, '') // Remove v prefix\n    .trim();\n    // Handle special cases\n    if (clean === 'latest' || clean === '') {\n        return '0.0.0';\n    }\n    // Handle Python version specifiers\n    if (language === 'python') {\n        // Remove Python-specific operators\n        clean = clean.replace(/^[~=!<>]+/, '');\n    }\n    // Handle Go version suffixes\n    if (language === 'go') {\n        // Remove +incompatible, +incompatible.20210101, etc.\n        clean = clean.replace(/\\+.*$/, '');\n    }\n    // Handle Java version ranges\n    if (language === 'java') {\n        // Extract version from ranges like [1.0,2.0) or (1.0,2.0]\n        const rangeMatch = clean.match(/[[(]([^,]+),/);\n        if (rangeMatch) {\n            clean = rangeMatch[1];\n        }\n    }\n    return clean;\n}\n/**\r\n * Check if a version satisfies a requirement\r\n * @param version Version to check\r\n * @param requirement Requirement (e.g., \">=1.0.0\", \"~1.2.3\")\r\n * @param language Language context\r\n * @returns True if version satisfies requirement\r\n */ function satisfiesRequirement(version, requirement, language) {\n    try {\n        if (language === 'node') {\n            // Use semver for Node.js\n            const cleanVersion = cleanVersionForSemver(version);\n            if (!semver__WEBPACK_IMPORTED_MODULE_0___default().valid(cleanVersion)) return false;\n            return semver__WEBPACK_IMPORTED_MODULE_0___default().satisfies(cleanVersion, requirement);\n        }\n        // Custom logic for other languages\n        return satisfiesRequirementCustom(version, requirement, language);\n    } catch  {\n        return false;\n    }\n}\n/**\r\n * Custom requirement satisfaction check\r\n * @param version Version to check\r\n * @param requirement Requirement\r\n * @param language Language context\r\n * @returns True if version satisfies requirement\r\n */ function satisfiesRequirementCustom(version, requirement, language) {\n    try {\n        const cleanVersion = parseVersion(version, language);\n        const cleanRequirement = parseVersion(requirement, language);\n        if (!cleanVersion || !cleanRequirement) return false;\n        // Extract operator from requirement\n        const operatorMatch = requirement.match(/^([~^>=<!=]+)/);\n        const operator = operatorMatch ? operatorMatch[1] : '>=';\n        const comparison = compareVersions(cleanVersion, cleanRequirement, language);\n        switch(operator){\n            case '>=':\n                return comparison === 'greater' || comparison === 'equal';\n            case '>':\n                return comparison === 'greater';\n            case '<=':\n                return comparison === 'less' || comparison === 'equal';\n            case '<':\n                return comparison === 'less';\n            case '=':\n            case '==':\n                return comparison === 'equal';\n            case '~':\n                // Tilde: allow patch-level changes\n                return satisfiesTilde(cleanVersion, cleanRequirement, language);\n            case '^':\n                // Caret: allow minor-level changes\n                return satisfiesCaret(cleanVersion, cleanRequirement, language);\n            default:\n                return comparison === 'equal';\n        }\n    } catch  {\n        return false;\n    }\n}\n/**\r\n * Check if version satisfies tilde requirement\r\n * @param version Version to check\r\n * @param requirement Requirement\r\n * @param language Language context\r\n * @returns True if satisfies\r\n */ function satisfiesTilde(version, requirement, language) {\n    const vParts = parseVersionParts(version, language);\n    const rParts = parseVersionParts(requirement, language);\n    if (!vParts || !rParts) return false;\n    // Major and minor must match, patch can be higher\n    if (vParts[0] !== rParts[0]) return false;\n    if (vParts[1] !== rParts[1]) return false;\n    return vParts[2] >= (rParts[2] || 0);\n}\n/**\r\n * Check if version satisfies caret requirement\r\n * @param version Version to check\r\n * @param requirement Requirement\r\n * @param language Language context\r\n * @returns True if satisfies\r\n */ function satisfiesCaret(version, requirement, language) {\n    const vParts = parseVersionParts(version, language);\n    const rParts = parseVersionParts(requirement, language);\n    if (!vParts || !rParts) return false;\n    // Major must match, minor and patch can be higher\n    if (vParts[0] !== rParts[0]) return false;\n    return vParts[1] > (rParts[1] || 0) || vParts[1] === (rParts[1] || 0) && vParts[2] >= (rParts[2] || 0);\n}\n/**\r\n * Get version difference description\r\n * @param version1 First version\r\n * @param version2 Second version\r\n * @param language Language context\r\n * @returns Description of difference\r\n */ function getVersionDifference(version1, version2, language) {\n    const comparison = compareVersions(version1, version2, language);\n    switch(comparison){\n        case 'greater':\n            return `${version1} is newer than ${version2}`;\n        case 'less':\n            return `${version1} is older than ${version2}`;\n        case 'equal':\n            return `${version1} matches ${version2}`;\n        case 'unknown':\n            return `Cannot compare ${version1} with ${version2}`;\n        default:\n            return 'Unknown comparison';\n    }\n}\n/**\r\n * Check if a version is a pre-release\r\n * @param version Version string\r\n * @param language Language context\r\n * @returns True if pre-release\r\n */ function isPreRelease(version, language) {\n    const clean = parseVersion(version, language);\n    // Check for common pre-release indicators\n    return /[a-zA-Z]/.test(clean) || clean.includes('-') || clean.includes('alpha') || clean.includes('beta') || clean.includes('rc') || clean.includes('preview');\n}\n/**\r\n * Get the latest stable version from a list\r\n * @param versions Array of version strings\r\n * @param language Language context\r\n * @returns Latest stable version or null\r\n */ function getLatestStableVersion(versions, language) {\n    const stableVersions = versions.filter((v)=>!isPreRelease(v, language));\n    if (stableVersions.length === 0) return null;\n    let latest = stableVersions[0];\n    for (const version of stableVersions){\n        if (compareVersions(version, latest, language) === 'greater') {\n            latest = version;\n        }\n    }\n    return latest;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/analysis/compare.ts\n");

/***/ }),

/***/ "(rsc)/./lib/analysis/deps.ts":
/*!******************************!*\
  !*** ./lib/analysis/deps.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeDependencies: () => (/* binding */ analyzeDependencies),\n/* harmony export */   filterDependenciesByLanguage: () => (/* binding */ filterDependenciesByLanguage),\n/* harmony export */   getBaselineVersion: () => (/* binding */ getBaselineVersion),\n/* harmony export */   getDependencySummary: () => (/* binding */ getDependencySummary),\n/* harmony export */   groupDependenciesByStatus: () => (/* binding */ groupDependenciesByStatus),\n/* harmony export */   hasBaselineRule: () => (/* binding */ hasBaselineRule),\n/* harmony export */   isValidVersion: () => (/* binding */ isValidVersion),\n/* harmony export */   normalizePackageName: () => (/* binding */ normalizePackageName),\n/* harmony export */   parseVersion: () => (/* binding */ parseVersion),\n/* harmony export */   sortDependencies: () => (/* binding */ sortDependencies)\n/* harmony export */ });\n/* harmony import */ var _compare__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./compare */ \"(rsc)/./lib/analysis/compare.ts\");\n\n/**\r\n * Analyze dependencies from project manifests\r\n * @param manifests Array of project manifests\r\n * @param rules Baseline rules\r\n * @returns Array of dependency findings\r\n */ function analyzeDependencies(manifests, rules) {\n    const findings = [];\n    for (const manifest of manifests){\n        if (!manifest.dependencies) continue;\n        const languageRules = rules.package_mins[manifest.language] || {};\n        for (const [packageName, foundVersion] of Object.entries(manifest.dependencies)){\n            const baselineVersion = languageRules[packageName];\n            if (!baselineVersion) {\n                // No baseline rule for this package\n                findings.push({\n                    kind: 'dependency',\n                    lang: manifest.language,\n                    component: packageName,\n                    foundVersion,\n                    baselineRequired: null,\n                    status: 'unknown',\n                    reason: 'no-baseline-rule',\n                    file: manifest.file\n                });\n                continue;\n            }\n            // Compare versions\n            const comparison = (0,_compare__WEBPACK_IMPORTED_MODULE_0__.compareVersions)(foundVersion, baselineVersion, manifest.language);\n            let status;\n            let reason;\n            switch(comparison){\n                case 'greater':\n                case 'equal':\n                    status = 'ok';\n                    reason = 'meets-baseline';\n                    break;\n                case 'less':\n                    status = 'affected';\n                    reason = 'below-baseline';\n                    break;\n                case 'unknown':\n                    status = 'unknown';\n                    reason = 'version-parse-error';\n                    break;\n                default:\n                    status = 'unknown';\n                    reason = 'unknown-comparison';\n            }\n            findings.push({\n                kind: 'dependency',\n                lang: manifest.language,\n                component: packageName,\n                foundVersion,\n                baselineRequired: baselineVersion,\n                status,\n                reason,\n                file: manifest.file,\n                quickFix: getDependencyQuickFix(rules, manifest.language, packageName, baselineVersion)\n            });\n        }\n    }\n    return findings;\n}\n/**\r\n * Get quick fix for dependency upgrade\r\n * @param rules Baseline rules\r\n * @param language Language\r\n * @param packageName Package name\r\n * @param version Required version\r\n * @returns Quick fix string\r\n */ function getDependencyQuickFix(rules, language, packageName, version) {\n    const template = rules.quick_fixes.dependency_upgrade[language] || 'Update {package} to {version}';\n    return template.replace('{package}', packageName).replace('{version}', version);\n}\n/**\r\n * Parse version string and extract version number\r\n * @param versionString Version string (may contain operators)\r\n * @param language Language context\r\n * @returns Clean version string\r\n */ function parseVersion(versionString, language) {\n    if (!versionString || versionString === '*') {\n        return '0.0.0';\n    }\n    // Remove common operators and prefixes\n    let clean = versionString.replace(/^[~^>=<!=]+/, '') // Remove operators\n    .replace(/^v/, '') // Remove v prefix\n    .trim();\n    // Handle special cases\n    if (clean === 'latest' || clean === '') {\n        return '0.0.0';\n    }\n    // Handle Python version specifiers\n    if (language === 'python') {\n        // Remove Python-specific operators\n        clean = clean.replace(/^[~=!<>]+/, '');\n    }\n    // Handle Go version suffixes\n    if (language === 'go') {\n        // Remove +incompatible, +incompatible.20210101, etc.\n        clean = clean.replace(/\\+.*$/, '');\n    }\n    // Handle Java version ranges\n    if (language === 'java') {\n        // Extract version from ranges like [1.0,2.0) or (1.0,2.0]\n        const rangeMatch = clean.match(/[[(]([^,]+),/);\n        if (rangeMatch) {\n            clean = rangeMatch[1];\n        }\n    }\n    return clean;\n}\n/**\r\n * Check if a version string is valid\r\n * @param versionString Version string\r\n * @param language Language context\r\n * @returns True if valid\r\n */ function isValidVersion(versionString, language) {\n    if (!versionString || versionString === '*') return false;\n    const clean = parseVersion(versionString, language);\n    // Basic version pattern validation\n    const versionPatterns = {\n        node: /^\\d+\\.\\d+\\.\\d+(-[a-zA-Z0-9.-]+)?(\\+[a-zA-Z0-9.-]+)?$/,\n        python: /^\\d+\\.\\d+(\\.\\d+)?([a-zA-Z0-9.-]+)?$/,\n        java: /^\\d+(\\.\\d+)*(-[a-zA-Z0-9.-]+)?$/,\n        go: /^v?\\d+\\.\\d+\\.\\d+(-[a-zA-Z0-9.-]+)?(\\+[a-zA-Z0-9.-]+)?$/,\n        dotnet: /^\\d+\\.\\d+(\\.\\d+)?(-[a-zA-Z0-9.-]+)?$/\n    };\n    const pattern = versionPatterns[language];\n    return pattern ? pattern.test(clean) : false;\n}\n/**\r\n * Normalize package name for comparison\r\n * @param packageName Package name\r\n * @param language Language context\r\n * @returns Normalized package name\r\n */ function normalizePackageName(packageName, language) {\n    let normalized = packageName.toLowerCase().trim();\n    // Handle scoped packages (Node.js)\n    if (language === 'node' && normalized.startsWith('@')) {\n        // Keep @scope/package format\n        return normalized;\n    }\n    // Handle Java group:artifact format\n    if (language === 'java' && normalized.includes(':')) {\n        return normalized;\n    }\n    // Handle Go modules\n    if (language === 'go') {\n        // Remove common prefixes\n        normalized = normalized.replace(/^github\\.com\\//, '');\n        normalized = normalized.replace(/^golang\\.org\\/x\\//, '');\n    }\n    // Handle .NET packages\n    if (language === 'dotnet') {\n        // Remove common prefixes\n        normalized = normalized.replace(/^microsoft\\./, '');\n        normalized = normalized.replace(/^system\\./, '');\n    }\n    return normalized;\n}\n/**\r\n * Check if a package is in the baseline rules\r\n * @param packageName Package name\r\n * @param language Language\r\n * @param rules Baseline rules\r\n * @returns True if package has baseline rules\r\n */ function hasBaselineRule(packageName, language, rules) {\n    const languageRules = rules.package_mins[language] || {};\n    const normalized = normalizePackageName(packageName, language);\n    // Check exact match first\n    if (languageRules[packageName]) return true;\n    if (languageRules[normalized]) return true;\n    // Check for partial matches (for scoped packages, etc.)\n    for (const [rulePackage] of Object.entries(languageRules)){\n        if (normalizePackageName(rulePackage, language) === normalized) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\r\n * Get baseline version for a package\r\n * @param packageName Package name\r\n * @param language Language\r\n * @param rules Baseline rules\r\n * @returns Baseline version or null\r\n */ function getBaselineVersion(packageName, language, rules) {\n    const languageRules = rules.package_mins[language] || {};\n    const normalized = normalizePackageName(packageName, language);\n    // Check exact match first\n    if (languageRules[packageName]) return languageRules[packageName];\n    if (languageRules[normalized]) return languageRules[normalized];\n    // Check for partial matches\n    for (const [rulePackage, version] of Object.entries(languageRules)){\n        if (normalizePackageName(rulePackage, language) === normalized) {\n            return version;\n        }\n    }\n    return null;\n}\n/**\r\n * Group dependencies by status\r\n * @param findings Dependency findings\r\n * @returns Grouped findings\r\n */ function groupDependenciesByStatus(findings) {\n    return {\n        ok: findings.filter((f)=>f.status === 'ok'),\n        affected: findings.filter((f)=>f.status === 'affected'),\n        unknown: findings.filter((f)=>f.status === 'unknown')\n    };\n}\n/**\r\n * Get dependency summary statistics\r\n * @param findings Dependency findings\r\n * @returns Summary statistics\r\n */ function getDependencySummary(findings) {\n    const total = findings.length;\n    const ok = findings.filter((f)=>f.status === 'ok').length;\n    const affected = findings.filter((f)=>f.status === 'affected').length;\n    const unknown = findings.filter((f)=>f.status === 'unknown').length;\n    return {\n        total,\n        ok,\n        affected,\n        unknown,\n        okPercentage: total > 0 ? ok / total * 100 : 0,\n        affectedPercentage: total > 0 ? affected / total * 100 : 0,\n        unknownPercentage: total > 0 ? unknown / total * 100 : 0\n    };\n}\n/**\r\n * Filter dependencies by language\r\n * @param findings Dependency findings\r\n * @param language Language to filter by\r\n * @returns Filtered findings\r\n */ function filterDependenciesByLanguage(findings, language) {\n    return findings.filter((f)=>f.lang === language);\n}\n/**\r\n * Sort dependencies by status and name\r\n * @param findings Dependency findings\r\n * @returns Sorted findings\r\n */ function sortDependencies(findings) {\n    const statusOrder = {\n        affected: 0,\n        unknown: 1,\n        ok: 2\n    };\n    return [\n        ...findings\n    ].sort((a, b)=>{\n        // First by status\n        const statusDiff = statusOrder[a.status] - statusOrder[b.status];\n        if (statusDiff !== 0) return statusDiff;\n        // Then by language\n        const langDiff = a.lang.localeCompare(b.lang);\n        if (langDiff !== 0) return langDiff;\n        // Finally by component name\n        return a.component.localeCompare(b.component);\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/analysis/deps.ts\n");

/***/ }),

/***/ "(rsc)/./lib/analysis/detect.ts":
/*!********************************!*\
  !*** ./lib/analysis/detect.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   detectLanguagesFromFiles: () => (/* binding */ detectLanguagesFromFiles),\n/* harmony export */   detectProjectManifests: () => (/* binding */ detectProjectManifests),\n/* harmony export */   getManifestType: () => (/* binding */ getManifestType),\n/* harmony export */   getPrimaryLanguage: () => (/* binding */ getPrimaryLanguage),\n/* harmony export */   isManifestFile: () => (/* binding */ isManifestFile)\n/* harmony export */ });\n/**\r\n * Detect project languages and manifests from extracted files\r\n * @param files Array of extracted files\r\n * @returns Array of detected project manifests\r\n */ function detectProjectManifests(files) {\n    const manifests = [];\n    // Look for package.json (Node.js)\n    const packageJson = files.find((f)=>(f.path || f.name)?.endsWith('package.json'));\n    if (packageJson) {\n        try {\n            const pkg = JSON.parse(packageJson.content);\n            manifests.push({\n                language: 'node',\n                file: packageJson.path || packageJson.name || 'package.json',\n                dependencies: pkg.dependencies,\n                devDependencies: pkg.devDependencies,\n                peerDependencies: pkg.peerDependencies,\n                optionalDependencies: pkg.optionalDependencies\n            });\n        } catch (error) {\n            console.warn(`Failed to parse package.json: ${error}`);\n        }\n    }\n    // Look for requirements.txt (Python)\n    const requirementsTxt = files.find((f)=>(f.path || f.name)?.endsWith('requirements.txt'));\n    if (requirementsTxt) {\n        manifests.push({\n            language: 'python',\n            file: requirementsTxt.path || requirementsTxt.name || 'requirements.txt',\n            dependencies: parseRequirementsTxt(requirementsTxt.content)\n        });\n    }\n    // Look for pyproject.toml (Python)\n    const pyprojectToml = files.find((f)=>(f.path || f.name)?.endsWith('pyproject.toml'));\n    if (pyprojectToml) {\n        try {\n            const deps = parsePyprojectToml(pyprojectToml.content);\n            if (deps) {\n                manifests.push({\n                    language: 'python',\n                    file: pyprojectToml.path || pyprojectToml.name || 'pyproject.toml',\n                    dependencies: deps\n                });\n            }\n        } catch (error) {\n            console.warn(`Failed to parse pyproject.toml: ${error}`);\n        }\n    }\n    // Look for pom.xml (Java Maven)\n    const pomXml = files.find((f)=>(f.path || f.name)?.endsWith('pom.xml'));\n    if (pomXml) {\n        try {\n            const deps = parsePomXml(pomXml.content);\n            if (deps) {\n                manifests.push({\n                    language: 'java',\n                    file: pomXml.path || pomXml.name || 'pom.xml',\n                    dependencies: deps\n                });\n            }\n        } catch (error) {\n            console.warn(`Failed to parse pom.xml: ${error}`);\n        }\n    }\n    // Look for build.gradle (Java Gradle)\n    const buildGradle = files.find((f)=>{\n        const path = f.path || f.name;\n        return path?.endsWith('build.gradle') || path?.endsWith('build.gradle.kts');\n    });\n    if (buildGradle) {\n        try {\n            const deps = parseBuildGradle(buildGradle.content);\n            if (deps) {\n                manifests.push({\n                    language: 'java',\n                    file: buildGradle.path || buildGradle.name || 'build.gradle',\n                    dependencies: deps\n                });\n            }\n        } catch (error) {\n            console.warn(`Failed to parse build.gradle: ${error}`);\n        }\n    }\n    // Look for go.mod (Go)\n    const goMod = files.find((f)=>(f.path || f.name)?.endsWith('go.mod'));\n    if (goMod) {\n        try {\n            const deps = parseGoMod(goMod.content);\n            if (deps) {\n                manifests.push({\n                    language: 'go',\n                    file: goMod.path || goMod.name || 'go.mod',\n                    dependencies: deps\n                });\n            }\n        } catch (error) {\n            console.warn(`Failed to parse go.mod: ${error}`);\n        }\n    }\n    // Look for .csproj files (.NET)\n    const csprojFiles = files.filter((f)=>(f.path || f.name)?.endsWith('.csproj'));\n    for (const csproj of csprojFiles){\n        try {\n            const deps = parseCsproj(csproj.content);\n            if (deps) {\n                manifests.push({\n                    language: 'dotnet',\n                    file: csproj.path || csproj.name || 'project.csproj',\n                    dependencies: deps\n                });\n            }\n        } catch (error) {\n            console.warn(`Failed to parse ${csproj.path || csproj.name || 'project.csproj'}: ${error}`);\n        }\n    }\n    return manifests;\n}\n/**\r\n * Parse requirements.txt content\r\n * @param content requirements.txt content\r\n * @returns Dependencies object\r\n */ function parseRequirementsTxt(content) {\n    const deps = {};\n    const lines = content.split('\\n');\n    for (const line of lines){\n        const trimmed = line.trim();\n        if (!trimmed || trimmed.startsWith('#')) continue;\n        // Handle various requirement formats\n        // package==1.0.0\n        // package>=1.0.0\n        // package~=1.0.0\n        // package\n        const match = trimmed.match(/^([a-zA-Z0-9_-]+)(.*)$/);\n        if (match) {\n            const [, name, version] = match;\n            deps[name] = version || '*';\n        }\n    }\n    return deps;\n}\n/**\r\n * Parse pyproject.toml content (basic parsing)\r\n * @param content pyproject.toml content\r\n * @returns Dependencies object or null\r\n */ function parsePyprojectToml(content) {\n    const deps = {};\n    // Simple TOML parsing for dependencies\n    const lines = content.split('\\n');\n    let inDependencies = false;\n    for (const line of lines){\n        const trimmed = line.trim();\n        if (trimmed.startsWith('[tool.poetry.dependencies]') || trimmed.startsWith('[project.dependencies]') || trimmed.startsWith('[dependencies]')) {\n            inDependencies = true;\n            continue;\n        }\n        if (trimmed.startsWith('[') && inDependencies) {\n            break;\n        }\n        if (inDependencies && trimmed && !trimmed.startsWith('#')) {\n            const match = trimmed.match(/^([a-zA-Z0-9_-]+)\\s*=\\s*[\"']?([^\"']+)[\"']?/);\n            if (match) {\n                const [, name, version] = match;\n                deps[name] = version;\n            }\n        }\n    }\n    return Object.keys(deps).length > 0 ? deps : null;\n}\n/**\r\n * Parse pom.xml content (basic XML parsing)\r\n * @param content pom.xml content\r\n * @returns Dependencies object or null\r\n */ function parsePomXml(content) {\n    const deps = {};\n    // Simple XML parsing for dependencies\n    const dependencyRegex = /<dependency>\\s*<groupId>([^<]+)<\\/groupId>\\s*<artifactId>([^<]+)<\\/artifactId>\\s*<version>([^<]+)<\\/version>/g;\n    let match;\n    while((match = dependencyRegex.exec(content)) !== null){\n        const [, groupId, artifactId, version] = match;\n        const fullName = `${groupId}:${artifactId}`;\n        deps[fullName] = version;\n    }\n    return Object.keys(deps).length > 0 ? deps : null;\n}\n/**\r\n * Parse build.gradle content (basic parsing)\r\n * @param content build.gradle content\r\n * @returns Dependencies object or null\r\n */ function parseBuildGradle(content) {\n    const deps = {};\n    // Simple Gradle parsing for dependencies\n    const lines = content.split('\\n');\n    let inDependencies = false;\n    for (const line of lines){\n        const trimmed = line.trim();\n        if (trimmed.includes('dependencies') && trimmed.includes('{')) {\n            inDependencies = true;\n            continue;\n        }\n        if (trimmed === '}' && inDependencies) {\n            break;\n        }\n        if (inDependencies && trimmed.includes('implementation') || trimmed.includes('compile')) {\n            // implementation 'group:artifact:version'\n            // implementation(\"group:artifact:version\")\n            const match = trimmed.match(/(?:implementation|compile)\\s*[(\"]?([^:)]+):([^:)]+):([^:)]+)/);\n            if (match) {\n                const [, group, artifact, version] = match;\n                const fullName = `${group}:${artifact}`;\n                deps[fullName] = version;\n            }\n        }\n    }\n    return Object.keys(deps).length > 0 ? deps : null;\n}\n/**\r\n * Parse go.mod content\r\n * @param content go.mod content\r\n * @returns Dependencies object or null\r\n */ function parseGoMod(content) {\n    const deps = {};\n    const lines = content.split('\\n');\n    for (const line of lines){\n        const trimmed = line.trim();\n        if (trimmed.startsWith('require')) {\n            continue;\n        }\n        if (trimmed.startsWith('require ')) {\n            // require module v1.0.0\n            const match = trimmed.match(/require\\s+([^\\s]+)\\s+([^\\s]+)/);\n            if (match) {\n                const [, module, version] = match;\n                deps[module] = version;\n            }\n        } else if (trimmed && !trimmed.startsWith('go ') && !trimmed.startsWith('module ') && !trimmed.startsWith('//')) {\n            // Module version line\n            const match = trimmed.match(/^([^\\s]+)\\s+([^\\s]+)/);\n            if (match) {\n                const [, module, version] = match;\n                deps[module] = version;\n            }\n        }\n    }\n    return Object.keys(deps).length > 0 ? deps : null;\n}\n/**\r\n * Parse .csproj content (basic XML parsing)\r\n * @param content .csproj content\r\n * @returns Dependencies object or null\r\n */ function parseCsproj(content) {\n    const deps = {};\n    // Simple XML parsing for PackageReference\n    const packageRefRegex = /<PackageReference\\s+Include=\"([^\"]+)\"\\s+Version=\"([^\"]+)\"\\s*\\/?>/g;\n    let match;\n    while((match = packageRefRegex.exec(content)) !== null){\n        const [, packageName, version] = match;\n        deps[packageName] = version;\n    }\n    return Object.keys(deps).length > 0 ? deps : null;\n}\n/**\r\n * Detect languages from file extensions\r\n * @param files Array of extracted files\r\n * @returns Array of detected languages\r\n */ function detectLanguagesFromFiles(files) {\n    const languageMap = {\n        '.js': 'node',\n        '.jsx': 'node',\n        '.ts': 'node',\n        '.tsx': 'node',\n        '.py': 'python',\n        '.java': 'java',\n        '.go': 'go',\n        '.cs': 'dotnet',\n        '.fs': 'dotnet',\n        '.vb': 'dotnet'\n    };\n    const detectedLanguages = new Set();\n    for (const file of files){\n        const filePath = file.path || file.name;\n        if (filePath) {\n            const ext = getFileExtension(filePath);\n            const language = languageMap[ext];\n            if (language) {\n                detectedLanguages.add(language);\n            }\n        }\n    }\n    return Array.from(detectedLanguages);\n}\n/**\r\n * Get file extension from path\r\n * @param filePath File path\r\n * @returns File extension with dot\r\n */ function getFileExtension(filePath) {\n    const lastDot = filePath.lastIndexOf('.');\n    if (lastDot === -1) return '';\n    return filePath.substring(lastDot);\n}\n/**\r\n * Get primary language from manifests\r\n * @param manifests Array of project manifests\r\n * @returns Primary language or null\r\n */ function getPrimaryLanguage(manifests) {\n    if (manifests.length === 0) return null;\n    // Priority order: node, python, java, go, dotnet\n    const priority = [\n        'node',\n        'python',\n        'java',\n        'go',\n        'dotnet'\n    ];\n    for (const lang of priority){\n        if (manifests.some((m)=>m.language === lang)) {\n            return lang;\n        }\n    }\n    return manifests[0].language;\n}\n/**\r\n * Check if a file is a manifest file\r\n * @param filePath File path\r\n * @returns True if it's a manifest file\r\n */ function isManifestFile(filePath) {\n    const manifestFiles = [\n        'package.json',\n        'requirements.txt',\n        'pyproject.toml',\n        'pom.xml',\n        'build.gradle',\n        'build.gradle.kts',\n        'go.mod',\n        '.csproj'\n    ];\n    return manifestFiles.some((manifest)=>filePath.endsWith(manifest));\n}\n/**\r\n * Get manifest file type from path\r\n * @param filePath File path\r\n * @returns Manifest type or null\r\n */ function getManifestType(filePath) {\n    if (filePath.endsWith('package.json')) {\n        return {\n            language: 'node',\n            type: 'package.json'\n        };\n    }\n    if (filePath.endsWith('requirements.txt')) {\n        return {\n            language: 'python',\n            type: 'requirements.txt'\n        };\n    }\n    if (filePath.endsWith('pyproject.toml')) {\n        return {\n            language: 'python',\n            type: 'pyproject.toml'\n        };\n    }\n    if (filePath.endsWith('pom.xml')) {\n        return {\n            language: 'java',\n            type: 'pom.xml'\n        };\n    }\n    if (filePath.endsWith('build.gradle') || filePath.endsWith('build.gradle.kts')) {\n        return {\n            language: 'java',\n            type: 'build.gradle'\n        };\n    }\n    if (filePath.endsWith('go.mod')) {\n        return {\n            language: 'go',\n            type: 'go.mod'\n        };\n    }\n    if (filePath.endsWith('.csproj')) {\n        return {\n            language: 'dotnet',\n            type: '.csproj'\n        };\n    }\n    return null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/analysis/detect.ts\n");

/***/ }),

/***/ "(rsc)/./lib/analysis/run.ts":
/*!*****************************!*\
  !*** ./lib/analysis/run.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkAnalysisFeasibility: () => (/* binding */ checkAnalysisFeasibility),\n/* harmony export */   estimateAnalysisTime: () => (/* binding */ estimateAnalysisTime),\n/* harmony export */   getAnalysisProgress: () => (/* binding */ getAnalysisProgress),\n/* harmony export */   runAnalysisOnFiles: () => (/* binding */ runAnalysisOnFiles),\n/* harmony export */   runBaselineAnalysis: () => (/* binding */ runBaselineAnalysis),\n/* harmony export */   validateAnalysisOptions: () => (/* binding */ validateAnalysisOptions)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _baseline_loader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./baseline.loader */ \"(rsc)/./lib/analysis/baseline.loader.ts\");\n/* harmony import */ var _detect__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./detect */ \"(rsc)/./lib/analysis/detect.ts\");\n/* harmony import */ var _deps__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./deps */ \"(rsc)/./lib/analysis/deps.ts\");\n/* harmony import */ var _scan__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./scan */ \"(rsc)/./lib/analysis/scan.ts\");\n/* harmony import */ var _files_single_file__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../files/single-file */ \"(rsc)/./lib/files/single-file.ts\");\n/* harmony import */ var _files_store__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../files/store */ \"(rsc)/./lib/files/store.ts\");\n\n\n\n\n\n\n\n/**\n * Run complete baseline analysis on a ZIP file\n * @param zipPath Path to ZIP file\n * @param options Analysis options\n * @returns Analysis result with report and artifacts\n */ async function analyzeWithGroq(files, projectType, dependencies) {\n    const results = [];\n    // Skip Groq analysis if no GROQ_API_KEY is available\n    if (!process.env.GROQ_API_KEY) {\n        console.log('Skipping Groq analysis: GROQ_API_KEY not configured');\n        return results;\n    }\n    // Analyze up to 5 key files to avoid rate limits\n    const keyFiles = files.filter((file)=>{\n        const fileName = file.name || file.path || 'unknown';\n        const ext = fileName.split('.').pop()?.toLowerCase();\n        return [\n            'js',\n            'ts',\n            'jsx',\n            'tsx',\n            'css',\n            'html',\n            'vue',\n            'svelte',\n            'py',\n            'java',\n            'go',\n            'cs'\n        ].includes(ext || '');\n    }).slice(0, 5);\n    for (const file of keyFiles){\n        try {\n            // Use absolute URL for server-side fetch\n            const baseUrl = process.env.PUBLIC_URL || 'http://localhost:3000';\n            const response = await fetch(`${baseUrl}/api/analyze/groq`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    code: file.content,\n                    filename: file.name || file.path || 'unknown',\n                    projectType,\n                    dependencies\n                })\n            });\n            if (response.ok) {\n                const result = await response.json();\n                results.push(result);\n            } else {\n                console.error(`Groq analysis failed for ${file.name || file.path}: ${response.status} ${response.statusText}`);\n            }\n        } catch (error) {\n            console.error(`Groq analysis failed for ${file.name || file.path}:`, error);\n        }\n    }\n    return results;\n}\nasync function runBaselineAnalysis(filePath, options = {}) {\n    const { maxFiles = 50000, maxFileSize = 2 * 1024 * 1024, allowedExtensions = [\n        '.html',\n        '.htm',\n        '.css',\n        '.js',\n        '.mjs',\n        '.ts',\n        '.svg',\n        '.wasm',\n        '.json',\n        '.webmanifest'\n    ], ignorePaths = [\n        '/node_modules/',\n        '/.venv/',\n        '/venv/',\n        '/dist/',\n        '/build/',\n        '/.git/',\n        '/.next/'\n    ], storeResults = true, publicUrl = 'http://localhost:3000' } = options;\n    const analysisId = (0,crypto__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n    const startTime = Date.now();\n    try {\n        // Load baseline rules\n        const rules = await (0,_baseline_loader__WEBPACK_IMPORTED_MODULE_1__.loadBaselineRules)();\n        // Process single file\n        const fs = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 23));\n        const content = fs.readFileSync(filePath, 'utf8');\n        if (!(0,_files_single_file__WEBPACK_IMPORTED_MODULE_5__.shouldAnalyzeFile)(filePath)) {\n            throw new Error(`File type not supported for analysis: ${filePath}`);\n        }\n        const extractResult = (0,_files_single_file__WEBPACK_IMPORTED_MODULE_5__.processSingleFile)(filePath, content, maxFileSize);\n        // Detect project manifests and languages\n        const manifests = (0,_detect__WEBPACK_IMPORTED_MODULE_2__.detectProjectManifests)(extractResult.files);\n        const detectedLanguages = (0,_detect__WEBPACK_IMPORTED_MODULE_2__.detectLanguagesFromFiles)(extractResult.files);\n        // Create analysis context\n        const context = {\n            rules,\n            extractedFiles: extractResult.files,\n            manifests,\n            detectedLanguages\n        };\n        // Run analysis\n        const findings = await runAnalysis(context);\n        // Add additional analysis findings\n        const additionalFindings = await runAdditionalAnalysis(context);\n        findings.push(...additionalFindings);\n        // Generate summary\n        const summary = generateSummary(findings, detectedLanguages);\n        // Run Groq AI analysis\n        const groqResults = await analyzeWithGroq(extractResult.files, detectedLanguages.join(', '), context.manifests.flatMap((m)=>Object.keys(m.dependencies || {})));\n        // Create report\n        const report = {\n            findings,\n            summary,\n            metadata: {\n                analysisId,\n                timestamp: new Date().toISOString(),\n                projectName: getProjectName(filePath),\n                detectedLanguages,\n                totalFiles: extractResult.totalFiles,\n                scannedFiles: extractResult.files.length,\n                skippedFiles: extractResult.skippedFiles,\n                groqAnalysis: groqResults\n            }\n        };\n        // Store results if requested\n        let artifacts;\n        if (storeResults) {\n            artifacts = (0,_files_store__WEBPACK_IMPORTED_MODULE_6__.storeAnalysisResults)(report, {\n                publicUrl\n            });\n        }\n        const endTime = Date.now();\n        console.log(`Analysis completed in ${endTime - startTime}ms`);\n        return {\n            report,\n            artifacts\n        };\n    } catch (error) {\n        console.error('Analysis failed:', error);\n        throw new Error(`Analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n}\n/**\n * Run analysis on extracted files and manifests\n * @param context Analysis context\n * @returns Array of findings\n */ async function runAnalysis(context) {\n    const findings = [];\n    // Analyze dependencies\n    const dependencyFindings = (0,_deps__WEBPACK_IMPORTED_MODULE_3__.analyzeDependencies)(context.manifests, context.rules);\n    findings.push(...dependencyFindings);\n    // Scan source files for deprecated patterns\n    const patternFindings = (0,_scan__WEBPACK_IMPORTED_MODULE_4__.scanSourceFiles)(context.extractedFiles, context.rules);\n    findings.push(...patternFindings);\n    return findings;\n}\n/**\n * Run additional analysis for enhanced detection\n * @param context Analysis context\n * @returns Array of additional findings\n */ async function runAdditionalAnalysis(context) {\n    const findings = [];\n    // Analyze code quality and best practices\n    const qualityFindings = analyzeCodeQuality(context.extractedFiles);\n    findings.push(...qualityFindings);\n    // Analyze security vulnerabilities\n    const securityFindings = analyzeSecurityVulnerabilities(context.extractedFiles);\n    findings.push(...securityFindings);\n    // Analyze performance issues\n    const performanceFindings = analyzePerformanceIssues(context.extractedFiles);\n    findings.push(...performanceFindings);\n    return findings;\n}\n/**\n * Analyze code quality and best practices\n * @param files Array of extracted files\n * @returns Array of quality findings\n */ function analyzeCodeQuality(files) {\n    const findings = [];\n    for (const file of files){\n        const filePath = file.path || file.name || 'unknown';\n        const extension = getFileExtension(filePath);\n        const language = detectLanguageFromExtension(extension);\n        if (!language) continue;\n        const lines = file.content.split('\\n');\n        // Check for code quality issues\n        for(let lineIndex = 0; lineIndex < lines.length; lineIndex++){\n            const line = lines[lineIndex];\n            const lineNumber = lineIndex + 1;\n            // Skip empty lines and comments\n            if (isCommentLine(line, language) || line.trim() === '') {\n                continue;\n            }\n            // Check for long lines\n            if (line.length > 120) {\n                findings.push({\n                    kind: 'pattern',\n                    lang: language,\n                    file: filePath,\n                    line: lineNumber,\n                    status: 'affected',\n                    reason: 'code-quality',\n                    issue: 'Line is too long (>120 characters)',\n                    pattern: 'long-line',\n                    quickFix: 'Break long lines for better readability'\n                });\n            }\n            // Check for trailing whitespace\n            if (line.endsWith(' ') || line.endsWith('\\t')) {\n                findings.push({\n                    kind: 'pattern',\n                    lang: language,\n                    file: filePath,\n                    line: lineNumber,\n                    status: 'affected',\n                    reason: 'code-quality',\n                    issue: 'Trailing whitespace detected',\n                    pattern: 'trailing-whitespace',\n                    quickFix: 'Remove trailing whitespace'\n                });\n            }\n            // Check for mixed tabs and spaces\n            if (line.includes('\\t') && line.includes(' ')) {\n                findings.push({\n                    kind: 'pattern',\n                    lang: language,\n                    file: filePath,\n                    line: lineNumber,\n                    status: 'affected',\n                    reason: 'code-quality',\n                    issue: 'Mixed tabs and spaces for indentation',\n                    pattern: 'mixed-indentation',\n                    quickFix: 'Use consistent indentation (prefer spaces)'\n                });\n            }\n            // Check for TODO/FIXME comments\n            if (line.toLowerCase().includes('todo') || line.toLowerCase().includes('fixme')) {\n                findings.push({\n                    kind: 'pattern',\n                    lang: language,\n                    file: filePath,\n                    line: lineNumber,\n                    status: 'affected',\n                    reason: 'code-quality',\n                    issue: 'TODO/FIXME comment found',\n                    pattern: 'todo-comment',\n                    quickFix: 'Address TODO/FIXME items before production'\n                });\n            }\n            // Check for console.log in production code\n            if (language === 'node' && line.includes('console.log')) {\n                findings.push({\n                    kind: 'pattern',\n                    lang: language,\n                    file: filePath,\n                    line: lineNumber,\n                    status: 'affected',\n                    reason: 'code-quality',\n                    issue: 'console.log should be removed in production',\n                    pattern: 'console-log',\n                    quickFix: 'Use proper logging library or remove debug statements'\n                });\n            }\n            // Check for print statements in Python\n            if (language === 'python' && line.includes('print(')) {\n                findings.push({\n                    kind: 'pattern',\n                    lang: language,\n                    file: filePath,\n                    line: lineNumber,\n                    status: 'affected',\n                    reason: 'code-quality',\n                    issue: 'print() should be removed in production',\n                    pattern: 'print-statement',\n                    quickFix: 'Use proper logging library or remove debug statements'\n                });\n            }\n        }\n    }\n    return findings;\n}\n/**\n * Analyze security vulnerabilities\n * @param files Array of extracted files\n * @returns Array of security findings\n */ function analyzeSecurityVulnerabilities(files) {\n    const findings = [];\n    for (const file of files){\n        const filePath = file.path || file.name || 'unknown';\n        const extension = getFileExtension(filePath);\n        const language = detectLanguageFromExtension(extension);\n        if (!language) continue;\n        const lines = file.content.split('\\n');\n        // Check for security vulnerabilities\n        for(let lineIndex = 0; lineIndex < lines.length; lineIndex++){\n            const line = lines[lineIndex];\n            const lineNumber = lineIndex + 1;\n            // Skip empty lines and comments\n            if (isCommentLine(line, language) || line.trim() === '') {\n                continue;\n            }\n            // Check for hardcoded passwords\n            if (line.toLowerCase().includes('password') && line.includes('=') && !line.includes('input(')) {\n                findings.push({\n                    kind: 'pattern',\n                    lang: language,\n                    file: filePath,\n                    line: lineNumber,\n                    status: 'affected',\n                    reason: 'security',\n                    issue: 'Potential hardcoded password detected',\n                    pattern: 'hardcoded-password',\n                    quickFix: 'Use environment variables or secure credential storage'\n                });\n            }\n            // Check for hardcoded API keys\n            if (line.toLowerCase().includes('api') && line.toLowerCase().includes('key') && line.includes('=')) {\n                findings.push({\n                    kind: 'pattern',\n                    lang: language,\n                    file: filePath,\n                    line: lineNumber,\n                    status: 'affected',\n                    reason: 'security',\n                    issue: 'Potential hardcoded API key detected',\n                    pattern: 'hardcoded-api-key',\n                    quickFix: 'Use environment variables or secure credential storage'\n                });\n            }\n            // Check for SQL injection vulnerabilities\n            if (line.includes('SELECT') || line.includes('INSERT') || line.includes('UPDATE') || line.includes('DELETE')) {\n                if (line.includes('+') || line.includes('${') || line.includes('%s')) {\n                    findings.push({\n                        kind: 'pattern',\n                        lang: language,\n                        file: filePath,\n                        line: lineNumber,\n                        status: 'affected',\n                        reason: 'security',\n                        issue: 'Potential SQL injection vulnerability',\n                        pattern: 'sql-injection',\n                        quickFix: 'Use parameterized queries or prepared statements'\n                    });\n                }\n            }\n            // Check for XSS vulnerabilities\n            if (line.includes('innerHTML') || line.includes('outerHTML') || line.includes('document.write')) {\n                findings.push({\n                    kind: 'pattern',\n                    lang: language,\n                    file: filePath,\n                    line: lineNumber,\n                    status: 'affected',\n                    reason: 'security',\n                    issue: 'Potential XSS vulnerability',\n                    pattern: 'xss-vulnerability',\n                    quickFix: 'Use textContent or sanitize HTML content'\n                });\n            }\n            // Check for unsafe deserialization\n            if (line.includes('pickle.load') || line.includes('unpickle') || line.includes('deserialize')) {\n                findings.push({\n                    kind: 'pattern',\n                    lang: language,\n                    file: filePath,\n                    line: lineNumber,\n                    status: 'affected',\n                    reason: 'security',\n                    issue: 'Unsafe deserialization detected',\n                    pattern: 'unsafe-deserialization',\n                    quickFix: 'Use safe serialization formats like JSON'\n                });\n            }\n        }\n    }\n    return findings;\n}\n/**\n * Analyze performance issues\n * @param files Array of extracted files\n * @returns Array of performance findings\n */ function analyzePerformanceIssues(files) {\n    const findings = [];\n    for (const file of files){\n        const filePath = file.path || file.name || 'unknown';\n        const extension = getFileExtension(filePath);\n        const language = detectLanguageFromExtension(extension);\n        if (!language) continue;\n        const lines = file.content.split('\\n');\n        // Check for performance issues\n        for(let lineIndex = 0; lineIndex < lines.length; lineIndex++){\n            const line = lines[lineIndex];\n            const lineNumber = lineIndex + 1;\n            // Skip empty lines and comments\n            if (isCommentLine(line, language) || line.trim() === '') {\n                continue;\n            }\n            // Check for synchronous file operations\n            if (language === 'node' && (line.includes('fs.readFileSync') || line.includes('fs.writeFileSync'))) {\n                findings.push({\n                    kind: 'pattern',\n                    lang: language,\n                    file: filePath,\n                    line: lineNumber,\n                    status: 'affected',\n                    reason: 'performance',\n                    issue: 'Synchronous file operation can block the event loop',\n                    pattern: 'sync-file-operation',\n                    quickFix: 'Use asynchronous file operations (fs.promises)'\n                });\n            }\n            // Check for blocking operations\n            if (line.includes('sleep(') || line.includes('time.sleep(')) {\n                findings.push({\n                    kind: 'pattern',\n                    lang: language,\n                    file: filePath,\n                    line: lineNumber,\n                    status: 'affected',\n                    reason: 'performance',\n                    issue: 'Blocking sleep operation detected',\n                    pattern: 'blocking-sleep',\n                    quickFix: 'Use asynchronous alternatives or reduce sleep time'\n                });\n            }\n            // Check for inefficient loops\n            if (line.includes('for') && line.includes('in') && line.includes('range(')) {\n                if (line.includes('len(') || line.includes('.length')) {\n                    findings.push({\n                        kind: 'pattern',\n                        lang: language,\n                        file: filePath,\n                        line: lineNumber,\n                        status: 'affected',\n                        reason: 'performance',\n                        issue: 'Inefficient loop with len()/length call',\n                        pattern: 'inefficient-loop',\n                        quickFix: 'Cache length or use enumerate()/entries()'\n                    });\n                }\n            }\n            // Check for string concatenation in loops\n            if (line.includes('+=') && line.includes('str') || line.includes('+=') && line.includes('string')) {\n                findings.push({\n                    kind: 'pattern',\n                    lang: language,\n                    file: filePath,\n                    line: lineNumber,\n                    status: 'affected',\n                    reason: 'performance',\n                    issue: 'String concatenation in loop is inefficient',\n                    pattern: 'string-concatenation',\n                    quickFix: 'Use join() or StringBuilder for better performance'\n                });\n            }\n        }\n    }\n    return findings;\n}\n/**\n * Get file extension from path\n * @param filePath File path\n * @returns File extension with dot\n */ function getFileExtension(filePath) {\n    const lastDot = filePath.lastIndexOf('.');\n    if (lastDot === -1) return '';\n    return filePath.substring(lastDot);\n}\n/**\n * Detect language from file extension\n * @param extension File extension\n * @returns Language or null\n */ function detectLanguageFromExtension(extension) {\n    const languageMap = {\n        '.html': 'node',\n        '.htm': 'node',\n        '.css': 'node',\n        '.js': 'node',\n        '.jsx': 'node',\n        '.mjs': 'node',\n        '.ts': 'node',\n        '.tsx': 'node',\n        '.svg': 'node',\n        '.wasm': 'node',\n        '.json': 'node',\n        '.webmanifest': 'node',\n        '.py': 'python',\n        '.java': 'java',\n        '.go': 'go',\n        '.cs': 'dotnet',\n        '.fs': 'dotnet',\n        '.vb': 'dotnet'\n    };\n    return languageMap[extension] || null;\n}\n/**\n * Check if a line is a comment\n * @param line Line content\n * @param language Language context\n * @returns True if comment line\n */ function isCommentLine(line, language) {\n    const trimmed = line.trim();\n    switch(language){\n        case 'node':\n        case 'java':\n        case 'go':\n        case 'dotnet':\n            return trimmed.startsWith('//') || trimmed.startsWith('/*') || trimmed.startsWith('*') || trimmed.startsWith('<!--');\n        case 'python':\n            return trimmed.startsWith('#');\n        default:\n            return false;\n    }\n}\n/**\n * Generate summary from findings\n * @param findings Array of findings\n * @param detectedLanguages Array of detected languages\n * @returns Report summary\n */ function generateSummary(findings, detectedLanguages) {\n    const summary = {\n        ok: 0,\n        affected: 0,\n        unknown: 0,\n        byLanguage: {}\n    };\n    // Initialize language summaries\n    for (const language of detectedLanguages){\n        summary.byLanguage[language] = {\n            ok: 0,\n            affected: 0,\n            unknown: 0\n        };\n    }\n    // Count findings by status and language\n    for (const finding of findings){\n        if (finding.kind === 'dependency') {\n            summary[finding.status]++;\n            if (summary.byLanguage[finding.lang]) {\n                summary.byLanguage[finding.lang][finding.status]++;\n            }\n        } else if (finding.kind === 'pattern') {\n            summary.affected++;\n            if (summary.byLanguage[finding.lang]) {\n                summary.byLanguage[finding.lang].affected++;\n            }\n        }\n    }\n    return summary;\n}\n/**\n * Get project name from ZIP path\n * @param zipPath ZIP file path\n * @returns Project name\n */ function getProjectName(zipPath) {\n    const pathParts = zipPath.split('/');\n    const fileName = pathParts[pathParts.length - 1];\n    return fileName.replace(/\\.zip$/i, '');\n}\n/**\n * Run analysis on extracted files (for testing)\n * @param files Array of extracted files\n * @param manifests Array of project manifests\n * @param rules Baseline rules\n * @returns Analysis result\n */ async function runAnalysisOnFiles(files, manifests, rules) {\n    const analysisId = (0,crypto__WEBPACK_IMPORTED_MODULE_0__.randomUUID)();\n    const detectedLanguages = (0,_detect__WEBPACK_IMPORTED_MODULE_2__.detectLanguagesFromFiles)(files);\n    const context = {\n        rules,\n        extractedFiles: files,\n        manifests,\n        detectedLanguages\n    };\n    const findings = await runAnalysis(context);\n    const summary = generateSummary(findings, detectedLanguages);\n    const report = {\n        findings,\n        summary,\n        metadata: {\n            analysisId,\n            timestamp: new Date().toISOString(),\n            projectName: 'test-project',\n            detectedLanguages,\n            totalFiles: files.length,\n            scannedFiles: files.length,\n            skippedFiles: 0\n        }\n    };\n    return {\n        report\n    };\n}\n/**\n * Validate analysis options\n * @param options Analysis options\n * @returns Validated options\n */ function validateAnalysisOptions(options) {\n    return {\n        maxFiles: Math.min(options.maxFiles || 50000, 100000),\n        maxFileSize: Math.min(options.maxFileSize || 2 * 1024 * 1024, 10 * 1024 * 1024),\n        allowedExtensions: options.allowedExtensions || [\n            '.html',\n            '.htm',\n            '.css',\n            '.js',\n            '.mjs',\n            '.ts',\n            '.svg',\n            '.wasm',\n            '.json',\n            '.webmanifest'\n        ],\n        ignorePaths: options.ignorePaths || [\n            '/node_modules/',\n            '/.venv/',\n            '/venv/',\n            '/dist/',\n            '/build/',\n            '/.git/',\n            '/.next/'\n        ],\n        storeResults: options.storeResults !== false,\n        publicUrl: options.publicUrl || 'http://localhost:3000'\n    };\n}\n/**\n * Get analysis progress (for long-running analyses)\n * @param context Analysis context\n * @param currentStep Current step\n * @param totalSteps Total steps\n * @returns Progress information\n */ function getAnalysisProgress(context, currentStep, totalSteps) {\n    const steps = [\n        'Loading baseline rules',\n        'Extracting ZIP file',\n        'Detecting project manifests',\n        'Analyzing dependencies',\n        'Scanning source files',\n        'Generating report'\n    ];\n    const step = steps[currentStep] || 'Unknown';\n    const progress = currentStep / totalSteps * 100;\n    let details = '';\n    if (currentStep === 1) {\n        details = `Extracted ${context.extractedFiles.length} files`;\n    } else if (currentStep === 2) {\n        details = `Found ${context.manifests.length} manifests, ${context.detectedLanguages.length} languages`;\n    } else if (currentStep === 3) {\n        details = `Analyzing ${context.manifests.length} dependency manifests`;\n    } else if (currentStep === 4) {\n        details = `Scanning ${context.extractedFiles.length} source files`;\n    }\n    return {\n        step,\n        progress,\n        details\n    };\n}\n/**\n * Estimate analysis time\n * @param fileCount Number of files\n * @param manifestCount Number of manifests\n * @returns Estimated time in milliseconds\n */ function estimateAnalysisTime(fileCount, manifestCount) {\n    // Base time: 1 second\n    let estimated = 1000;\n    // Add time for file processing: 10ms per file\n    estimated += fileCount * 10;\n    // Add time for manifest processing: 50ms per manifest\n    estimated += manifestCount * 50;\n    // Add time for pattern scanning: 5ms per file\n    estimated += fileCount * 5;\n    return Math.min(estimated, 30000); // Cap at 30 seconds\n}\n/**\n * Check if analysis is feasible\n * @param fileCount Number of files\n * @param totalSize Total size in bytes\n * @returns Feasibility check result\n */ function checkAnalysisFeasibility(fileCount, totalSize) {\n    const warnings = [];\n    let feasible = true;\n    // Check file count\n    if (fileCount > 50000) {\n        feasible = false;\n        warnings.push(`Too many files: ${fileCount} (limit: 50,000)`);\n    } else if (fileCount > 10000) {\n        warnings.push(`Large number of files: ${fileCount} (analysis may take longer)`);\n    }\n    // Check total size\n    if (totalSize > 100 * 1024 * 1024) {\n        feasible = false;\n        warnings.push(`Archive too large: ${Math.round(totalSize / 1024 / 1024)}MB (limit: 100MB)`);\n    } else if (totalSize > 50 * 1024 * 1024) {\n        warnings.push(`Large archive: ${Math.round(totalSize / 1024 / 1024)}MB (analysis may take longer)`);\n    }\n    const estimatedTimeMs = estimateAnalysisTime(fileCount, Math.min(fileCount / 100, 50));\n    const estimatedTime = `${Math.round(estimatedTimeMs / 1000)}s`;\n    return {\n        feasible,\n        warnings,\n        estimatedTime\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/analysis/run.ts\n");

/***/ }),

/***/ "(rsc)/./lib/analysis/scan.ts":
/*!******************************!*\
  !*** ./lib/analysis/scan.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fileHasDeprecatedPatterns: () => (/* binding */ fileHasDeprecatedPatterns),\n/* harmony export */   filterPatternFindingsByFile: () => (/* binding */ filterPatternFindingsByFile),\n/* harmony export */   filterPatternFindingsByLanguage: () => (/* binding */ filterPatternFindingsByLanguage),\n/* harmony export */   getDeprecatedPatternLines: () => (/* binding */ getDeprecatedPatternLines),\n/* harmony export */   getFilesWithDeprecatedPatterns: () => (/* binding */ getFilesWithDeprecatedPatterns),\n/* harmony export */   getMostCommonPatterns: () => (/* binding */ getMostCommonPatterns),\n/* harmony export */   getPatternFrequency: () => (/* binding */ getPatternFrequency),\n/* harmony export */   getPatternQuickFix: () => (/* binding */ getPatternQuickFix),\n/* harmony export */   getPatternSummary: () => (/* binding */ getPatternSummary),\n/* harmony export */   getUniquePatterns: () => (/* binding */ getUniquePatterns),\n/* harmony export */   groupPatternFindingsByFile: () => (/* binding */ groupPatternFindingsByFile),\n/* harmony export */   groupPatternFindingsByLanguage: () => (/* binding */ groupPatternFindingsByLanguage),\n/* harmony export */   scanSourceFiles: () => (/* binding */ scanSourceFiles),\n/* harmony export */   sortPatternFindings: () => (/* binding */ sortPatternFindings)\n/* harmony export */ });\n/* harmony import */ var _baseline_loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./baseline.loader */ \"(rsc)/./lib/analysis/baseline.loader.ts\");\n\n/**\n * Scan source files for deprecated patterns\n * @param files Array of extracted files\n * @param rules Baseline rules\n * @returns Array of pattern findings\n */ function scanSourceFiles(files, rules) {\n    const findings = [];\n    for (const file of files){\n        // Skip files that are too large\n        if (file.size > rules.max_file_size) {\n            console.warn(`Skipping large file: ${file.path || file.name} (${file.size} bytes)`);\n            continue;\n        }\n        // Skip ignored paths\n        const filePath = file.path || file.name || 'unknown';\n        if ((0,_baseline_loader__WEBPACK_IMPORTED_MODULE_0__.shouldIgnorePath)(rules, filePath)) {\n            continue;\n        }\n        // Skip files that shouldn't be scanned\n        const extension = getFileExtension(filePath);\n        if (!(0,_baseline_loader__WEBPACK_IMPORTED_MODULE_0__.shouldScanFile)(rules, extension)) {\n            continue;\n        }\n        // Detect language from file extension\n        const language = detectLanguageFromExtension(extension);\n        if (!language) {\n            continue;\n        }\n        // Get deprecated patterns for this language\n        const patterns = rules.deprecated_patterns[language] || [];\n        if (patterns.length === 0) {\n            continue;\n        }\n        // Scan file content\n        const fileFindings = scanFileContent(file, language, patterns);\n        findings.push(...fileFindings);\n        // Add additional analysis for specific file types\n        if (language === 'node' && (extension === '.js' || extension === '.ts' || extension === '.jsx' || extension === '.tsx')) {\n            const jsFindings = analyzeJavaScriptPatterns(file, language);\n            findings.push(...jsFindings);\n        }\n        if (language === 'python' && extension === '.py') {\n            const pyFindings = analyzePythonPatterns(file, language);\n            findings.push(...pyFindings);\n        }\n    }\n    return findings;\n}\n/**\n * Scan a single file for deprecated patterns\n * @param file File to scan\n * @param language Language of the file\n * @param patterns Deprecated patterns to look for\n * @param rules Baseline rules\n * @returns Array of pattern findings\n */ function scanFileContent(file, language, patterns) {\n    const findings = [];\n    const lines = file.content.split('\\n');\n    const filePath = file.path || file.name || 'unknown';\n    for(let lineIndex = 0; lineIndex < lines.length; lineIndex++){\n        const line = lines[lineIndex];\n        const lineNumber = lineIndex + 1;\n        // Skip empty lines and comments\n        if (isCommentLine(line, language) || line.trim() === '') {\n            continue;\n        }\n        // Check each pattern\n        for (const pattern of patterns){\n            try {\n                const regex = new RegExp(pattern.pattern, 'g');\n                let match;\n                while((match = regex.exec(line)) !== null){\n                    // Avoid infinite loops with zero-length matches\n                    if (match.index === regex.lastIndex) {\n                        regex.lastIndex++;\n                    }\n                    findings.push({\n                        kind: 'pattern',\n                        lang: language,\n                        file: filePath,\n                        line: lineNumber,\n                        status: 'affected',\n                        reason: 'deprecated-api',\n                        issue: pattern.message,\n                        pattern: pattern.pattern,\n                        quickFix: pattern.alternative\n                    });\n                }\n            } catch (error) {\n                console.warn(`Invalid regex pattern: ${pattern.pattern} - ${error}`);\n            }\n        }\n    }\n    return findings;\n}\n/**\n * Get file extension from path\n * @param filePath File path\n * @returns File extension with dot\n */ function getFileExtension(filePath) {\n    const lastDot = filePath.lastIndexOf('.');\n    if (lastDot === -1) return '';\n    return filePath.substring(lastDot);\n}\n/**\n * Detect language from file extension\n * @param extension File extension\n * @returns Language or null\n */ function detectLanguageFromExtension(extension) {\n    const languageMap = {\n        '.js': 'node',\n        '.jsx': 'node',\n        '.ts': 'node',\n        '.tsx': 'node',\n        '.py': 'python',\n        '.java': 'java',\n        '.go': 'go',\n        '.cs': 'dotnet',\n        '.fs': 'dotnet',\n        '.vb': 'dotnet'\n    };\n    return languageMap[extension] || null;\n}\n/**\n * Check if a line is a comment\n * @param line Line content\n * @param language Language context\n * @returns True if comment line\n */ function isCommentLine(line, language) {\n    const trimmed = line.trim();\n    switch(language){\n        case 'node':\n        case 'java':\n        case 'go':\n        case 'dotnet':\n            return trimmed.startsWith('//') || trimmed.startsWith('/*') || trimmed.startsWith('*');\n        case 'python':\n            return trimmed.startsWith('#');\n        default:\n            return false;\n    }\n}\n/**\n * Get quick fix for pattern replacement\n * @param rules Baseline rules\n * @param language Language\n * @param pattern Pattern to replace\n * @returns Quick fix suggestion or undefined\n */ function getPatternQuickFix(rules, language, pattern) {\n    return rules.quick_fixes.pattern_replacement[language]?.[pattern];\n}\n/**\n * Group pattern findings by file\n * @param findings Pattern findings\n * @returns Grouped findings by file\n */ function groupPatternFindingsByFile(findings) {\n    const grouped = {};\n    for (const finding of findings){\n        if (!grouped[finding.file]) {\n            grouped[finding.file] = [];\n        }\n        grouped[finding.file].push(finding);\n    }\n    return grouped;\n}\n/**\n * Group pattern findings by language\n * @param findings Pattern findings\n * @returns Grouped findings by language\n */ function groupPatternFindingsByLanguage(findings) {\n    const grouped = {\n        python: [],\n        node: [],\n        java: [],\n        go: [],\n        dotnet: []\n    };\n    for (const finding of findings){\n        if (!grouped[finding.lang]) {\n            grouped[finding.lang] = [];\n        }\n        grouped[finding.lang].push(finding);\n    }\n    return grouped;\n}\n/**\n * Get pattern summary statistics\n * @param findings Pattern findings\n * @returns Summary statistics\n */ function getPatternSummary(findings) {\n    const total = findings.length;\n    const byLanguage = groupPatternFindingsByLanguage(findings);\n    const byFile = groupPatternFindingsByFile(findings);\n    return {\n        total,\n        affectedFiles: Object.keys(byFile).length,\n        byLanguage: Object.fromEntries(Object.entries(byLanguage).map(([lang, findings])=>[\n                lang,\n                {\n                    count: findings.length,\n                    files: new Set(findings.map((f)=>f.file)).size\n                }\n            ]))\n    };\n}\n/**\n * Filter pattern findings by language\n * @param findings Pattern findings\n * @param language Language to filter by\n * @returns Filtered findings\n */ function filterPatternFindingsByLanguage(findings, language) {\n    return findings.filter((f)=>f.lang === language);\n}\n/**\n * Filter pattern findings by file\n * @param findings Pattern findings\n * @param filePath File path to filter by\n * @returns Filtered findings\n */ function filterPatternFindingsByFile(findings, filePath) {\n    return findings.filter((f)=>f.file === filePath);\n}\n/**\n * Sort pattern findings by file and line\n * @param findings Pattern findings\n * @returns Sorted findings\n */ function sortPatternFindings(findings) {\n    return [\n        ...findings\n    ].sort((a, b)=>{\n        // First by file path\n        const fileDiff = a.file.localeCompare(b.file);\n        if (fileDiff !== 0) return fileDiff;\n        // Then by line number\n        return a.line - b.line;\n    });\n}\n/**\n * Get unique patterns found\n * @param findings Pattern findings\n * @returns Array of unique patterns\n */ function getUniquePatterns(findings) {\n    const patterns = new Set();\n    for (const finding of findings){\n        patterns.add(finding.pattern);\n    }\n    return Array.from(patterns);\n}\n/**\n * Get pattern frequency\n * @param findings Pattern findings\n * @returns Pattern frequency map\n */ function getPatternFrequency(findings) {\n    const frequency = {};\n    for (const finding of findings){\n        frequency[finding.pattern] = (frequency[finding.pattern] || 0) + 1;\n    }\n    return frequency;\n}\n/**\n * Get most common patterns\n * @param findings Pattern findings\n * @param limit Maximum number of patterns to return\n * @returns Array of most common patterns\n */ function getMostCommonPatterns(findings, limit = 10) {\n    const frequency = getPatternFrequency(findings);\n    return Object.entries(frequency).map(([pattern, count])=>({\n            pattern,\n            count\n        })).sort((a, b)=>b.count - a.count).slice(0, limit);\n}\n/**\n * Check if a file contains any deprecated patterns\n * @param filePath File path\n * @param findings Pattern findings\n * @returns True if file has deprecated patterns\n */ function fileHasDeprecatedPatterns(filePath, findings) {\n    return findings.some((f)=>f.file === filePath);\n}\n/**\n * Get files with deprecated patterns\n * @param findings Pattern findings\n * @returns Array of file paths\n */ function getFilesWithDeprecatedPatterns(findings) {\n    const files = new Set();\n    for (const finding of findings){\n        files.add(finding.file);\n    }\n    return Array.from(files);\n}\n/**\n * Analyze JavaScript-specific patterns\n * @param file File to analyze\n * @param language Language context\n * @returns Array of pattern findings\n */ function analyzeJavaScriptPatterns(file, language) {\n    const findings = [];\n    const lines = file.content.split('\\n');\n    const filePath = file.path || file.name || 'unknown';\n    for(let lineIndex = 0; lineIndex < lines.length; lineIndex++){\n        const line = lines[lineIndex];\n        const lineNumber = lineIndex + 1;\n        // Skip empty lines and comments\n        if (isCommentLine(line, language) || line.trim() === '') {\n            continue;\n        }\n        // Check for common JavaScript issues\n        const jsPatterns = [\n            {\n                pattern: /var\\s+\\w+/g,\n                message: \"var is deprecated, use let or const\",\n                alternative: \"Use let for variables that change, const for constants\"\n            },\n            {\n                pattern: /function\\s+\\w+\\s*\\(/g,\n                message: \"Function declarations are less preferred than arrow functions\",\n                alternative: \"Use arrow functions for better scope handling\"\n            },\n            {\n                pattern: /this\\.\\w+\\s*=/g,\n                message: \"Direct this assignment is discouraged\",\n                alternative: \"Use class properties or bind methods properly\"\n            },\n            {\n                pattern: /\\barguments\\b/g,\n                message: \"arguments object is deprecated, use rest parameters\",\n                alternative: \"Use ...args rest parameter syntax\"\n            },\n            {\n                pattern: /==\\s*\\w+|\\w+\\s*==/g,\n                message: \"== can cause type coercion issues\",\n                alternative: \"Use === for strict equality\"\n            },\n            {\n                pattern: /!=\\s*\\w+|\\w+\\s*!=/g,\n                message: \"!= can cause type coercion issues\",\n                alternative: \"Use !== for strict inequality\"\n            },\n            {\n                pattern: /typeof\\s+\\w+\\s*===\\s*['\"]undefined['\"]/g,\n                message: \"typeof undefined check is verbose\",\n                alternative: \"Use === undefined or optional chaining\"\n            },\n            {\n                pattern: /for\\s*\\(\\s*var\\s+/g,\n                message: \"var in for loops can cause scope issues\",\n                alternative: \"Use let in for loops\"\n            },\n            {\n                pattern: /with\\s*\\(/g,\n                message: \"with statement is deprecated and dangerous\",\n                alternative: \"Use explicit variable references\"\n            },\n            {\n                pattern: /eval\\s*\\(/g,\n                message: \"eval() is dangerous and should be avoided\",\n                alternative: \"Use safer alternatives or refactor code\"\n            },\n            {\n                pattern: /new\\s+Function\\s*\\(/g,\n                message: \"new Function() is dangerous\",\n                alternative: \"Use function declarations or arrow functions\"\n            },\n            {\n                pattern: /setTimeout\\s*\\(\\s*['\"]/g,\n                message: \"setTimeout with string is dangerous\",\n                alternative: \"Use function references instead of strings\"\n            },\n            {\n                pattern: /setInterval\\s*\\(\\s*['\"]/g,\n                message: \"setInterval with string is dangerous\",\n                alternative: \"Use function references instead of strings\"\n            },\n            {\n                pattern: /setImmediate\\s*\\(\\s*['\"]/g,\n                message: \"setImmediate with string is dangerous\",\n                alternative: \"Use function references instead of strings\"\n            },\n            {\n                pattern: /process\\.nextTick\\s*\\(\\s*['\"]/g,\n                message: \"process.nextTick with string is dangerous\",\n                alternative: \"Use function references instead of strings\"\n            },\n            {\n                pattern: /require\\s*\\(\\s*['\"]/g,\n                message: \"Dynamic require() can be dangerous\",\n                alternative: \"Use static imports or proper module loading\"\n            },\n            {\n                pattern: /import\\s*\\(\\s*['\"]/g,\n                message: \"Dynamic import() can be dangerous\",\n                alternative: \"Use static imports or proper module loading\"\n            },\n            {\n                pattern: /new\\s+RegExp\\s*\\(\\s*['\"]/g,\n                message: \"new RegExp() with user input is dangerous\",\n                alternative: \"Use literal regex or sanitize input\"\n            },\n            {\n                pattern: /RegExp\\s*\\(\\s*['\"]/g,\n                message: \"RegExp() with user input is dangerous\",\n                alternative: \"Use literal regex or sanitize input\"\n            },\n            {\n                pattern: /JSON\\.parse\\s*\\(\\s*['\"]/g,\n                message: \"JSON.parse() with untrusted data is dangerous\",\n                alternative: \"Validate and sanitize input before parsing\"\n            },\n            {\n                pattern: /JSON\\.stringify\\s*\\(/g,\n                message: \"JSON.stringify() can expose sensitive data\",\n                alternative: \"Filter sensitive properties before stringifying\"\n            },\n            {\n                pattern: /XMLHttpRequest/g,\n                message: \"XMLHttpRequest is deprecated, use fetch()\",\n                alternative: \"Use fetch() API or axios library\"\n            },\n            {\n                pattern: /ActiveXObject/g,\n                message: \"ActiveXObject is deprecated and insecure\",\n                alternative: \"Use modern alternatives\"\n            },\n            {\n                pattern: /attachEvent/g,\n                message: \"attachEvent is deprecated, use addEventListener\",\n                alternative: \"Use addEventListener() method\"\n            },\n            {\n                pattern: /detachEvent/g,\n                message: \"detachEvent is deprecated, use removeEventListener\",\n                alternative: \"Use removeEventListener() method\"\n            },\n            {\n                pattern: /document\\.write\\s*\\(/g,\n                message: \"document.write() is deprecated and dangerous\",\n                alternative: \"Use DOM manipulation methods\"\n            },\n            {\n                pattern: /innerHTML\\s*=/g,\n                message: \"innerHTML assignment can be dangerous\",\n                alternative: \"Use textContent or proper DOM methods\"\n            },\n            {\n                pattern: /outerHTML\\s*=/g,\n                message: \"outerHTML assignment can be dangerous\",\n                alternative: \"Use proper DOM manipulation methods\"\n            },\n            {\n                pattern: /alert\\s*\\(/g,\n                message: \"alert() should not be used in production\",\n                alternative: \"Use proper user interface components or logging\"\n            },\n            {\n                pattern: /confirm\\s*\\(/g,\n                message: \"confirm() should not be used in production\",\n                alternative: \"Use proper user interface components\"\n            },\n            {\n                pattern: /prompt\\s*\\(/g,\n                message: \"prompt() should not be used in production\",\n                alternative: \"Use proper user interface components\"\n            },\n            {\n                pattern: /debugger\\b/g,\n                message: \"debugger statement should be removed in production\",\n                alternative: \"Remove debugger statements or use proper debugging tools\"\n            },\n            {\n                pattern: /console\\.(log|warn|error|info|debug|trace|dir|table|time|timeEnd|count|countReset|group|groupEnd|groupCollapsed|assert|clear|profile|profileEnd|timeStamp|markTimeline|timeline|timelineEnd|memory|exception)\\s*\\(/g,\n                message: \"console methods should be removed in production\",\n                alternative: \"Use proper logging library or remove debug statements\"\n            }\n        ];\n        for (const pattern of jsPatterns){\n            try {\n                const regex = new RegExp(pattern.pattern.source, 'g');\n                let match;\n                while((match = regex.exec(line)) !== null){\n                    // Avoid infinite loops with zero-length matches\n                    if (match.index === regex.lastIndex) {\n                        regex.lastIndex++;\n                    }\n                    findings.push({\n                        kind: 'pattern',\n                        lang: language,\n                        file: filePath,\n                        line: lineNumber,\n                        status: 'affected',\n                        reason: 'deprecated-api',\n                        issue: pattern.message,\n                        pattern: pattern.pattern.source,\n                        quickFix: pattern.alternative\n                    });\n                }\n            } catch (error) {\n                console.warn(`Invalid regex pattern: ${pattern.pattern} - ${error}`);\n            }\n        }\n    }\n    return findings;\n}\n/**\n * Analyze Python-specific patterns\n * @param file File to analyze\n * @param language Language context\n * @returns Array of pattern findings\n */ function analyzePythonPatterns(file, language) {\n    const findings = [];\n    const lines = file.content.split('\\n');\n    const filePath = file.path || file.name || 'unknown';\n    for(let lineIndex = 0; lineIndex < lines.length; lineIndex++){\n        const line = lines[lineIndex];\n        const lineNumber = lineIndex + 1;\n        // Skip empty lines and comments\n        if (isCommentLine(line, language) || line.trim() === '') {\n            continue;\n        }\n        // Check for common Python issues\n        const pyPatterns = [\n            {\n                pattern: /urllib2\\.|urllib\\.request/g,\n                message: \"urllib2 is deprecated in Python 3, use urllib.request\",\n                alternative: \"Use urllib.request or requests library\"\n            },\n            {\n                pattern: /execfile\\s*\\(/g,\n                message: \"execfile() is deprecated in Python 3\",\n                alternative: \"Use exec(open(filename).read())\"\n            },\n            {\n                pattern: /reload\\s*\\(/g,\n                message: \"reload() is deprecated, use importlib.reload()\",\n                alternative: \"Use importlib.reload(module)\"\n            },\n            {\n                pattern: /file\\s*\\(/g,\n                message: \"file() is deprecated, use open()\",\n                alternative: \"Use open() function instead\"\n            },\n            {\n                pattern: /raw_input\\s*\\(/g,\n                message: \"raw_input() is deprecated in Python 3, use input()\",\n                alternative: \"Use input() function\"\n            },\n            {\n                pattern: /xrange\\s*\\(/g,\n                message: \"xrange() is deprecated in Python 3, use range()\",\n                alternative: \"Use range() function\"\n            },\n            {\n                pattern: /basestring/g,\n                message: \"basestring is deprecated in Python 3\",\n                alternative: \"Use str or bytes directly\"\n            },\n            {\n                pattern: /unicode\\s*\\(/g,\n                message: \"unicode() is deprecated in Python 3\",\n                alternative: \"Use str() function\"\n            },\n            {\n                pattern: /long\\s*\\(/g,\n                message: \"long() is deprecated in Python 3\",\n                alternative: \"Use int() function\"\n            },\n            {\n                pattern: /cmp\\s*\\(/g,\n                message: \"cmp() is deprecated in Python 3\",\n                alternative: \"Use (a > b) - (a < b) or operator functions\"\n            },\n            {\n                pattern: /reduce\\s*\\(/g,\n                message: \"reduce() is deprecated, use functools.reduce()\",\n                alternative: \"Import and use functools.reduce()\"\n            },\n            {\n                pattern: /apply\\s*\\(/g,\n                message: \"apply() is deprecated in Python 3\",\n                alternative: \"Use function(*args, **kwargs) syntax\"\n            },\n            {\n                pattern: /coerce\\s*\\(/g,\n                message: \"coerce() is deprecated in Python 3\",\n                alternative: \"Use explicit type conversion\"\n            },\n            {\n                pattern: /intern\\s*\\(/g,\n                message: \"intern() is deprecated in Python 3\",\n                alternative: \"Use sys.intern() if needed\"\n            },\n            {\n                pattern: /unichr\\s*\\(/g,\n                message: \"unichr() is deprecated in Python 3\",\n                alternative: \"Use chr() function\"\n            },\n            {\n                pattern: /buffer\\s*\\(/g,\n                message: \"buffer() is deprecated in Python 3\",\n                alternative: \"Use memoryview() or bytes()\"\n            },\n            {\n                pattern: /StandardError/g,\n                message: \"StandardError is deprecated in Python 3\",\n                alternative: \"Use Exception or specific exception types\"\n            },\n            {\n                pattern: /exec\\s+\\w+\\s+in\\s+\\w+/g,\n                message: \"exec with 'in' syntax is deprecated\",\n                alternative: \"Use exec(code, globals, locals) syntax\"\n            },\n            {\n                pattern: /print\\s+\\w+/g,\n                message: \"print statement is deprecated in Python 3\",\n                alternative: \"Use print() function\"\n            },\n            {\n                pattern: /raise\\s+\\w+,\\s+\\w+/g,\n                message: \"raise with comma syntax is deprecated\",\n                alternative: \"Use raise Exception('message') syntax\"\n            },\n            {\n                pattern: /except\\s+\\w+,\\s+\\w+/g,\n                message: \"except with comma syntax is deprecated\",\n                alternative: \"Use except Exception as e: syntax\"\n            },\n            {\n                pattern: /def\\s+\\w+\\s*\\([^)]*\\):/g,\n                message: \"Check for Python 2 style function definitions\",\n                alternative: \"Ensure Python 3 compatibility\"\n            },\n            {\n                pattern: /from\\s+\\w+\\s+import\\s+\\*/g,\n                message: \"Wildcard imports are discouraged\",\n                alternative: \"Import specific functions or use qualified names\"\n            },\n            {\n                pattern: /eval\\s*\\(/g,\n                message: \"eval() is dangerous and should be avoided\",\n                alternative: \"Use safer alternatives like ast.literal_eval()\"\n            },\n            {\n                pattern: /exec\\s*\\(/g,\n                message: \"exec() is dangerous and should be avoided\",\n                alternative: \"Use safer alternatives or refactor code\"\n            },\n            {\n                pattern: /subprocess\\.call.*shell=True/g,\n                message: \"shell=True in subprocess is dangerous\",\n                alternative: \"Use shell=False and pass arguments as list\"\n            },\n            {\n                pattern: /os\\.system\\s*\\(/g,\n                message: \"os.system() is deprecated, use subprocess\",\n                alternative: \"Use subprocess.run() or subprocess.Popen()\"\n            },\n            {\n                pattern: /pickle\\.loads\\s*\\(/g,\n                message: \"pickle.loads() is unsafe with untrusted data\",\n                alternative: \"Use json.loads() or other safe serialization\"\n            },\n            {\n                pattern: /pickle\\.load\\s*\\(/g,\n                message: \"pickle.load() is unsafe with untrusted data\",\n                alternative: \"Use json.load() or other safe serialization\"\n            },\n            {\n                pattern: /md5\\.|sha1\\./g,\n                message: \"MD5 and SHA1 are cryptographically broken\",\n                alternative: \"Use hashlib.sha256() or hashlib.sha3_256()\"\n            },\n            {\n                pattern: /random\\.random\\s*\\(/g,\n                message: \"random.random() is not cryptographically secure\",\n                alternative: \"Use secrets module for cryptographic randomness\"\n            },\n            {\n                pattern: /time\\.time\\s*\\(/g,\n                message: \"time.time() is not suitable for timing attacks\",\n                alternative: \"Use time.perf_counter() for timing\"\n            },\n            {\n                pattern: /class\\s+\\w+.*:/g,\n                message: \"Check for old-style class definitions\",\n                alternative: \"Ensure all classes inherit from object or use new-style classes\"\n            },\n            {\n                pattern: /def\\s+\\w+\\s*\\(self,\\s*[^)]*\\):/g,\n                message: \"Check for Python 2 style method definitions\",\n                alternative: \"Ensure Python 3 compatibility\"\n            },\n            {\n                pattern: /import\\s+\\w+\\s*$/g,\n                message: \"Check for Python 2 style imports\",\n                alternative: \"Ensure Python 3 compatibility\"\n            }\n        ];\n        for (const pattern of pyPatterns){\n            try {\n                const regex = new RegExp(pattern.pattern.source, 'g');\n                let match;\n                while((match = regex.exec(line)) !== null){\n                    // Avoid infinite loops with zero-length matches\n                    if (match.index === regex.lastIndex) {\n                        regex.lastIndex++;\n                    }\n                    findings.push({\n                        kind: 'pattern',\n                        lang: language,\n                        file: filePath,\n                        line: lineNumber,\n                        status: 'affected',\n                        reason: 'deprecated-api',\n                        issue: pattern.message,\n                        pattern: pattern.pattern.source,\n                        quickFix: pattern.alternative\n                    });\n                }\n            } catch (error) {\n                console.warn(`Invalid regex pattern: ${pattern.pattern} - ${error}`);\n            }\n        }\n    }\n    return findings;\n}\n/**\n * Get line numbers with deprecated patterns for a file\n * @param filePath File path\n * @param findings Pattern findings\n * @returns Array of line numbers\n */ function getDeprecatedPatternLines(filePath, findings) {\n    return findings.filter((f)=>f.file === filePath).map((f)=>f.line).sort((a, b)=>a - b);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/analysis/scan.ts\n");

/***/ }),

/***/ "(rsc)/./lib/files/single-file.ts":
/*!**********************************!*\
  !*** ./lib/files/single-file.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   detectFileType: () => (/* binding */ detectFileType),\n/* harmony export */   processSingleFile: () => (/* binding */ processSingleFile),\n/* harmony export */   shouldAnalyzeFile: () => (/* binding */ shouldAnalyzeFile)\n/* harmony export */ });\n/**\n * Process a single file for analysis\n * @param filePath Path to the file\n * @param content File content\n * @param maxFileSize Maximum file size in bytes\n * @returns Single file result\n */ function processSingleFile(filePath, content, maxFileSize = 5 * 1024 * 1024 // 5MB\n) {\n    // Check file size\n    const fileSize = Buffer.byteLength(content, 'utf8');\n    if (fileSize > maxFileSize) {\n        return {\n            files: [],\n            totalFiles: 1,\n            skippedFiles: 1\n        };\n    }\n    // Create extracted file object\n    const extractedFile = {\n        path: filePath,\n        content: content,\n        size: fileSize\n    };\n    return {\n        files: [\n            extractedFile\n        ],\n        totalFiles: 1,\n        skippedFiles: 0\n    };\n}\n/**\n * Detect file type from extension\n * @param filename File name\n * @returns File type category\n */ function detectFileType(filename) {\n    const ext = filename.split('.').pop()?.toLowerCase();\n    const typeMap = {\n        // Web files\n        'js': 'javascript',\n        'jsx': 'javascript',\n        'ts': 'typescript',\n        'tsx': 'typescript',\n        'html': 'html',\n        'htm': 'html',\n        'css': 'css',\n        'scss': 'css',\n        'sass': 'css',\n        'less': 'css',\n        // Python\n        'py': 'python',\n        'pyw': 'python',\n        // Java\n        'java': 'java',\n        'kt': 'kotlin',\n        'scala': 'scala',\n        // C/C++\n        'c': 'c',\n        'cpp': 'cpp',\n        'cc': 'cpp',\n        'cxx': 'cpp',\n        'h': 'c',\n        'hpp': 'cpp',\n        // C#\n        'cs': 'csharp',\n        'fs': 'fsharp',\n        'vb': 'vbnet',\n        // Go\n        'go': 'go',\n        // Rust\n        'rs': 'rust',\n        // PHP\n        'php': 'php',\n        // Ruby\n        'rb': 'ruby',\n        // Swift\n        'swift': 'swift',\n        // Configuration files\n        'json': 'json',\n        'yaml': 'yaml',\n        'yml': 'yaml',\n        'xml': 'xml',\n        'toml': 'toml',\n        'ini': 'ini',\n        'cfg': 'config',\n        'conf': 'config',\n        // Documentation\n        'md': 'markdown',\n        'txt': 'text',\n        'rst': 'restructuredtext',\n        // Shell scripts\n        'sh': 'shell',\n        'bash': 'shell',\n        'zsh': 'shell',\n        'fish': 'shell',\n        'ps1': 'powershell',\n        'bat': 'batch',\n        'cmd': 'batch',\n        // SQL\n        'sql': 'sql',\n        // Docker\n        'dockerfile': 'dockerfile',\n        'dockerignore': 'dockerignore',\n        // Git\n        'gitignore': 'gitignore',\n        'gitattributes': 'gitattributes',\n        // Package managers\n        'package.json': 'package.json',\n        'requirements.txt': 'requirements.txt',\n        'pom.xml': 'pom.xml',\n        'build.gradle': 'gradle',\n        'go.mod': 'go.mod',\n        'cargo.toml': 'cargo.toml',\n        'composer.json': 'composer.json',\n        'gemfile': 'gemfile',\n        'podfile': 'podfile',\n        'pubspec.yaml': 'pubspec.yaml'\n    };\n    return typeMap[ext || ''] || 'unknown';\n}\n/**\n * Check if file should be analyzed\n * @param filename File name\n * @returns Whether file should be analyzed\n */ function shouldAnalyzeFile(filename) {\n    const ext = filename.split('.').pop()?.toLowerCase();\n    // Only allow web file types\n    const allowedExtensions = [\n        'html',\n        'htm',\n        'js',\n        'mjs',\n        'ts',\n        'json',\n        'webmanifest',\n        'wasm' // WebAssembly files\n    ];\n    return allowedExtensions.includes(ext || '');\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvZmlsZXMvc2luZ2xlLWZpbGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBUUE7Ozs7OztDQU1DLEdBQ00sU0FBU0Esa0JBQ2RDLFFBQWdCLEVBQ2hCQyxPQUFlLEVBQ2ZDLGNBQXNCLElBQUksT0FBTyxLQUFLLE1BQU07QUFBUDtJQUVyQyxrQkFBa0I7SUFDbEIsTUFBTUMsV0FBV0MsT0FBT0MsVUFBVSxDQUFDSixTQUFTO0lBQzVDLElBQUlFLFdBQVdELGFBQWE7UUFDMUIsT0FBTztZQUNMSSxPQUFPLEVBQUU7WUFDVEMsWUFBWTtZQUNaQyxjQUFjO1FBQ2hCO0lBQ0Y7SUFFQSwrQkFBK0I7SUFDL0IsTUFBTUMsZ0JBQStCO1FBQ25DQyxNQUFNVjtRQUNOQyxTQUFTQTtRQUNUVSxNQUFNUjtJQUNSO0lBRUEsT0FBTztRQUNMRyxPQUFPO1lBQUNHO1NBQWM7UUFDdEJGLFlBQVk7UUFDWkMsY0FBYztJQUNoQjtBQUNGO0FBRUE7Ozs7Q0FJQyxHQUNNLFNBQVNJLGVBQWVDLFFBQWdCO0lBQzdDLE1BQU1DLE1BQU1ELFNBQVNFLEtBQUssQ0FBQyxLQUFLQyxHQUFHLElBQUlDO0lBRXZDLE1BQU1DLFVBQWtDO1FBQ3RDLFlBQVk7UUFDWixNQUFNO1FBQ04sT0FBTztRQUNQLE1BQU07UUFDTixPQUFPO1FBQ1AsUUFBUTtRQUNSLE9BQU87UUFDUCxPQUFPO1FBQ1AsUUFBUTtRQUNSLFFBQVE7UUFDUixRQUFRO1FBRVIsU0FBUztRQUNULE1BQU07UUFDTixPQUFPO1FBRVAsT0FBTztRQUNQLFFBQVE7UUFDUixNQUFNO1FBQ04sU0FBUztRQUVULFFBQVE7UUFDUixLQUFLO1FBQ0wsT0FBTztRQUNQLE1BQU07UUFDTixPQUFPO1FBQ1AsS0FBSztRQUNMLE9BQU87UUFFUCxLQUFLO1FBQ0wsTUFBTTtRQUNOLE1BQU07UUFDTixNQUFNO1FBRU4sS0FBSztRQUNMLE1BQU07UUFFTixPQUFPO1FBQ1AsTUFBTTtRQUVOLE1BQU07UUFDTixPQUFPO1FBRVAsT0FBTztRQUNQLE1BQU07UUFFTixRQUFRO1FBQ1IsU0FBUztRQUVULHNCQUFzQjtRQUN0QixRQUFRO1FBQ1IsUUFBUTtRQUNSLE9BQU87UUFDUCxPQUFPO1FBQ1AsUUFBUTtRQUNSLE9BQU87UUFDUCxPQUFPO1FBQ1AsUUFBUTtRQUVSLGdCQUFnQjtRQUNoQixNQUFNO1FBQ04sT0FBTztRQUNQLE9BQU87UUFFUCxnQkFBZ0I7UUFDaEIsTUFBTTtRQUNOLFFBQVE7UUFDUixPQUFPO1FBQ1AsUUFBUTtRQUNSLE9BQU87UUFDUCxPQUFPO1FBQ1AsT0FBTztRQUVQLE1BQU07UUFDTixPQUFPO1FBRVAsU0FBUztRQUNULGNBQWM7UUFDZCxnQkFBZ0I7UUFFaEIsTUFBTTtRQUNOLGFBQWE7UUFDYixpQkFBaUI7UUFFakIsbUJBQW1CO1FBQ25CLGdCQUFnQjtRQUNoQixvQkFBb0I7UUFDcEIsV0FBVztRQUNYLGdCQUFnQjtRQUNoQixVQUFVO1FBQ1YsY0FBYztRQUNkLGlCQUFpQjtRQUNqQixXQUFXO1FBQ1gsV0FBVztRQUNYLGdCQUFnQjtJQUNsQjtJQUVBLE9BQU9BLE9BQU8sQ0FBQ0osT0FBTyxHQUFHLElBQUk7QUFDL0I7QUFFQTs7OztDQUlDLEdBQ00sU0FBU0ssa0JBQWtCTixRQUFnQjtJQUNoRCxNQUFNQyxNQUFNRCxTQUFTRSxLQUFLLENBQUMsS0FBS0MsR0FBRyxJQUFJQztJQUV2Qyw0QkFBNEI7SUFDNUIsTUFBTUcsb0JBQW9CO1FBQ3hCO1FBQVE7UUFDUjtRQUFNO1FBQU87UUFDYjtRQUNBO1FBQ0EsT0FBeUIsb0JBQW9CO0tBQzlDO0lBRUQsT0FBT0Esa0JBQWtCQyxRQUFRLENBQUNQLE9BQU87QUFDM0MiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQ2toYWRhclxcRG93bmxvYWRzXFxBSV9CYXNlbGluZV9NYXBcXGxpYlxcZmlsZXNcXHNpbmdsZS1maWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4dHJhY3RlZEZpbGUgfSBmcm9tICcuLi9hbmFseXNpcy9iYXNlbGluZS50eXBlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2luZ2xlRmlsZVJlc3VsdCB7XG4gIGZpbGVzOiBFeHRyYWN0ZWRGaWxlW107XG4gIHRvdGFsRmlsZXM6IG51bWJlcjtcbiAgc2tpcHBlZEZpbGVzOiBudW1iZXI7XG59XG5cbi8qKlxuICogUHJvY2VzcyBhIHNpbmdsZSBmaWxlIGZvciBhbmFseXNpc1xuICogQHBhcmFtIGZpbGVQYXRoIFBhdGggdG8gdGhlIGZpbGVcbiAqIEBwYXJhbSBjb250ZW50IEZpbGUgY29udGVudFxuICogQHBhcmFtIG1heEZpbGVTaXplIE1heGltdW0gZmlsZSBzaXplIGluIGJ5dGVzXG4gKiBAcmV0dXJucyBTaW5nbGUgZmlsZSByZXN1bHRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NTaW5nbGVGaWxlKFxuICBmaWxlUGF0aDogc3RyaW5nLFxuICBjb250ZW50OiBzdHJpbmcsXG4gIG1heEZpbGVTaXplOiBudW1iZXIgPSA1ICogMTAyNCAqIDEwMjQgLy8gNU1CXG4pOiBTaW5nbGVGaWxlUmVzdWx0IHtcbiAgLy8gQ2hlY2sgZmlsZSBzaXplXG4gIGNvbnN0IGZpbGVTaXplID0gQnVmZmVyLmJ5dGVMZW5ndGgoY29udGVudCwgJ3V0ZjgnKTtcbiAgaWYgKGZpbGVTaXplID4gbWF4RmlsZVNpemUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZmlsZXM6IFtdLFxuICAgICAgdG90YWxGaWxlczogMSxcbiAgICAgIHNraXBwZWRGaWxlczogMVxuICAgIH07XG4gIH1cblxuICAvLyBDcmVhdGUgZXh0cmFjdGVkIGZpbGUgb2JqZWN0XG4gIGNvbnN0IGV4dHJhY3RlZEZpbGU6IEV4dHJhY3RlZEZpbGUgPSB7XG4gICAgcGF0aDogZmlsZVBhdGgsXG4gICAgY29udGVudDogY29udGVudCxcbiAgICBzaXplOiBmaWxlU2l6ZVxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgZmlsZXM6IFtleHRyYWN0ZWRGaWxlXSxcbiAgICB0b3RhbEZpbGVzOiAxLFxuICAgIHNraXBwZWRGaWxlczogMFxuICB9O1xufVxuXG4vKipcbiAqIERldGVjdCBmaWxlIHR5cGUgZnJvbSBleHRlbnNpb25cbiAqIEBwYXJhbSBmaWxlbmFtZSBGaWxlIG5hbWVcbiAqIEByZXR1cm5zIEZpbGUgdHlwZSBjYXRlZ29yeVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGV0ZWN0RmlsZVR5cGUoZmlsZW5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IGV4dCA9IGZpbGVuYW1lLnNwbGl0KCcuJykucG9wKCk/LnRvTG93ZXJDYXNlKCk7XG4gIFxuICBjb25zdCB0eXBlTWFwOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xuICAgIC8vIFdlYiBmaWxlc1xuICAgICdqcyc6ICdqYXZhc2NyaXB0JyxcbiAgICAnanN4JzogJ2phdmFzY3JpcHQnLFxuICAgICd0cyc6ICd0eXBlc2NyaXB0JyxcbiAgICAndHN4JzogJ3R5cGVzY3JpcHQnLFxuICAgICdodG1sJzogJ2h0bWwnLFxuICAgICdodG0nOiAnaHRtbCcsXG4gICAgJ2Nzcyc6ICdjc3MnLFxuICAgICdzY3NzJzogJ2NzcycsXG4gICAgJ3Nhc3MnOiAnY3NzJyxcbiAgICAnbGVzcyc6ICdjc3MnLFxuICAgIFxuICAgIC8vIFB5dGhvblxuICAgICdweSc6ICdweXRob24nLFxuICAgICdweXcnOiAncHl0aG9uJyxcbiAgICBcbiAgICAvLyBKYXZhXG4gICAgJ2phdmEnOiAnamF2YScsXG4gICAgJ2t0JzogJ2tvdGxpbicsXG4gICAgJ3NjYWxhJzogJ3NjYWxhJyxcbiAgICBcbiAgICAvLyBDL0MrK1xuICAgICdjJzogJ2MnLFxuICAgICdjcHAnOiAnY3BwJyxcbiAgICAnY2MnOiAnY3BwJyxcbiAgICAnY3h4JzogJ2NwcCcsXG4gICAgJ2gnOiAnYycsXG4gICAgJ2hwcCc6ICdjcHAnLFxuICAgIFxuICAgIC8vIEMjXG4gICAgJ2NzJzogJ2NzaGFycCcsXG4gICAgJ2ZzJzogJ2ZzaGFycCcsXG4gICAgJ3ZiJzogJ3ZibmV0JyxcbiAgICBcbiAgICAvLyBHb1xuICAgICdnbyc6ICdnbycsXG4gICAgXG4gICAgLy8gUnVzdFxuICAgICdycyc6ICdydXN0JyxcbiAgICBcbiAgICAvLyBQSFBcbiAgICAncGhwJzogJ3BocCcsXG4gICAgXG4gICAgLy8gUnVieVxuICAgICdyYic6ICdydWJ5JyxcbiAgICBcbiAgICAvLyBTd2lmdFxuICAgICdzd2lmdCc6ICdzd2lmdCcsXG4gICAgXG4gICAgLy8gQ29uZmlndXJhdGlvbiBmaWxlc1xuICAgICdqc29uJzogJ2pzb24nLFxuICAgICd5YW1sJzogJ3lhbWwnLFxuICAgICd5bWwnOiAneWFtbCcsXG4gICAgJ3htbCc6ICd4bWwnLFxuICAgICd0b21sJzogJ3RvbWwnLFxuICAgICdpbmknOiAnaW5pJyxcbiAgICAnY2ZnJzogJ2NvbmZpZycsXG4gICAgJ2NvbmYnOiAnY29uZmlnJyxcbiAgICBcbiAgICAvLyBEb2N1bWVudGF0aW9uXG4gICAgJ21kJzogJ21hcmtkb3duJyxcbiAgICAndHh0JzogJ3RleHQnLFxuICAgICdyc3QnOiAncmVzdHJ1Y3R1cmVkdGV4dCcsXG4gICAgXG4gICAgLy8gU2hlbGwgc2NyaXB0c1xuICAgICdzaCc6ICdzaGVsbCcsXG4gICAgJ2Jhc2gnOiAnc2hlbGwnLFxuICAgICd6c2gnOiAnc2hlbGwnLFxuICAgICdmaXNoJzogJ3NoZWxsJyxcbiAgICAncHMxJzogJ3Bvd2Vyc2hlbGwnLFxuICAgICdiYXQnOiAnYmF0Y2gnLFxuICAgICdjbWQnOiAnYmF0Y2gnLFxuICAgIFxuICAgIC8vIFNRTFxuICAgICdzcWwnOiAnc3FsJyxcbiAgICBcbiAgICAvLyBEb2NrZXJcbiAgICAnZG9ja2VyZmlsZSc6ICdkb2NrZXJmaWxlJyxcbiAgICAnZG9ja2VyaWdub3JlJzogJ2RvY2tlcmlnbm9yZScsXG4gICAgXG4gICAgLy8gR2l0XG4gICAgJ2dpdGlnbm9yZSc6ICdnaXRpZ25vcmUnLFxuICAgICdnaXRhdHRyaWJ1dGVzJzogJ2dpdGF0dHJpYnV0ZXMnLFxuICAgIFxuICAgIC8vIFBhY2thZ2UgbWFuYWdlcnNcbiAgICAncGFja2FnZS5qc29uJzogJ3BhY2thZ2UuanNvbicsXG4gICAgJ3JlcXVpcmVtZW50cy50eHQnOiAncmVxdWlyZW1lbnRzLnR4dCcsXG4gICAgJ3BvbS54bWwnOiAncG9tLnhtbCcsXG4gICAgJ2J1aWxkLmdyYWRsZSc6ICdncmFkbGUnLFxuICAgICdnby5tb2QnOiAnZ28ubW9kJyxcbiAgICAnY2FyZ28udG9tbCc6ICdjYXJnby50b21sJyxcbiAgICAnY29tcG9zZXIuanNvbic6ICdjb21wb3Nlci5qc29uJyxcbiAgICAnZ2VtZmlsZSc6ICdnZW1maWxlJyxcbiAgICAncG9kZmlsZSc6ICdwb2RmaWxlJyxcbiAgICAncHVic3BlYy55YW1sJzogJ3B1YnNwZWMueWFtbCdcbiAgfTtcblxuICByZXR1cm4gdHlwZU1hcFtleHQgfHwgJyddIHx8ICd1bmtub3duJztcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBmaWxlIHNob3VsZCBiZSBhbmFseXplZFxuICogQHBhcmFtIGZpbGVuYW1lIEZpbGUgbmFtZVxuICogQHJldHVybnMgV2hldGhlciBmaWxlIHNob3VsZCBiZSBhbmFseXplZFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkQW5hbHl6ZUZpbGUoZmlsZW5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICBjb25zdCBleHQgPSBmaWxlbmFtZS5zcGxpdCgnLicpLnBvcCgpPy50b0xvd2VyQ2FzZSgpO1xuICBcbiAgLy8gT25seSBhbGxvdyB3ZWIgZmlsZSB0eXBlc1xuICBjb25zdCBhbGxvd2VkRXh0ZW5zaW9ucyA9IFtcbiAgICAnaHRtbCcsICdodG0nLCAgICAgICAgICAgLy8gSFRNTCBmaWxlc1xuICAgICdqcycsICdtanMnLCAndHMnLCAgICAgICAvLyBKYXZhU2NyaXB0L1R5cGVTY3JpcHQgZmlsZXNcbiAgICAnanNvbicsICAgICAgICAgICAgICAgICAgLy8gSlNPTiBmaWxlc1xuICAgICd3ZWJtYW5pZmVzdCcsICAgICAgICAgICAvLyBXZWIgbWFuaWZlc3QgZmlsZXNcbiAgICAnd2FzbScgICAgICAgICAgICAgICAgICAgLy8gV2ViQXNzZW1ibHkgZmlsZXNcbiAgXTtcbiAgXG4gIHJldHVybiBhbGxvd2VkRXh0ZW5zaW9ucy5pbmNsdWRlcyhleHQgfHwgJycpO1xufVxuIl0sIm5hbWVzIjpbInByb2Nlc3NTaW5nbGVGaWxlIiwiZmlsZVBhdGgiLCJjb250ZW50IiwibWF4RmlsZVNpemUiLCJmaWxlU2l6ZSIsIkJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJmaWxlcyIsInRvdGFsRmlsZXMiLCJza2lwcGVkRmlsZXMiLCJleHRyYWN0ZWRGaWxlIiwicGF0aCIsInNpemUiLCJkZXRlY3RGaWxlVHlwZSIsImZpbGVuYW1lIiwiZXh0Iiwic3BsaXQiLCJwb3AiLCJ0b0xvd2VyQ2FzZSIsInR5cGVNYXAiLCJzaG91bGRBbmFseXplRmlsZSIsImFsbG93ZWRFeHRlbnNpb25zIiwiaW5jbHVkZXMiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/files/single-file.ts\n");

/***/ }),

/***/ "(rsc)/./lib/files/store.ts":
/*!****************************!*\
  !*** ./lib/files/store.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analysisExists: () => (/* binding */ analysisExists),\n/* harmony export */   getStoredAnalysis: () => (/* binding */ getStoredAnalysis),\n/* harmony export */   storeAnalysisResults: () => (/* binding */ storeAnalysisResults)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var papaparse__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! papaparse */ \"(rsc)/./node_modules/papaparse/papaparse.js\");\n/* harmony import */ var papaparse__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(papaparse__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n/**\r\n * Store analysis results and return public URLs\r\n * @param report Analysis report\r\n * @param options Storage options\r\n * @returns Stored artifacts with public URLs\r\n */ function storeAnalysisResults(report, options = {}) {\n    const analysisId = (0,crypto__WEBPACK_IMPORTED_MODULE_2__.randomUUID)();\n    // On local development, store files on disk\n    if (!process.env.VERCEL) {\n        const { baseDir = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(process.cwd(), 'tmp', 'analysis'), publicUrl = 'http://localhost:3000', ttl = 24 * 60 * 60 * 1000 } = options;\n        // Ensure base directory exists\n        if (!(0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(baseDir)) {\n            (0,fs__WEBPACK_IMPORTED_MODULE_0__.mkdirSync)(baseDir, {\n                recursive: true\n            });\n        }\n        // Create analysis directory\n        const analysisDir = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(baseDir, analysisId);\n        if (!(0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(analysisDir)) {\n            (0,fs__WEBPACK_IMPORTED_MODULE_0__.mkdirSync)(analysisDir, {\n                recursive: true\n            });\n        }\n        // Store JSON report\n        const jsonPath = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(analysisDir, 'report.json');\n        (0,fs__WEBPACK_IMPORTED_MODULE_0__.writeFileSync)(jsonPath, JSON.stringify(report, null, 2));\n        // Store CSV report\n        const csvPath = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(analysisDir, 'report.csv');\n        const csvContent = generateCSV(report);\n        (0,fs__WEBPACK_IMPORTED_MODULE_0__.writeFileSync)(csvPath, csvContent);\n        // Schedule cleanup\n        scheduleCleanup(analysisDir, ttl);\n        return {\n            jsonUrl: `${publicUrl}/api/analyze/${analysisId}?format=json`,\n            csvUrl: `${publicUrl}/api/analyze/${analysisId}?format=csv`,\n            analysisId\n        };\n    }\n    // On Vercel, return in-memory URLs (no file storage)\n    const publicUrl = process.env.VERCEL_URL ? `https://${process.env.VERCEL_URL}` : 'https://your-app.vercel.app';\n    return {\n        jsonUrl: `${publicUrl}/api/analyze/${analysisId}?format=json`,\n        csvUrl: `${publicUrl}/api/analyze/${analysisId}?format=csv`,\n        analysisId\n    };\n}\n/**\r\n * Generate CSV content from report\r\n * @param report Analysis report\r\n * @returns CSV content\r\n */ function generateCSV(report) {\n    const rows = [];\n    // Add findings\n    for (const finding of report.findings){\n        if (finding.kind === 'dependency') {\n            rows.push({\n                Kind: 'Dependency',\n                Language: finding.lang,\n                Component: finding.component,\n                'Found Version': finding.foundVersion || '',\n                'Required Version': finding.baselineRequired || '',\n                Status: finding.status,\n                Reason: finding.reason,\n                File: finding.file,\n                Line: '',\n                'Quick Fix': finding.quickFix || ''\n            });\n        } else {\n            rows.push({\n                Kind: 'Pattern',\n                Language: finding.lang,\n                Component: '',\n                'Found Version': '',\n                Status: finding.status,\n                Reason: finding.issue,\n                File: finding.file,\n                Line: finding.line.toString(),\n                'Quick Fix': finding.quickFix || '',\n                'Required Version': ''\n            });\n        }\n    }\n    return papaparse__WEBPACK_IMPORTED_MODULE_3___default().unparse(rows);\n}\n/**\r\n * Schedule cleanup of analysis files\r\n * @param analysisDir Analysis directory path\r\n * @param ttl Time to live in milliseconds\r\n */ function scheduleCleanup(analysisDir, ttl) {\n    setTimeout(async ()=>{\n        try {\n            if ((0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(analysisDir)) {\n                // Remove directory and all contents\n                const { rmSync } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 23));\n                rmSync(analysisDir, {\n                    recursive: true,\n                    force: true\n                });\n            }\n        } catch (error) {\n            console.warn(`Failed to cleanup analysis directory ${analysisDir}: ${error}`);\n        }\n    }, ttl);\n}\n/**\r\n * Get stored analysis report\r\n * @param analysisId Analysis ID\r\n * @param format Format (json or csv)\r\n * @param baseDir Base directory for storage\r\n * @returns Report content or null if not found\r\n */ async function getStoredAnalysis(analysisId, format = 'json', baseDir = process.env.VERCEL ? '/tmp/analysis' : (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(process.cwd(), 'tmp', 'analysis')) {\n    // On Vercel, files are not stored persistently\n    if (process.env.VERCEL) {\n        console.log('File storage not available on Vercel:', analysisId);\n        return null;\n    }\n    try {\n        const analysisDir = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(baseDir, analysisId);\n        const filePath = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(analysisDir, `report.${format}`);\n        if (!(0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(filePath)) {\n            return null;\n        }\n        const { readFileSync } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! fs */ \"fs\", 23));\n        const content = readFileSync(filePath, 'utf8');\n        return content;\n    } catch (error) {\n        console.warn(`Failed to read stored analysis ${analysisId}: ${error}`);\n        return null;\n    }\n}\n/**\r\n * Check if analysis exists\r\n * @param analysisId Analysis ID\r\n * @param baseDir Base directory for storage\r\n * @returns True if analysis exists\r\n */ function analysisExists(analysisId, baseDir = process.env.VERCEL ? '/tmp/analysis' : (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(process.cwd(), 'tmp', 'analysis')) {\n    // On Vercel, files are not stored persistently\n    if (process.env.VERCEL) {\n        console.log('File existence check not available on Vercel:', analysisId);\n        return false;\n    }\n    const analysisDir = (0,path__WEBPACK_IMPORTED_MODULE_1__.join)(baseDir, analysisId);\n    return (0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(analysisDir);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvZmlsZXMvc3RvcmUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBMEQ7QUFDOUI7QUFDUTtBQUNQO0FBZTdCOzs7OztDQUtDLEdBQ00sU0FBU00scUJBQ2RDLE1BQWMsRUFDZEMsVUFBMEIsQ0FBQyxDQUFDO0lBRTVCLE1BQU1DLGFBQWFMLGtEQUFVQTtJQUU3Qiw0Q0FBNEM7SUFDNUMsSUFBSSxDQUFDTSxRQUFRQyxHQUFHLENBQUNDLE1BQU0sRUFBRTtRQUN2QixNQUFNLEVBQ0pDLFVBQVVWLDBDQUFJQSxDQUFDTyxRQUFRSSxHQUFHLElBQUksT0FBTyxXQUFXLEVBQ2hEQyxZQUFZLHVCQUF1QixFQUNuQ0MsTUFBTSxLQUFLLEtBQUssS0FBSyxJQUFJLEVBQzFCLEdBQUdSO1FBRUosK0JBQStCO1FBQy9CLElBQUksQ0FBQ04sOENBQVVBLENBQUNXLFVBQVU7WUFDeEJaLDZDQUFTQSxDQUFDWSxTQUFTO2dCQUFFSSxXQUFXO1lBQUs7UUFDdkM7UUFFQSw0QkFBNEI7UUFDNUIsTUFBTUMsY0FBY2YsMENBQUlBLENBQUNVLFNBQVNKO1FBQ2xDLElBQUksQ0FBQ1AsOENBQVVBLENBQUNnQixjQUFjO1lBQzVCakIsNkNBQVNBLENBQUNpQixhQUFhO2dCQUFFRCxXQUFXO1lBQUs7UUFDM0M7UUFFQSxvQkFBb0I7UUFDcEIsTUFBTUUsV0FBV2hCLDBDQUFJQSxDQUFDZSxhQUFhO1FBQ25DbEIsaURBQWFBLENBQUNtQixVQUFVQyxLQUFLQyxTQUFTLENBQUNkLFFBQVEsTUFBTTtRQUVyRCxtQkFBbUI7UUFDbkIsTUFBTWUsVUFBVW5CLDBDQUFJQSxDQUFDZSxhQUFhO1FBQ2xDLE1BQU1LLGFBQWFDLFlBQVlqQjtRQUMvQlAsaURBQWFBLENBQUNzQixTQUFTQztRQUV2QixtQkFBbUI7UUFDbkJFLGdCQUFnQlAsYUFBYUY7UUFFN0IsT0FBTztZQUNMVSxTQUFTLEdBQUdYLFVBQVUsYUFBYSxFQUFFTixXQUFXLFlBQVksQ0FBQztZQUM3RGtCLFFBQVEsR0FBR1osVUFBVSxhQUFhLEVBQUVOLFdBQVcsV0FBVyxDQUFDO1lBQzNEQTtRQUNGO0lBQ0Y7SUFFQSxxREFBcUQ7SUFDckQsTUFBTU0sWUFBWUwsUUFBUUMsR0FBRyxDQUFDaUIsVUFBVSxHQUFHLENBQUMsUUFBUSxFQUFFbEIsUUFBUUMsR0FBRyxDQUFDaUIsVUFBVSxFQUFFLEdBQUc7SUFDakYsT0FBTztRQUNMRixTQUFTLEdBQUdYLFVBQVUsYUFBYSxFQUFFTixXQUFXLFlBQVksQ0FBQztRQUM3RGtCLFFBQVEsR0FBR1osVUFBVSxhQUFhLEVBQUVOLFdBQVcsV0FBVyxDQUFDO1FBQzNEQTtJQUNGO0FBQ0Y7QUFFQTs7OztDQUlDLEdBQ0QsU0FBU2UsWUFBWWpCLE1BQWM7SUFDakMsTUFBTXNCLE9BQWlCLEVBQUU7SUFFekIsZUFBZTtJQUNmLEtBQUssTUFBTUMsV0FBV3ZCLE9BQU93QixRQUFRLENBQUU7UUFDckMsSUFBSUQsUUFBUUUsSUFBSSxLQUFLLGNBQWM7WUFDakNILEtBQUtJLElBQUksQ0FBQztnQkFDUkMsTUFBTTtnQkFDTkMsVUFBVUwsUUFBUU0sSUFBSTtnQkFDdEJDLFdBQVdQLFFBQVFRLFNBQVM7Z0JBQzVCLGlCQUFpQlIsUUFBUVMsWUFBWSxJQUFJO2dCQUN6QyxvQkFBb0JULFFBQVFVLGdCQUFnQixJQUFJO2dCQUNoREMsUUFBUVgsUUFBUVksTUFBTTtnQkFDdEJDLFFBQVFiLFFBQVFjLE1BQU07Z0JBQ3RCQyxNQUFNZixRQUFRZ0IsSUFBSTtnQkFDbEJDLE1BQU07Z0JBQ04sYUFBYWpCLFFBQVFrQixRQUFRLElBQUk7WUFDbkM7UUFDRixPQUFPO1lBQ0xuQixLQUFLSSxJQUFJLENBQUM7Z0JBQ1JDLE1BQU07Z0JBQ05DLFVBQVVMLFFBQVFNLElBQUk7Z0JBQ3RCQyxXQUFXO2dCQUNYLGlCQUFpQjtnQkFDakJJLFFBQVFYLFFBQVFZLE1BQU07Z0JBQ3RCQyxRQUFRYixRQUFRbUIsS0FBSztnQkFDckJKLE1BQU1mLFFBQVFnQixJQUFJO2dCQUNsQkMsTUFBTWpCLFFBQVFvQixJQUFJLENBQUNDLFFBQVE7Z0JBQzNCLGFBQWFyQixRQUFRa0IsUUFBUSxJQUFJO2dCQUNqQyxvQkFBb0I7WUFDdEI7UUFDRjtJQUNGO0lBRUEsT0FBTzNDLHdEQUFZLENBQUN3QjtBQUN0QjtBQUVBOzs7O0NBSUMsR0FDRCxTQUFTSixnQkFBZ0JQLFdBQW1CLEVBQUVGLEdBQVc7SUFDdkRxQyxXQUFXO1FBQ1QsSUFBSTtZQUNGLElBQUluRCw4Q0FBVUEsQ0FBQ2dCLGNBQWM7Z0JBQzNCLG9DQUFvQztnQkFDcEMsTUFBTSxFQUFFb0MsTUFBTSxFQUFFLEdBQUcsTUFBTSwwR0FBWTtnQkFDckNBLE9BQU9wQyxhQUFhO29CQUFFRCxXQUFXO29CQUFNc0MsT0FBTztnQkFBSztZQUNyRDtRQUNGLEVBQUUsT0FBT0MsT0FBTztZQUNkQyxRQUFRQyxJQUFJLENBQUMsQ0FBQyxxQ0FBcUMsRUFBRXhDLFlBQVksRUFBRSxFQUFFc0MsT0FBTztRQUM5RTtJQUNGLEdBQUd4QztBQUNMO0FBRUE7Ozs7OztDQU1DLEdBQ00sZUFBZTJDLGtCQUNwQmxELFVBQWtCLEVBQ2xCbUQsU0FBeUIsTUFBTSxFQUMvQi9DLFVBQWtCSCxRQUFRQyxHQUFHLENBQUNDLE1BQU0sR0FBRyxrQkFBa0JULDBDQUFJQSxDQUFDTyxRQUFRSSxHQUFHLElBQUksT0FBTyxXQUFXO0lBRS9GLCtDQUErQztJQUMvQyxJQUFJSixRQUFRQyxHQUFHLENBQUNDLE1BQU0sRUFBRTtRQUN0QjZDLFFBQVFJLEdBQUcsQ0FBQyx5Q0FBeUNwRDtRQUNyRCxPQUFPO0lBQ1Q7SUFFQSxJQUFJO1FBQ0YsTUFBTVMsY0FBY2YsMENBQUlBLENBQUNVLFNBQVNKO1FBQ2xDLE1BQU1xRCxXQUFXM0QsMENBQUlBLENBQUNlLGFBQWEsQ0FBQyxPQUFPLEVBQUUwQyxRQUFRO1FBRXJELElBQUksQ0FBQzFELDhDQUFVQSxDQUFDNEQsV0FBVztZQUN6QixPQUFPO1FBQ1Q7UUFFQSxNQUFNLEVBQUVDLFlBQVksRUFBRSxHQUFHLE1BQU0sMEdBQVk7UUFDM0MsTUFBTUMsVUFBVUQsYUFBYUQsVUFBVTtRQUN2QyxPQUFPRTtJQUNULEVBQUUsT0FBT1IsT0FBTztRQUNkQyxRQUFRQyxJQUFJLENBQUMsQ0FBQywrQkFBK0IsRUFBRWpELFdBQVcsRUFBRSxFQUFFK0MsT0FBTztRQUNyRSxPQUFPO0lBQ1Q7QUFDRjtBQUVBOzs7OztDQUtDLEdBQ00sU0FBU1MsZUFDZHhELFVBQWtCLEVBQ2xCSSxVQUFrQkgsUUFBUUMsR0FBRyxDQUFDQyxNQUFNLEdBQUcsa0JBQWtCVCwwQ0FBSUEsQ0FBQ08sUUFBUUksR0FBRyxJQUFJLE9BQU8sV0FBVztJQUUvRiwrQ0FBK0M7SUFDL0MsSUFBSUosUUFBUUMsR0FBRyxDQUFDQyxNQUFNLEVBQUU7UUFDdEI2QyxRQUFRSSxHQUFHLENBQUMsaURBQWlEcEQ7UUFDN0QsT0FBTztJQUNUO0lBRUEsTUFBTVMsY0FBY2YsMENBQUlBLENBQUNVLFNBQVNKO0lBQ2xDLE9BQU9QLDhDQUFVQSxDQUFDZ0I7QUFDcEIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcQ2toYWRhclxcRG93bmxvYWRzXFxBSV9CYXNlbGluZV9NYXBcXGxpYlxcZmlsZXNcXHN0b3JlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHdyaXRlRmlsZVN5bmMsIG1rZGlyU3luYywgZXhpc3RzU3luYyB9IGZyb20gJ2ZzJztcclxuaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnO1xyXG5pbXBvcnQgeyByYW5kb21VVUlEIH0gZnJvbSAnY3J5cHRvJztcclxuaW1wb3J0IFBhcGEgZnJvbSAncGFwYXBhcnNlJztcclxuaW1wb3J0IHsgUmVwb3J0LCBDU1ZSb3cgfSBmcm9tICcuLi9hbmFseXNpcy9iYXNlbGluZS50eXBlcyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFN0b3JlZEFydGlmYWN0cyB7XHJcbiAganNvblVybDogc3RyaW5nO1xyXG4gIGNzdlVybDogc3RyaW5nO1xyXG4gIGFuYWx5c2lzSWQ6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTdG9yYWdlT3B0aW9ucyB7XHJcbiAgYmFzZURpcj86IHN0cmluZztcclxuICBwdWJsaWNVcmw/OiBzdHJpbmc7XHJcbiAgdHRsPzogbnVtYmVyOyAvLyBUaW1lIHRvIGxpdmUgaW4gbWlsbGlzZWNvbmRzXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTdG9yZSBhbmFseXNpcyByZXN1bHRzIGFuZCByZXR1cm4gcHVibGljIFVSTHNcclxuICogQHBhcmFtIHJlcG9ydCBBbmFseXNpcyByZXBvcnRcclxuICogQHBhcmFtIG9wdGlvbnMgU3RvcmFnZSBvcHRpb25zXHJcbiAqIEByZXR1cm5zIFN0b3JlZCBhcnRpZmFjdHMgd2l0aCBwdWJsaWMgVVJMc1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHN0b3JlQW5hbHlzaXNSZXN1bHRzKFxyXG4gIHJlcG9ydDogUmVwb3J0LFxyXG4gIG9wdGlvbnM6IFN0b3JhZ2VPcHRpb25zID0ge31cclxuKTogU3RvcmVkQXJ0aWZhY3RzIHtcclxuICBjb25zdCBhbmFseXNpc0lkID0gcmFuZG9tVVVJRCgpO1xyXG4gIFxyXG4gIC8vIE9uIGxvY2FsIGRldmVsb3BtZW50LCBzdG9yZSBmaWxlcyBvbiBkaXNrXHJcbiAgaWYgKCFwcm9jZXNzLmVudi5WRVJDRUwpIHtcclxuICAgIGNvbnN0IHtcclxuICAgICAgYmFzZURpciA9IGpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3RtcCcsICdhbmFseXNpcycpLFxyXG4gICAgICBwdWJsaWNVcmwgPSAnaHR0cDovL2xvY2FsaG9zdDozMDAwJyxcclxuICAgICAgdHRsID0gMjQgKiA2MCAqIDYwICogMTAwMCwgLy8gMjQgaG91cnNcclxuICAgIH0gPSBvcHRpb25zO1xyXG5cclxuICAgIC8vIEVuc3VyZSBiYXNlIGRpcmVjdG9yeSBleGlzdHNcclxuICAgIGlmICghZXhpc3RzU3luYyhiYXNlRGlyKSkge1xyXG4gICAgICBta2RpclN5bmMoYmFzZURpciwgeyByZWN1cnNpdmU6IHRydWUgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ3JlYXRlIGFuYWx5c2lzIGRpcmVjdG9yeVxyXG4gICAgY29uc3QgYW5hbHlzaXNEaXIgPSBqb2luKGJhc2VEaXIsIGFuYWx5c2lzSWQpO1xyXG4gICAgaWYgKCFleGlzdHNTeW5jKGFuYWx5c2lzRGlyKSkge1xyXG4gICAgICBta2RpclN5bmMoYW5hbHlzaXNEaXIsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFN0b3JlIEpTT04gcmVwb3J0XHJcbiAgICBjb25zdCBqc29uUGF0aCA9IGpvaW4oYW5hbHlzaXNEaXIsICdyZXBvcnQuanNvbicpO1xyXG4gICAgd3JpdGVGaWxlU3luYyhqc29uUGF0aCwgSlNPTi5zdHJpbmdpZnkocmVwb3J0LCBudWxsLCAyKSk7XHJcblxyXG4gICAgLy8gU3RvcmUgQ1NWIHJlcG9ydFxyXG4gICAgY29uc3QgY3N2UGF0aCA9IGpvaW4oYW5hbHlzaXNEaXIsICdyZXBvcnQuY3N2Jyk7XHJcbiAgICBjb25zdCBjc3ZDb250ZW50ID0gZ2VuZXJhdGVDU1YocmVwb3J0KTtcclxuICAgIHdyaXRlRmlsZVN5bmMoY3N2UGF0aCwgY3N2Q29udGVudCk7XHJcblxyXG4gICAgLy8gU2NoZWR1bGUgY2xlYW51cFxyXG4gICAgc2NoZWR1bGVDbGVhbnVwKGFuYWx5c2lzRGlyLCB0dGwpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGpzb25Vcmw6IGAke3B1YmxpY1VybH0vYXBpL2FuYWx5emUvJHthbmFseXNpc0lkfT9mb3JtYXQ9anNvbmAsXHJcbiAgICAgIGNzdlVybDogYCR7cHVibGljVXJsfS9hcGkvYW5hbHl6ZS8ke2FuYWx5c2lzSWR9P2Zvcm1hdD1jc3ZgLFxyXG4gICAgICBhbmFseXNpc0lkLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8vIE9uIFZlcmNlbCwgcmV0dXJuIGluLW1lbW9yeSBVUkxzIChubyBmaWxlIHN0b3JhZ2UpXHJcbiAgY29uc3QgcHVibGljVXJsID0gcHJvY2Vzcy5lbnYuVkVSQ0VMX1VSTCA/IGBodHRwczovLyR7cHJvY2Vzcy5lbnYuVkVSQ0VMX1VSTH1gIDogJ2h0dHBzOi8veW91ci1hcHAudmVyY2VsLmFwcCc7XHJcbiAgcmV0dXJuIHtcclxuICAgIGpzb25Vcmw6IGAke3B1YmxpY1VybH0vYXBpL2FuYWx5emUvJHthbmFseXNpc0lkfT9mb3JtYXQ9anNvbmAsXHJcbiAgICBjc3ZVcmw6IGAke3B1YmxpY1VybH0vYXBpL2FuYWx5emUvJHthbmFseXNpc0lkfT9mb3JtYXQ9Y3N2YCxcclxuICAgIGFuYWx5c2lzSWQsXHJcbiAgfTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdlbmVyYXRlIENTViBjb250ZW50IGZyb20gcmVwb3J0XHJcbiAqIEBwYXJhbSByZXBvcnQgQW5hbHlzaXMgcmVwb3J0XHJcbiAqIEByZXR1cm5zIENTViBjb250ZW50XHJcbiAqL1xyXG5mdW5jdGlvbiBnZW5lcmF0ZUNTVihyZXBvcnQ6IFJlcG9ydCk6IHN0cmluZyB7XHJcbiAgY29uc3Qgcm93czogQ1NWUm93W10gPSBbXTtcclxuXHJcbiAgLy8gQWRkIGZpbmRpbmdzXHJcbiAgZm9yIChjb25zdCBmaW5kaW5nIG9mIHJlcG9ydC5maW5kaW5ncykge1xyXG4gICAgaWYgKGZpbmRpbmcua2luZCA9PT0gJ2RlcGVuZGVuY3knKSB7XHJcbiAgICAgIHJvd3MucHVzaCh7XHJcbiAgICAgICAgS2luZDogJ0RlcGVuZGVuY3knLFxyXG4gICAgICAgIExhbmd1YWdlOiBmaW5kaW5nLmxhbmcsXHJcbiAgICAgICAgQ29tcG9uZW50OiBmaW5kaW5nLmNvbXBvbmVudCxcclxuICAgICAgICAnRm91bmQgVmVyc2lvbic6IGZpbmRpbmcuZm91bmRWZXJzaW9uIHx8ICcnLFxyXG4gICAgICAgICdSZXF1aXJlZCBWZXJzaW9uJzogZmluZGluZy5iYXNlbGluZVJlcXVpcmVkIHx8ICcnLFxyXG4gICAgICAgIFN0YXR1czogZmluZGluZy5zdGF0dXMsXHJcbiAgICAgICAgUmVhc29uOiBmaW5kaW5nLnJlYXNvbixcclxuICAgICAgICBGaWxlOiBmaW5kaW5nLmZpbGUsXHJcbiAgICAgICAgTGluZTogJycsXHJcbiAgICAgICAgJ1F1aWNrIEZpeCc6IGZpbmRpbmcucXVpY2tGaXggfHwgJycsXHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcm93cy5wdXNoKHtcclxuICAgICAgICBLaW5kOiAnUGF0dGVybicsXHJcbiAgICAgICAgTGFuZ3VhZ2U6IGZpbmRpbmcubGFuZyxcclxuICAgICAgICBDb21wb25lbnQ6ICcnLFxyXG4gICAgICAgICdGb3VuZCBWZXJzaW9uJzogJycsXHJcbiAgICAgICAgU3RhdHVzOiBmaW5kaW5nLnN0YXR1cyxcclxuICAgICAgICBSZWFzb246IGZpbmRpbmcuaXNzdWUsXHJcbiAgICAgICAgRmlsZTogZmluZGluZy5maWxlLFxyXG4gICAgICAgIExpbmU6IGZpbmRpbmcubGluZS50b1N0cmluZygpLFxyXG4gICAgICAgICdRdWljayBGaXgnOiBmaW5kaW5nLnF1aWNrRml4IHx8ICcnLFxyXG4gICAgICAgICdSZXF1aXJlZCBWZXJzaW9uJzogJycsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIFBhcGEudW5wYXJzZShyb3dzKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNjaGVkdWxlIGNsZWFudXAgb2YgYW5hbHlzaXMgZmlsZXNcclxuICogQHBhcmFtIGFuYWx5c2lzRGlyIEFuYWx5c2lzIGRpcmVjdG9yeSBwYXRoXHJcbiAqIEBwYXJhbSB0dGwgVGltZSB0byBsaXZlIGluIG1pbGxpc2Vjb25kc1xyXG4gKi9cclxuZnVuY3Rpb24gc2NoZWR1bGVDbGVhbnVwKGFuYWx5c2lzRGlyOiBzdHJpbmcsIHR0bDogbnVtYmVyKTogdm9pZCB7XHJcbiAgc2V0VGltZW91dChhc3luYyAoKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBpZiAoZXhpc3RzU3luYyhhbmFseXNpc0RpcikpIHtcclxuICAgICAgICAvLyBSZW1vdmUgZGlyZWN0b3J5IGFuZCBhbGwgY29udGVudHNcclxuICAgICAgICBjb25zdCB7IHJtU3luYyB9ID0gYXdhaXQgaW1wb3J0KCdmcycpO1xyXG4gICAgICAgIHJtU3luYyhhbmFseXNpc0RpciwgeyByZWN1cnNpdmU6IHRydWUsIGZvcmNlOiB0cnVlIH0pO1xyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLndhcm4oYEZhaWxlZCB0byBjbGVhbnVwIGFuYWx5c2lzIGRpcmVjdG9yeSAke2FuYWx5c2lzRGlyfTogJHtlcnJvcn1gKTtcclxuICAgIH1cclxuICB9LCB0dGwpO1xyXG59XHJcblxyXG4vKipcclxuICogR2V0IHN0b3JlZCBhbmFseXNpcyByZXBvcnRcclxuICogQHBhcmFtIGFuYWx5c2lzSWQgQW5hbHlzaXMgSURcclxuICogQHBhcmFtIGZvcm1hdCBGb3JtYXQgKGpzb24gb3IgY3N2KVxyXG4gKiBAcGFyYW0gYmFzZURpciBCYXNlIGRpcmVjdG9yeSBmb3Igc3RvcmFnZVxyXG4gKiBAcmV0dXJucyBSZXBvcnQgY29udGVudCBvciBudWxsIGlmIG5vdCBmb3VuZFxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFN0b3JlZEFuYWx5c2lzKFxyXG4gIGFuYWx5c2lzSWQ6IHN0cmluZyxcclxuICBmb3JtYXQ6ICdqc29uJyB8ICdjc3YnID0gJ2pzb24nLFxyXG4gIGJhc2VEaXI6IHN0cmluZyA9IHByb2Nlc3MuZW52LlZFUkNFTCA/ICcvdG1wL2FuYWx5c2lzJyA6IGpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3RtcCcsICdhbmFseXNpcycpXHJcbik6IFByb21pc2U8c3RyaW5nIHwgbnVsbD4ge1xyXG4gIC8vIE9uIFZlcmNlbCwgZmlsZXMgYXJlIG5vdCBzdG9yZWQgcGVyc2lzdGVudGx5XHJcbiAgaWYgKHByb2Nlc3MuZW52LlZFUkNFTCkge1xyXG4gICAgY29uc29sZS5sb2coJ0ZpbGUgc3RvcmFnZSBub3QgYXZhaWxhYmxlIG9uIFZlcmNlbDonLCBhbmFseXNpc0lkKTtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGFuYWx5c2lzRGlyID0gam9pbihiYXNlRGlyLCBhbmFseXNpc0lkKTtcclxuICAgIGNvbnN0IGZpbGVQYXRoID0gam9pbihhbmFseXNpc0RpciwgYHJlcG9ydC4ke2Zvcm1hdH1gKTtcclxuICAgIFxyXG4gICAgaWYgKCFleGlzdHNTeW5jKGZpbGVQYXRoKSkge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB7IHJlYWRGaWxlU3luYyB9ID0gYXdhaXQgaW1wb3J0KCdmcycpO1xyXG4gICAgY29uc3QgY29udGVudCA9IHJlYWRGaWxlU3luYyhmaWxlUGF0aCwgJ3V0ZjgnKTtcclxuICAgIHJldHVybiBjb250ZW50O1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLndhcm4oYEZhaWxlZCB0byByZWFkIHN0b3JlZCBhbmFseXNpcyAke2FuYWx5c2lzSWR9OiAke2Vycm9yfWApO1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgYW5hbHlzaXMgZXhpc3RzXHJcbiAqIEBwYXJhbSBhbmFseXNpc0lkIEFuYWx5c2lzIElEXHJcbiAqIEBwYXJhbSBiYXNlRGlyIEJhc2UgZGlyZWN0b3J5IGZvciBzdG9yYWdlXHJcbiAqIEByZXR1cm5zIFRydWUgaWYgYW5hbHlzaXMgZXhpc3RzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYW5hbHlzaXNFeGlzdHMoXHJcbiAgYW5hbHlzaXNJZDogc3RyaW5nLFxyXG4gIGJhc2VEaXI6IHN0cmluZyA9IHByb2Nlc3MuZW52LlZFUkNFTCA/ICcvdG1wL2FuYWx5c2lzJyA6IGpvaW4ocHJvY2Vzcy5jd2QoKSwgJ3RtcCcsICdhbmFseXNpcycpXHJcbik6IGJvb2xlYW4ge1xyXG4gIC8vIE9uIFZlcmNlbCwgZmlsZXMgYXJlIG5vdCBzdG9yZWQgcGVyc2lzdGVudGx5XHJcbiAgaWYgKHByb2Nlc3MuZW52LlZFUkNFTCkge1xyXG4gICAgY29uc29sZS5sb2coJ0ZpbGUgZXhpc3RlbmNlIGNoZWNrIG5vdCBhdmFpbGFibGUgb24gVmVyY2VsOicsIGFuYWx5c2lzSWQpO1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgYW5hbHlzaXNEaXIgPSBqb2luKGJhc2VEaXIsIGFuYWx5c2lzSWQpO1xyXG4gIHJldHVybiBleGlzdHNTeW5jKGFuYWx5c2lzRGlyKTtcclxufSJdLCJuYW1lcyI6WyJ3cml0ZUZpbGVTeW5jIiwibWtkaXJTeW5jIiwiZXhpc3RzU3luYyIsImpvaW4iLCJyYW5kb21VVUlEIiwiUGFwYSIsInN0b3JlQW5hbHlzaXNSZXN1bHRzIiwicmVwb3J0Iiwib3B0aW9ucyIsImFuYWx5c2lzSWQiLCJwcm9jZXNzIiwiZW52IiwiVkVSQ0VMIiwiYmFzZURpciIsImN3ZCIsInB1YmxpY1VybCIsInR0bCIsInJlY3Vyc2l2ZSIsImFuYWx5c2lzRGlyIiwianNvblBhdGgiLCJKU09OIiwic3RyaW5naWZ5IiwiY3N2UGF0aCIsImNzdkNvbnRlbnQiLCJnZW5lcmF0ZUNTViIsInNjaGVkdWxlQ2xlYW51cCIsImpzb25VcmwiLCJjc3ZVcmwiLCJWRVJDRUxfVVJMIiwicm93cyIsImZpbmRpbmciLCJmaW5kaW5ncyIsImtpbmQiLCJwdXNoIiwiS2luZCIsIkxhbmd1YWdlIiwibGFuZyIsIkNvbXBvbmVudCIsImNvbXBvbmVudCIsImZvdW5kVmVyc2lvbiIsImJhc2VsaW5lUmVxdWlyZWQiLCJTdGF0dXMiLCJzdGF0dXMiLCJSZWFzb24iLCJyZWFzb24iLCJGaWxlIiwiZmlsZSIsIkxpbmUiLCJxdWlja0ZpeCIsImlzc3VlIiwibGluZSIsInRvU3RyaW5nIiwidW5wYXJzZSIsInNldFRpbWVvdXQiLCJybVN5bmMiLCJmb3JjZSIsImVycm9yIiwiY29uc29sZSIsIndhcm4iLCJnZXRTdG9yZWRBbmFseXNpcyIsImZvcm1hdCIsImxvZyIsImZpbGVQYXRoIiwicmVhZEZpbGVTeW5jIiwiY29udGVudCIsImFuYWx5c2lzRXhpc3RzIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/files/store.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=C%3A%5CUsers%5CCkhadar%5CDownloads%5CAI_Baseline_Map%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CCkhadar%5CDownloads%5CAI_Baseline_Map&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=C%3A%5CUsers%5CCkhadar%5CDownloads%5CAI_Baseline_Map%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CCkhadar%5CDownloads%5CAI_Baseline_Map&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var C_Users_Ckhadar_Downloads_AI_Baseline_Map_app_api_analyze_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./app/api/analyze/route.ts */ \"(rsc)/./app/api/analyze/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/analyze/route\",\n        pathname: \"/api/analyze\",\n        filename: \"route\",\n        bundlePath: \"app/api/analyze/route\"\n    },\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || '',\n    resolvedPagePath: \"C:\\\\Users\\\\Ckhadar\\\\Downloads\\\\AI_Baseline_Map\\\\app\\\\api\\\\analyze\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_Ckhadar_Downloads_AI_Baseline_Map_app_api_analyze_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/analyze/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = false;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        if (!(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=C%3A%5CUsers%5CCkhadar%5CDownloads%5CAI_Baseline_Map%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CCkhadar%5CDownloads%5CAI_Baseline_Map&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "process":
/*!**************************!*\
  !*** external "process" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("process");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/zod","vendor-chunks/yaml","vendor-chunks/semver","vendor-chunks/papaparse"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=C%3A%5CUsers%5CCkhadar%5CDownloads%5CAI_Baseline_Map%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CCkhadar%5CDownloads%5CAI_Baseline_Map&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();